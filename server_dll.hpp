// Generated using https://github.com/a2x/cs2-dumper
// 2024-11-18 05:20:50.169129600 UTC

// 基于a2x的cs2_dumper进行了修改,更新了Deadlock的偏移定位. by Lsades
#pragma once

#include <cstddef>

namespace DL_dumper {
    namespace schemas {
        // Module: server.dll
        // Class count: 2252
        // Enum count: 364
        namespace server_dll {
            // Alignment: 1
            // Member count: 3
            enum class ELashGrappleState : uint8_t {
                ELashGrappleState_None = 0x0,
                ELashGrappleState_LiftingUp = 0x1,
                ELashGrappleState_HangingInAir = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class PropDoorRotatingOpenDirection_e : uint32_t {
                DOOR_ROTATING_OPEN_BOTH_WAYS = 0x0,
                DOOR_ROTATING_OPEN_FORWARD = 0x1,
                DOOR_ROTATING_OPEN_BACKWARD = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class EMantleType : uint32_t {
                EMantleNone = 0x0,
                EMantle32 = 0x1,
                EMantle64 = 0x2,
                EMantle96 = 0x3,
                EMantle128 = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class ECitadelRandomRollTypes : uint32_t {
                ECitadelRandomRoll_BulletCritChance = 0x0,
                ECitadelRandomRoll_BulletCritDebuffChance = 0x1,
                ECitadelRandomRoll_BreakableGoldPickup = 0x2,
                ECitadelRandomRoll_BreakablePowerupPickup = 0x3,
                ECitadelRandomRoll_LastEnum = 0x4
            };
            // Alignment: 4
            // Member count: 2
            enum class SceneOnPlayerDeath_t : uint32_t {
                SCENE_ONPLAYERDEATH_DO_NOTHING = 0x0,
                SCENE_ONPLAYERDEATH_CANCEL = 0x1
            };
            // Alignment: 4
            // Member count: 3
            enum class LessonPanelLayoutFileTypes_t : uint32_t {
                LAYOUT_HAND_DEFAULT = 0x0,
                LAYOUT_WORLD_DEFAULT = 0x1,
                LAYOUT_CUSTOM = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class TimelineCompression_t : uint32_t {
                TIMELINE_COMPRESSION_SUM = 0x0,
                TIMELINE_COMPRESSION_COUNT_PER_INTERVAL = 0x1,
                TIMELINE_COMPRESSION_AVERAGE = 0x2,
                TIMELINE_COMPRESSION_AVERAGE_BLEND = 0x3,
                TIMELINE_COMPRESSION_TOTAL = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class EAIScheduleFlags : uint32_t {
                SCHEDULE_FLAGS_NONE = 0x0,
                SCHEDULE_FLAGS_ABILITY = 0x1,
                SCHEDULE_FLAGS_INTERRUPT_ACTIVE_HANDSHAKES = 0x2,
                SCHEDULE_FLAGS_CANNOT_BE_INTERRUPTED_BY_SYNCHRONIZED_ABILITY = 0x4,
                SCHEDULE_FLAGS_CANNOT_BE_INTERRUPTED_BY_INCAPACITATION = 0x8
            };
            // Alignment: 4
            // Member count: 3
            enum class SubclassVDataChangeType_t : uint32_t {
                SUBCLASS_VDATA_CREATED = 0x0,
                SUBCLASS_VDATA_SUBCLASS_CHANGED = 0x1,
                SUBCLASS_VDATA_RELOADED = 0x2
            };
            // Alignment: 1
            // Member count: 5
            enum class ECatStatueState_t : uint8_t {
                ECatStatue_None = 0x0,
                ECatStatue_Shoulder = 0x1,
                ECatStatue_ProjectileOut = 0x2,
                ECatStatue_InWorld = 0x3,
                ECatStatue_InCooldown = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class CCitadelPlayerPawn_GraphController2_EMelee : uint32_t {
                EMelee_NONE = 0x0,
                EMelee_CHARGING = 0x1,
                EMelee_DASHING = 0x2,
                EMelee_HEAVY = 0x3,
                EMelee_LIGHT = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class StanceType_t : uint32_t {
                STANCE_CURRENT = 0xFFFFFFFFFFFFFFFF,
                STANCE_DEFAULT = 0x0,
                STANCE_CROUCHING = 0x1,
                STANCE_PRONE = 0x2,
                NUM_STANCES = 0x3
            };
            // Alignment: 4
            // Member count: 33
            enum class ECitadelObjective : uint32_t {
                k_eCitadelObjective_Team0_Core = 0x0,
                k_eCitadelObjective_Team0_Tier1_Lane1 = 0x1,
                k_eCitadelObjective_Team0_Tier1_Lane2 = 0x2,
                k_eCitadelObjective_Team0_Tier1_Lane3 = 0x3,
                k_eCitadelObjective_Team0_Tier1_Lane4 = 0x4,
                k_eCitadelObjective_Team0_Tier2_Lane1 = 0x5,
                k_eCitadelObjective_Team0_Tier2_Lane2 = 0x6,
                k_eCitadelObjective_Team0_Tier2_Lane3 = 0x7,
                k_eCitadelObjective_Team0_Tier2_Lane4 = 0x8,
                k_eCitadelObjective_Team0_Titan = 0x9,
                k_eCitadelObjective_Team0_TitanShieldGenerator_1 = 0xA,
                k_eCitadelObjective_Team0_TitanShieldGenerator_2 = 0xB,
                k_eCitadelObjective_Team0_BarrackBoss_Lane1 = 0xC,
                k_eCitadelObjective_Team0_BarrackBoss_Lane2 = 0xD,
                k_eCitadelObjective_Team0_BarrackBoss_Lane3 = 0xE,
                k_eCitadelObjective_Team0_BarrackBoss_Lane4 = 0xF,
                k_eCitadelObjective_Team1_Core = 0x10,
                k_eCitadelObjective_Team1_Tier1_Lane1 = 0x11,
                k_eCitadelObjective_Team1_Tier1_Lane2 = 0x12,
                k_eCitadelObjective_Team1_Tier1_Lane3 = 0x13,
                k_eCitadelObjective_Team1_Tier1_Lane4 = 0x14,
                k_eCitadelObjective_Team1_Tier2_Lane1 = 0x15,
                k_eCitadelObjective_Team1_Tier2_Lane2 = 0x16,
                k_eCitadelObjective_Team1_Tier2_Lane3 = 0x17,
                k_eCitadelObjective_Team1_Tier2_Lane4 = 0x18,
                k_eCitadelObjective_Team1_Titan = 0x19,
                k_eCitadelObjective_Team1_TitanShieldGenerator_1 = 0x1A,
                k_eCitadelObjective_Team1_TitanShieldGenerator_2 = 0x1B,
                k_eCitadelObjective_Team1_BarrackBoss_Lane1 = 0x1C,
                k_eCitadelObjective_Team1_BarrackBoss_Lane2 = 0x1D,
                k_eCitadelObjective_Team1_BarrackBoss_Lane3 = 0x1E,
                k_eCitadelObjective_Team1_BarrackBoss_Lane4 = 0x1F,
                k_eCitadelObjective_Neutral_Mid = 0x20
            };
            // Alignment: 4
            // Member count: 3
            enum class Explosions : uint32_t {
                expRandom = 0x0,
                expDirected = 0x1,
                expUsePrecise = 0x2
            };
            // Alignment: 4
            // Member count: 7
            enum class CitadelPortraitEnvironmentType_t : uint32_t {
                CITADEL_PORTRAIT_ENVIRONMENT_INVALID = 0xFFFFFFFFFFFFFFFF,
                CITADEL_PORTRAIT_ENVIRONMENT_DEFAULT = 0x0,
                CITADEL_PORTRAIT_ENVIRONMENT_FULL_BODY = 0x1,
                CITADEL_PORTRAIT_ENVIRONMENT_CARD = 0x2,
                CITADEL_PORTRAIT_ENVIRONMENT_WEBPAGE = 0x3,
                CITADEL_PORTRAIT_ENVIRONMENT_FULL_BODY_RIGHT_SIDE = 0x4,
                CITADEL_PORTRAIT_ENVIRONMENT_TYPE_COUNT = 0x5
            };
            // Alignment: 4
            // Member count: 3
            enum class EconEntityParticleDisableMode_t : uint32_t {
                ECON_ENTITY_PARTICLES_ENABLED = 0x0,
                ECON_ENTITY_PARTICLES_DISABLED = 0x1,
                ECON_ENTITY_PARTICLES_DISABLED_BUT_PLAY_ENDCAPS_TO_STOP = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class EGCServerLobbyData : uint32_t {
                k_EServerLobbyData_PlayerMMR = 0x1,
                k_EServerLobbyData_PlayerInfo = 0x2,
                k_EServerLobbyData_PostMatchSurvey = 0x3,
                k_EServerLobbyData_AutoTest = 0x4
            };
            // Alignment: 4
            // Member count: 4
            enum class PropertyValueApplyFilter_t : uint32_t {
                EApplyFilter_None = 0x0,
                EApplyFilter_OnlyIfImbued = 0x1,
                EApplyFilter_OnlyIfNonImbued = 0x2,
                EApplyFilter_OnlyIfHasCharges = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class ObserverInterpState_t : uint32_t {
                OBSERVER_INTERP_NONE = 0x0,
                OBSERVER_INTERP_TRAVELING = 0x1,
                OBSERVER_INTERP_SETTLING = 0x2
            };
            // Alignment: 4
            // Member count: 120
            enum class ENetworkDisconnectionReason : uint32_t {
                NETWORK_DISCONNECT_INVALID = 0x0,
                NETWORK_DISCONNECT_SHUTDOWN = 0x1,
                NETWORK_DISCONNECT_DISCONNECT_BY_USER = 0x2,
                NETWORK_DISCONNECT_DISCONNECT_BY_SERVER = 0x3,
                NETWORK_DISCONNECT_LOST = 0x4,
                NETWORK_DISCONNECT_OVERFLOW = 0x5,
                NETWORK_DISCONNECT_STEAM_BANNED = 0x6,
                NETWORK_DISCONNECT_STEAM_INUSE = 0x7,
                NETWORK_DISCONNECT_STEAM_TICKET = 0x8,
                NETWORK_DISCONNECT_STEAM_LOGON = 0x9,
                NETWORK_DISCONNECT_STEAM_AUTHCANCELLED = 0xA,
                NETWORK_DISCONNECT_STEAM_AUTHALREADYUSED = 0xB,
                NETWORK_DISCONNECT_STEAM_AUTHINVALID = 0xC,
                NETWORK_DISCONNECT_STEAM_VACBANSTATE = 0xD,
                NETWORK_DISCONNECT_STEAM_LOGGED_IN_ELSEWHERE = 0xE,
                NETWORK_DISCONNECT_STEAM_VAC_CHECK_TIMEDOUT = 0xF,
                NETWORK_DISCONNECT_STEAM_DROPPED = 0x10,
                NETWORK_DISCONNECT_STEAM_OWNERSHIP = 0x11,
                NETWORK_DISCONNECT_SERVERINFO_OVERFLOW = 0x12,
                NETWORK_DISCONNECT_TICKMSG_OVERFLOW = 0x13,
                NETWORK_DISCONNECT_STRINGTABLEMSG_OVERFLOW = 0x14,
                NETWORK_DISCONNECT_DELTAENTMSG_OVERFLOW = 0x15,
                NETWORK_DISCONNECT_TEMPENTMSG_OVERFLOW = 0x16,
                NETWORK_DISCONNECT_SOUNDSMSG_OVERFLOW = 0x17,
                NETWORK_DISCONNECT_SNAPSHOTOVERFLOW = 0x18,
                NETWORK_DISCONNECT_SNAPSHOTERROR = 0x19,
                NETWORK_DISCONNECT_RELIABLEOVERFLOW = 0x1A,
                NETWORK_DISCONNECT_BADDELTATICK = 0x1B,
                NETWORK_DISCONNECT_NOMORESPLITS = 0x1C,
                NETWORK_DISCONNECT_TIMEDOUT = 0x1D,
                NETWORK_DISCONNECT_DISCONNECTED = 0x1E,
                NETWORK_DISCONNECT_LEAVINGSPLIT = 0x1F,
                NETWORK_DISCONNECT_DIFFERENTCLASSTABLES = 0x20,
                NETWORK_DISCONNECT_BADRELAYPASSWORD = 0x21,
                NETWORK_DISCONNECT_BADSPECTATORPASSWORD = 0x22,
                NETWORK_DISCONNECT_HLTVRESTRICTED = 0x23,
                NETWORK_DISCONNECT_NOSPECTATORS = 0x24,
                NETWORK_DISCONNECT_HLTVUNAVAILABLE = 0x25,
                NETWORK_DISCONNECT_HLTVSTOP = 0x26,
                NETWORK_DISCONNECT_KICKED = 0x27,
                NETWORK_DISCONNECT_BANADDED = 0x28,
                NETWORK_DISCONNECT_KICKBANADDED = 0x29,
                NETWORK_DISCONNECT_HLTVDIRECT = 0x2A,
                NETWORK_DISCONNECT_PURESERVER_CLIENTEXTRA = 0x2B,
                NETWORK_DISCONNECT_PURESERVER_MISMATCH = 0x2C,
                NETWORK_DISCONNECT_USERCMD = 0x2D,
                NETWORK_DISCONNECT_REJECTED_BY_GAME = 0x2E,
                NETWORK_DISCONNECT_MESSAGE_PARSE_ERROR = 0x2F,
                NETWORK_DISCONNECT_INVALID_MESSAGE_ERROR = 0x30,
                NETWORK_DISCONNECT_BAD_SERVER_PASSWORD = 0x31,
                NETWORK_DISCONNECT_DIRECT_CONNECT_RESERVATION = 0x32,
                NETWORK_DISCONNECT_CONNECTION_FAILURE = 0x33,
                NETWORK_DISCONNECT_NO_PEER_GROUP_HANDLERS = 0x34,
                NETWORK_DISCONNECT_RECONNECTION = 0x35,
                NETWORK_DISCONNECT_LOOPSHUTDOWN = 0x36,
                NETWORK_DISCONNECT_LOOPDEACTIVATE = 0x37,
                NETWORK_DISCONNECT_HOST_ENDGAME = 0x38,
                NETWORK_DISCONNECT_LOOP_LEVELLOAD_ACTIVATE = 0x39,
                NETWORK_DISCONNECT_CREATE_SERVER_FAILED = 0x3A,
                NETWORK_DISCONNECT_EXITING = 0x3B,
                NETWORK_DISCONNECT_REQUEST_HOSTSTATE_IDLE = 0x3C,
                NETWORK_DISCONNECT_REQUEST_HOSTSTATE_HLTVRELAY = 0x3D,
                NETWORK_DISCONNECT_CLIENT_CONSISTENCY_FAIL = 0x3E,
                NETWORK_DISCONNECT_CLIENT_UNABLE_TO_CRC_MAP = 0x3F,
                NETWORK_DISCONNECT_CLIENT_NO_MAP = 0x40,
                NETWORK_DISCONNECT_CLIENT_DIFFERENT_MAP = 0x41,
                NETWORK_DISCONNECT_SERVER_REQUIRES_STEAM = 0x42,
                NETWORK_DISCONNECT_STEAM_DENY_MISC = 0x43,
                NETWORK_DISCONNECT_STEAM_DENY_BAD_ANTI_CHEAT = 0x44,
                NETWORK_DISCONNECT_SERVER_SHUTDOWN = 0x45,
                NETWORK_DISCONNECT_REPLAY_INCOMPATIBLE = 0x47,
                NETWORK_DISCONNECT_CONNECT_REQUEST_TIMEDOUT = 0x48,
                NETWORK_DISCONNECT_SERVER_INCOMPATIBLE = 0x49,
                NETWORK_DISCONNECT_LOCALPROBLEM_MANYRELAYS = 0x4A,
                NETWORK_DISCONNECT_LOCALPROBLEM_HOSTEDSERVERPRIMARYRELAY = 0x4B,
                NETWORK_DISCONNECT_LOCALPROBLEM_NETWORKCONFIG = 0x4C,
                NETWORK_DISCONNECT_LOCALPROBLEM_OTHER = 0x4D,
                NETWORK_DISCONNECT_REMOTE_TIMEOUT = 0x4F,
                NETWORK_DISCONNECT_REMOTE_TIMEOUT_CONNECTING = 0x50,
                NETWORK_DISCONNECT_REMOTE_OTHER = 0x51,
                NETWORK_DISCONNECT_REMOTE_BADCRYPT = 0x52,
                NETWORK_DISCONNECT_REMOTE_CERTNOTTRUSTED = 0x53,
                NETWORK_DISCONNECT_UNUSUAL = 0x54,
                NETWORK_DISCONNECT_INTERNAL_ERROR = 0x55,
                NETWORK_DISCONNECT_REJECT_BADCHALLENGE = 0x80,
                NETWORK_DISCONNECT_REJECT_NOLOBBY = 0x81,
                NETWORK_DISCONNECT_REJECT_BACKGROUND_MAP = 0x82,
                NETWORK_DISCONNECT_REJECT_SINGLE_PLAYER = 0x83,
                NETWORK_DISCONNECT_REJECT_HIDDEN_GAME = 0x84,
                NETWORK_DISCONNECT_REJECT_LANRESTRICT = 0x85,
                NETWORK_DISCONNECT_REJECT_BADPASSWORD = 0x86,
                NETWORK_DISCONNECT_REJECT_SERVERFULL = 0x87,
                NETWORK_DISCONNECT_REJECT_INVALIDRESERVATION = 0x88,
                NETWORK_DISCONNECT_REJECT_FAILEDCHANNEL = 0x89,
                NETWORK_DISCONNECT_REJECT_CONNECT_FROM_LOBBY = 0x8A,
                NETWORK_DISCONNECT_REJECT_RESERVED_FOR_LOBBY = 0x8B,
                NETWORK_DISCONNECT_REJECT_INVALIDKEYLENGTH = 0x8C,
                NETWORK_DISCONNECT_REJECT_OLDPROTOCOL = 0x8D,
                NETWORK_DISCONNECT_REJECT_NEWPROTOCOL = 0x8E,
                NETWORK_DISCONNECT_REJECT_INVALIDCONNECTION = 0x8F,
                NETWORK_DISCONNECT_REJECT_INVALIDCERTLEN = 0x90,
                NETWORK_DISCONNECT_REJECT_INVALIDSTEAMCERTLEN = 0x91,
                NETWORK_DISCONNECT_REJECT_STEAM = 0x92,
                NETWORK_DISCONNECT_REJECT_SERVERAUTHDISABLED = 0x93,
                NETWORK_DISCONNECT_REJECT_SERVERCDKEYAUTHINVALID = 0x94,
                NETWORK_DISCONNECT_REJECT_BANNED = 0x95,
                NETWORK_DISCONNECT_KICKED_TEAMKILLING = 0x96,
                NETWORK_DISCONNECT_KICKED_TK_START = 0x97,
                NETWORK_DISCONNECT_KICKED_UNTRUSTEDACCOUNT = 0x98,
                NETWORK_DISCONNECT_KICKED_CONVICTEDACCOUNT = 0x99,
                NETWORK_DISCONNECT_KICKED_COMPETITIVECOOLDOWN = 0x9A,
                NETWORK_DISCONNECT_KICKED_TEAMHURTING = 0x9B,
                NETWORK_DISCONNECT_KICKED_HOSTAGEKILLING = 0x9C,
                NETWORK_DISCONNECT_KICKED_VOTEDOFF = 0x9D,
                NETWORK_DISCONNECT_KICKED_IDLE = 0x9E,
                NETWORK_DISCONNECT_KICKED_SUICIDE = 0x9F,
                NETWORK_DISCONNECT_KICKED_NOSTEAMLOGIN = 0xA0,
                NETWORK_DISCONNECT_KICKED_NOSTEAMTICKET = 0xA1,
                NETWORK_DISCONNECT_KICKED_INPUTAUTOMATION = 0xA2,
                NETWORK_DISCONNECT_KICKED_VACNETABNORMALBEHAVIOR = 0xA3
            };
            // Alignment: 4
            // Member count: 5
            enum class ECitadelPingMessageRecipients_t : uint32_t {
                k_ECitadelRecipients_GlobalFriendlyTeam = 0x0,
                k_ECitadelRecipients_RecipientAndPlayer = 0x1,
                k_ECitadelRecipients_RecipientsAroundPlayer = 0x2,
                k_ECitadelRecipients_EntityResponseOnly = 0x3,
                k_ECitadelRecipients_GlobalAllChat = 0x4
            };
            // Alignment: 4
            // Member count: 3
            enum class WorldTextPanelOrientation_t : uint32_t {
                WORLDTEXT_ORIENTATION_DEFAULT = 0x0,
                WORLDTEXT_ORIENTATION_FACEUSER = 0x1,
                WORLDTEXT_ORIENTATION_FACEUSER_UPRIGHT = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class DIALOG_TYPE : uint32_t {
                DIALOG_MSG = 0x0,
                DIALOG_MENU = 0x1,
                DIALOG_TEXT = 0x2,
                DIALOG_ENTRY = 0x3,
                DIALOG_ASKCONNECT = 0x4
            };
            // Alignment: 4
            // Member count: 4
            enum class ModifierSoundRecipients_t : uint32_t {
                MODIFIER_SOUND_RECIPIENT_ALWAYS = 0x0,
                MODIFIER_SOUND_RECIPIENT_PARENT_IS_LOCAL_PLAYER = 0x1,
                MODIFIER_SOUND_RECIPIENT_PARENT_ON_SAME_TEAM_AS_LOCAL_PLAYER = 0x2,
                MODIFIER_SOUND_RECIPIENT_PARENT_ON_OPPOSITE_TEAM_AS_LOCAL_PLAYER = 0x3
            };
            // Alignment: 4
            // Member count: 186
            enum class EModifierState : uint32_t {
                MODIFIER_STATE_MATERIAL_OVERRIDE = 0x0,
                MODIFIER_STATE_ENTERING_VEHICLE = 0x1,
                MODIFIER_STATE_EXITING_VEHICLE = 0x2,
                MODIFIER_STATE_UNRESTRICTED_MOVEMENT = 0x3,
                MODIFIER_STATE_FORCE_ALERT_STATE = 0x4,
                MODIFIER_STATE_DISABLE_SQUAD = 0x5,
                MODIFIER_STATE_IMMOBILIZED = 0x6,
                MODIFIER_STATE_DISARMED = 0x7,
                MODIFIER_STATE_MUTED = 0x8,
                MODIFIER_STATE_SILENCED = 0x9,
                MODIFIER_STATE_SILENCE_MOVEMENT_ABILITES = 0xA,
                MODIFIER_STATE_SILENCED_HIDDEN = 0xB,
                MODIFIER_STATE_STUNNED = 0xC,
                MODIFIER_STATE_INVULNERABLE = 0xD,
                MODIFIER_STATE_TECH_INVULNERABLE = 0xE,
                MODIFIER_STATE_TECH_DAMAGE_INVULNERABLE = 0xF,
                MODIFIER_STATE_TECH_UNTARGETABLE_BY_ENEMIES = 0x10,
                MODIFIER_STATE_STATUS_IMMUNE = 0x11,
                MODIFIER_STATE_UNSTOPPABLE = 0x12,
                MODIFIER_STATE_OUT_OF_GAME = 0x13,
                MODIFIER_STATE_COMMAND_RESTRICTED = 0x14,
                MODIFIER_STATE_CHARGING = 0x15,
                MODIFIER_STATE_OBSCURED = 0x16,
                MODIFIER_STATE_INVISIBLE_TO_ENEMY = 0x17,
                MODIFIER_STATE_INVISIBLE_TO_ENEMY_CAST = 0x18,
                MODIFIER_STATE_IGNORED_BY_NPC_TARGETING = 0x19,
                MODIFIER_STATE_NPC_TARGETABLE_WHILE_INVULNERABLE = 0x1A,
                MODIFIER_STATE_SPRINTING = 0x1B,
                MODIFIER_STATE_UNKILLABLE = 0x1C,
                MODIFIER_STATE_GROUND_DASHING = 0x1D,
                MODIFIER_STATE_ADDITIONAL_AIR_MOVES = 0x1E,
                MODIFIER_STATE_UNLIMITED_AIR_DASHES = 0x1F,
                MODIFIER_STATE_AIR_DASHING = 0x20,
                MODIFIER_STATE_MOVEMENT_ABILITY_RESTRICTED = 0x21,
                MODIFIER_STATE_SPRINT_NO_INTERRUPT = 0x22,
                MODIFIER_STATE_SPRINT_DISABLED = 0x23,
                MODIFIER_STATE_IN_SHOP = 0x24,
                MODIFIER_STATE_IN_FOUNTAIN = 0x25,
                MODIFIER_STATE_IN_ENEMY_BASE = 0x26,
                MODIFIER_STATE_IN_FRIENDLY_BASE = 0x27,
                MODIFIER_STATE_IN_MID_BOSS_TEMPLE = 0x28,
                MODIFIER_STATE_IN_SHOPTUNNEL_SAPPHIRE = 0x29,
                MODIFIER_STATE_IN_SHOPTUNNEL_AMBER = 0x2A,
                MODIFIER_STATE_DASH_DISABLED = 0x2B,
                MODIFIER_STATE_DASH_DISABLED_DEBUFF = 0x2C,
                MODIFIER_STATE_BURNING = 0x2D,
                MODIFIER_STATE_HEALTH_REGEN_DISABLED = 0x2E,
                MODIFIER_STATE_HEALTH_EXTERNAL_REGEN_DISABLED = 0x2F,
                MODIFIER_STATE_HEALING_DISABLED = 0x30,
                MODIFIER_STATE_DAMAGE_MOVEMENT_PENALTY_IMMUNE = 0x31,
                MODIFIER_STATE_BUSY_WITH_ACTION = 0x32,
                MODIFIER_STATE_SLOWED = 0x33,
                MODIFIER_STATE_SHOOTING_DISABLED = 0x34,
                MODIFIER_STATE_SHOOTING_FORCED_ON = 0x35,
                MODIFIER_STATE_MELEE_ATTACKS_ONLY = 0x36,
                MODIFIER_STATE_SLIDING = 0x37,
                MODIFIER_STATE_VISIBLE_TO_ENEMY = 0x38,
                MODIFIER_STATE_INFINITE_CLIP = 0x39,
                MODIFIER_STATE_KNOCKDOWN_IMMUNE = 0x3A,
                MODIFIER_STATE_JUMP_DISABLED = 0x3B,
                MODIFIER_STATE_DUCKING_DISABLED = 0x3C,
                MODIFIER_STATE_DUCKING_FORCED = 0x3D,
                MODIFIER_STATE_AIR_DUCKING_FORCED = 0x3E,
                MODIFIER_STATE_IS_ASLEEP = 0x3F,
                MODIFIER_STATE_GLOW_THROUGH_WALLS_TO_ENEMY = 0x40,
                MODIFIER_STATE_GLOW_THROUGH_WALLS_TO_PROVIDER = 0x41,
                MODIFIER_STATE_GLOW_THROUGH_WALLS_TO_PROVIDER_TEAMMATES_WITHIN_RANGE = 0x42,
                MODIFIER_STATE_GLOW_TO_PROVIDER = 0x43,
                MODIFIER_STATE_GLOW_IN_LOS_TO_ENEMY = 0x44,
                MODIFIER_STATE_DISABLE_AIR_SPREAD_PENALTY = 0x45,
                MODIFIER_STATE_USING_ZIPLINE = 0x46,
                MODIFIER_STATE_IN_ALTERNATE_DIMENSION = 0x47,
                MODIFIER_STATE_ANIMGRAPH_CONTROLLED_MOVEMENT = 0x48,
                MODIFIER_STATE_COMBAT_ABILITIES_DISABLED = 0x49,
                MODIFIER_STATE_CHAINED = 0x4A,
                MODIFIER_STATE_ALL_ARMOR_DISABLED = 0x4B,
                MODIFIER_STATE_BULLET_INVULNERABLE = 0x4C,
                MODIFIER_STATE_BREAK_ICE_PATH = 0x4D,
                MODIFIER_STATE_REFLECT_ATTACKS = 0x4E,
                MODIFIER_STATE_MANTLE_DISABLED = 0x4F,
                MODIFIER_STATE_AI_FORCE_AGGRO = 0x50,
                MODIFIER_STATE_AI_FORCE_CALM = 0x51,
                MODIFIER_STATE_DRONE_ATTACHED = 0x52,
                MODIFIER_STATE_AIM_FORWARD = 0x53,
                MODIFIER_STATE_AIM_FORWARD_WITH_PITCH = 0x54,
                MODIFIER_STATE_ZIPLINE_DISABLED = 0x55,
                MODIFIER_STATE_ZIPLINE_INTRO = 0x56,
                MODIFIER_STATE_RESPAWN_CREDIT = 0x57,
                MODIFIER_STATE_RESPAWN_CREDIT_PERSONAL = 0x58,
                MODIFIER_STATE_DISPLAY_LIFETIME = 0x59,
                MODIFIER_STATE_MELEE_DISABLED = 0x5A,
                MODIFIER_STATE_MELEE_DISABLED_DEBUFF = 0x5B,
                MODIFIER_STATE_GLITCHED = 0x5C,
                MODIFIER_STATE_SLIDING_DISABLED = 0x5D,
                MODIFIER_STATE_SLIDING_FORCED_TRY = 0x5E,
                MODIFIER_STATE_RELOAD_DISABLED = 0x5F,
                MODIFIER_STATE_RELOAD_MELEE_FULL_SPEED = 0x60,
                MODIFIER_STATE_MANUAL_RELOAD_DISABLED = 0x61,
                MODIFIER_STATE_UNIT_STATUS_HEALTH_HIDDEN = 0x62,
                MODIFIER_STATE_UNIT_STATUS_HIDDEN = 0x63,
                MODIFIER_STATE_FADE_ALPHA_TO_ZERO = 0x64,
                MODIFIER_STATE_FRIENDLY_FIRE_ENABLED = 0x65,
                MODIFIER_STATE_FLYING = 0x66,
                MODIFIER_STATE_SCOPED = 0x67,
                MODIFIER_STATE_ROLLING_BALL = 0x68,
                MODIFIER_STATE_VISCOUS_CUBED = 0x69,
                MODIFIER_STATE_SLOW_IMMUNE = 0x6A,
                MODIFIER_STATE_ROOT_IMMUNE = 0x6B,
                MODIFIER_STATE_IS_MELEE_TARGET = 0x6C,
                MODIFIER_STATE_GLOW_TO_ALLIES_AS_ENEMY = 0x6D,
                MODIFIER_STATE_LADDER_DISABLE = 0x6E,
                MODIFIER_STATE_IGNORE_BULLETS = 0x6F,
                MODIFIER_STATE_IGNORE_MELEE = 0x70,
                MODIFIER_STATE_HIDE_CROSSHAIR = 0x71,
                MODIFIER_STATE_HIDE_STAMINA = 0x72,
                MODIFIER_STATE_HIDE_AMMO = 0x73,
                MODIFIER_STATE_APPLY_VERTICAL_DRAG = 0x74,
                MODIFIER_STATE_NO_WINDUP = 0x75,
                MODIFIER_STATE_NO_SHOOTLOCKOUT_ON_JUMP = 0x76,
                MODIFIER_STATE_TITAN_LASER_VALID_TARGET = 0x77,
                MODIFIER_STATE_HAS_HOLLOW_POINT_BULLETS = 0x78,
                MODIFIER_STATE_SUPPRESS_AIR_DRAG = 0x79,
                MODIFIER_STATE_ICEBEAMING = 0x7A,
                MODIFIER_STATE_POWER_SLASHING = 0x7B,
                MODIFIER_STATE_IN_ALLY_SMOKE = 0x7C,
                MODIFIER_STATE_IN_ENEMY_SMOKE = 0x7D,
                MODIFIER_STATE_NIKUMAN_ACTIVE = 0x7E,
                MODIFIER_STATE_NO_OUTGOING_DAMAGE = 0x7F,
                MODIFIER_STATE_NO_INCOMING_DAMAGE = 0x80,
                MODIFIER_STATE_CHRONO_SWAPPING = 0x81,
                MODIFIER_STATE_BOUNCE_PAD_STOMPING = 0x82,
                MODIFIER_STATE_FLYING_BEETLE_TARGET = 0x83,
                MODIFIER_STATE_DREAMWEAVER_SLEEP = 0x84,
                MODIFIER_STATE_HOLDING_IDOL = 0x85,
                MODIFIER_STATE_RETURN_IDOL_AREA = 0x86,
                MODIFIER_STATE_RETURNING_IDOL = 0x87,
                MODIFIER_STATE_DROP_IDOL = 0x88,
                MODIFIER_STATE_GALVANIC_STORM_BUFF = 0x89,
                MODIFIER_STATE_IN_ABILITY_ALLOW_ZOOM = 0x8A,
                MODIFIER_STATE_IN_ABILITY_DISABLE_ZOOM = 0x8B,
                MODIFIER_STATE_STAMINA_REGEN_PAUSED = 0x8C,
                MODIFIER_STATE_PREMATCH = 0x8D,
                MODIFIER_STATE_SELF_DESTRUCT = 0x8E,
                MODIFIER_STATE_COOP_TETHER_ACTIVE = 0x8F,
                MODIFIER_STATE_COOP_TETHER_LOCKED_TARGET = 0x90,
                MODIFIER_STATE_LOCKED_AIM_ANGLES = 0x91,
                MODIFIER_STATE_ICEPATHING = 0x92,
                MODIFIER_STATE_BACKDOOR_PROTECTED = 0x93,
                MODIFIER_STATE_IN_COMBAT = 0x94,
                MODIFIER_STATE_DASHJUMP_STAMINA_FREE = 0x95,
                MODIFIER_STATE_YAMATO_SHADOW_FORM = 0x96,
                MODIFIER_STATE_IN_MID_BOSS_PIT = 0x97,
                MODIFIER_STATE_CASTS_IGNORE_CHANNELING = 0x98,
                MODIFIER_STATE_CAN_ACTIVE_RELOAD = 0x99,
                MODIFIER_STATE_DIGGER_BURROW_CHANNEL = 0x9A,
                MODIFIER_STATE_DIGGER_SPIN = 0x9B,
                MODIFIER_STATE_NEAR_REJUVINATOR = 0x9C,
                MODIFIER_STATE_IN_TIER3_PHASE2_BOSS_PIT = 0x9D,
                MODIFIER_STATE_TAKES_FULLDAMAGE_NO_FALLOFF = 0x9E,
                MODIFIER_STATE_PREDATORY_STATUE_TARGET = 0x9F,
                MODIFIER_STATE_FOOTSTEP_SOUNDS_DISABLE = 0xA0,
                MODIFIER_STATE_MOVEMENT_FOLEY_SOUNDS_DISABLE = 0xA1,
                MODIFIER_STATE_DO_NOT_DRAW_MODEL = 0xA2,
                MODIFIER_STATE_SHIV_FRENZIED = 0xA3,
                MODIFIER_STATE_FORCE_ANIM_DUCK = 0xA4,
                MODIFIER_STATE_FORCE_ANIM_KEEP_STILL = 0xA5,
                MODIFIER_STATE_SIPHON_BULLET_LOSS = 0xA6,
                MODIFIER_STATE_APPLY_FOV_MOUSE_SENSITIVITY_SCALE = 0xA7,
                MODIFIER_STATE_NEAR_CLIMBABLE_ROPE = 0xA8,
                MODIFIER_STATE_IS_CLIMBING_ROPE = 0xA9,
                MODIFIER_STATE_FORCE_CAN_PARRY = 0xAA,
                MODIFIER_STATE_IS_MAGIC_SHOCK_IMMUNE = 0xAB,
                MODIFIER_STATE_IN_SLIDE_CHARGED_MELEE_ATTACK = 0xAC,
                MODIFIER_STATE_FORCE_GROUND_JUMP = 0xAD,
                MODIFIER_STATE_FROZEN = 0xAE,
                MODIFIER_STATE_ASSASSINATE_LOWHEALTH_TARGET = 0xAF,
                MODIFIER_STATE_TELEPORTER_DISABLED = 0xB0,
                MODIFIER_STATE_IN_SMALL_INTERIOR_SPACE = 0xB1,
                MODIFIER_STATE_IN_MEDIUM_INTERIOR_SPACE = 0xB2,
                MODIFIER_STATE_ENABLE_CLOAK_DESAT = 0xB3,
                MODIFIER_STATE_NANO_RECENT_DAMAGE = 0xB4,
                MODIFIER_STATE_DISABLE_INATTACK2_DESELECT = 0xB5,
                MODIFIER_STATE_PULLDOWN_TO_GROUND = 0xB6,
                MODIFIER_STATE_FATHOM_DO_NOT_REQUIRE_STAND_STILL_FOR_INVIS = 0xB7,
                MODIFIER_STATE_COUNT = 0xB8,
                MODIFIER_STATE_INVALID = 0xFF
            };
            // Alignment: 4
            // Member count: 3
            enum class WorldTextPanelHorizontalAlign_t : uint32_t {
                WORLDTEXT_HORIZONTAL_ALIGN_LEFT = 0x0,
                WORLDTEXT_HORIZONTAL_ALIGN_CENTER = 0x1,
                WORLDTEXT_HORIZONTAL_ALIGN_RIGHT = 0x2
            };
            // Alignment: 1
            // Member count: 3
            enum class SequenceFinishNotifyState_t : uint8_t {
                eDoNotNotify = 0x0,
                eNotifyWhenFinished = 0x1,
                eNotifyTriggered = 0x2
            };
            // Alignment: 4
            // Member count: 7
            enum class GoalType_t : uint32_t {
                GOALTYPE_NONE = 0x0,
                GOALTYPE_ENTITY = 0x1,
                GOALTYPE_PATHCORNER = 0x2,
                GOALTYPE_LOCATION = 0x3,
                GOALTYPE_COVER = 0x4,
                GOALTYPE_LOS = 0x5,
                GOALTYPE_INVALID = 0x6
            };
            // Alignment: 4
            // Member count: 2
            enum class EDeathSequence : uint32_t {
                NONE = 0x0,
                GENERIC = 0x1
            };
            // Alignment: 4
            // Member count: 2
            enum class ETier3Phase_t : uint32_t {
                ETier3Phase_Phase1 = 0x0,
                ETier3Phase_Phase2 = 0x1
            };
            // Alignment: 4
            // Member count: 21
            enum class EDemoCommands : uint32_t {
                DEM_Error = 0xFFFFFFFFFFFFFFFF,
                DEM_Stop = 0x0,
                DEM_FileHeader = 0x1,
                DEM_FileInfo = 0x2,
                DEM_SyncTick = 0x3,
                DEM_SendTables = 0x4,
                DEM_ClassInfo = 0x5,
                DEM_StringTables = 0x6,
                DEM_Packet = 0x7,
                DEM_SignonPacket = 0x8,
                DEM_ConsoleCmd = 0x9,
                DEM_CustomData = 0xA,
                DEM_CustomDataCallbacks = 0xB,
                DEM_UserCmd = 0xC,
                DEM_FullPacket = 0xD,
                DEM_SaveGame = 0xE,
                DEM_SpawnGroups = 0xF,
                DEM_AnimationData = 0x10,
                DEM_AnimationHeader = 0x11,
                DEM_Max = 0x12,
                DEM_IsCompressed = 0x40
            };
            // Alignment: 4
            // Member count: 5
            enum class EModifierPriority : uint32_t {
                MODIFIER_PRIORITY_LOW = 0x0,
                MODIFIER_PRIORITY_NORMAL = 0x1,
                MODIFIER_PRIORITY_HIGH = 0x2,
                MODIFIER_PRIORITY_ULTRA = 0x3,
                MODIFIER_PRIORITY_SUPER_ULTRA = 0x4
            };
            // Alignment: 4
            // Member count: 4
            enum class AI_MovementHeadingMode_t : uint32_t {
                eContinuous = 0x0,
                eDiscretized_180 = 0x1,
                eDiscretized_90 = 0x2,
                eDiscretized_45 = 0x3
            };
            // Alignment: 4
            // Member count: 4
            enum class TrainOrientationType_t : uint32_t {
                TrainOrientation_Fixed = 0x0,
                TrainOrientation_AtPathTracks = 0x1,
                TrainOrientation_LinearBlend = 0x2,
                TrainOrientation_EaseInEaseOut = 0x3
            };
            // Alignment: 4
            // Member count: 9
            enum class EGCServerSignoutData : uint32_t {
                k_EServerSignoutData_Disconnections = 0x2,
                k_EServerSignoutData_AccountStatChanges = 0x3,
                k_EServerSignoutData_DetailedStats = 0x4,
                k_EServerSignoutData_ServerPerfStats = 0x5,
                k_EServerSignoutData_PerfData = 0x6,
                k_EServerSignoutData_PlayerChat = 0x7,
                k_EServerSignoutData_BookRewards = 0x8,
                k_EServerSignoutData_PenalizedPlayers = 0x9,
                k_EServerSignoutData_ReportCheaters = 0xA
            };
            // Alignment: 4
            // Member count: 3
            enum class ECaptureTriggerType : uint32_t {
                ENoEffect = 0x0,
                EAmmoSpawn = 0x1,
                EHeal = 0x2
            };
            // Alignment: 4
            // Member count: 2
            enum class MODIFIER_ENTRY_TYPE : uint32_t {
                MODIFIER_ENTRY_TYPE_ACTIVE = 0x1,
                MODIFIER_ENTRY_TYPE_REMOVED = 0x2
            };
            // Alignment: 1
            // Member count: 3
            enum class BeginDeathLifeStateTransition_t : uint8_t {
                NO_CHANGE_IN_LIFESTATE = 0x0,
                TRANSITION_TO_LIFESTATE_DYING = 0x1,
                TRANSITION_TO_LIFESTATE_DEAD = 0x2
            };
            // Alignment: 2
            // Member count: 13
            enum class SoundTypes_t : uint16_t {
                SOUND_NONE = 0x0,
                SOUND_COMBAT = 0x1,
                SOUND_PLAYER = 0x2,
                SOUND_DANGER = 0x4,
                SOUND_BULLET_IMPACT = 0x8,
                SOUND_THUMPER = 0x10,
                SOUND_PHYSICS_DANGER = 0x20,
                SOUND_MOVE_AWAY = 0x40,
                SOUND_PLAYER_VEHICLE = 0x80,
                SOUND_GLASS_BREAK = 0x100,
                SOUND_PHYSICS_OBJECT = 0x200,
                SOUND_WARN_FRIENDS = 0x400,
                SOUND_FOOD = 0x800
            };
            // Alignment: 4
            // Member count: 33
            enum class CITADEL_UNIT_TARGET_TYPE : uint32_t {
                CITADEL_UNIT_TARGET_NONE = 0x0,
                CITADEL_UNIT_TARGET_HERO_FRIENDLY = 0x1,
                CITADEL_UNIT_TARGET_TROOPER_FRIENDLY = 0x2,
                CITADEL_UNIT_TARGET_BOSS_FRIENDLY = 0x4,
                CITADEL_UNIT_TARGET_BUILDING_FRIENDLY = 0x8,
                CITADEL_UNIT_TARGET_PROP_FRIENDLY = 0x10,
                CITADEL_UNIT_TARGET_MINION_FRIENDLY = 0x20,
                CITADEL_UNIT_TARGET_GOLD_ORBS_FRIENDLY = 0x40,
                CITADEL_UNIT_TARGET_TROPHY_FRIENDLY = 0x80,
                CITADEL_UNIT_TARGET_HERO_ENEMY = 0x100,
                CITADEL_UNIT_TARGET_TROOPER_ENEMY = 0x200,
                CITADEL_UNIT_TARGET_BOSS_ENEMY = 0x400,
                CITADEL_UNIT_TARGET_BUILDING_ENEMY = 0x800,
                CITADEL_UNIT_TARGET_PROP_ENEMY = 0x1000,
                CITADEL_UNIT_TARGET_MINION_ENEMY = 0x2000,
                CITADEL_UNIT_TARGET_GOLD_ORBS_ENEMY = 0x4000,
                CITADEL_UNIT_TARGET_TROPHY_ENEMY = 0x8000,
                CITADEL_UNIT_TARGET_NEUTRAL = 0x10000,
                CITADEL_UNIT_TARGET_ZIPLINE = 0x20000,
                CITADEL_UNIT_TARGET_BREAKABLE_PROP = 0x40000,
                CITADEL_UNIT_TARGET_HERO = 0x101,
                CITADEL_UNIT_TARGET_CREEP_FRIENDLY = 0x6,
                CITADEL_UNIT_TARGET_CREEP_ENEMY = 0x10600,
                CITADEL_UNIT_TARGET_CREEP = 0x10606,
                CITADEL_UNIT_TARGET_BOSS = 0x404,
                CITADEL_UNIT_TARGET_BUILDING = 0x808,
                CITADEL_UNIT_TARGET_PROP = 0x1010,
                CITADEL_UNIT_TARGET_MINION = 0x2020,
                CITADEL_UNIT_TARGET_GOLD_ORBS = 0x4040,
                CITADEL_UNIT_TARGET_TROPHY = 0x8080,
                CITADEL_UNIT_TARGET_ALL_FRIENDLY = 0x3F,
                CITADEL_UNIT_TARGET_ALL_ENEMY = 0x13F00,
                CITADEL_UNIT_TARGET_ALL = 0x13F3F
            };
            // Alignment: 4
            // Member count: 5
            enum class PointOrientGoalDirectionType_t : uint32_t {
                eAbsOrigin = 0x0,
                eCenter = 0x1,
                eHead = 0x2,
                eForward = 0x3,
                eEyesForward = 0x4
            };
            // Alignment: 1
            // Member count: 9
            enum class ItemFlagTypes_t : uint8_t {
                ITEM_FLAG_NONE = 0x0,
                ITEM_FLAG_CAN_SELECT_WITHOUT_AMMO = 0x1,
                ITEM_FLAG_NOAUTORELOAD = 0x2,
                ITEM_FLAG_NOAUTOSWITCHEMPTY = 0x4,
                ITEM_FLAG_LIMITINWORLD = 0x8,
                ITEM_FLAG_EXHAUSTIBLE = 0x10,
                ITEM_FLAG_DOHITLOCATIONDMG = 0x20,
                ITEM_FLAG_NOAMMOPICKUPS = 0x40,
                ITEM_FLAG_NOITEMPICKUP = 0x80
            };
            // Alignment: 4
            // Member count: 2
            enum class CameraParamMode : uint32_t {
                k_EParamMode_AllowInOneContext = 0x0,
                k_EParamMode_AllowInMultipleContexts = 0x1
            };
            // Alignment: 1
            // Member count: 6
            enum class EModTier_t : uint8_t {
                EModTier_Invalid = 0x0,
                EModTier_1 = 0x1,
                EModTier_2 = 0x2,
                EModTier_3 = 0x3,
                EModTier_4 = 0x4,
                EMaxModTier = 0x5
            };
            // Alignment: 2
            // Member count: 5
            enum class EFlexSlotTypes_t : uint16_t {
                EFlexSlot_Invalid = 0x0,
                EFlexSlot_AllTier1 = 0x1,
                EFlexSlot_Kill2Tier2 = 0x2,
                EFlexSlot_AllTier2 = 0x4,
                EFlexSlot_Generator = 0x8
            };
            // Alignment: 4
            // Member count: 2
            enum class TestHullMode_t : uint32_t {
                TEST_HULL_EVER_PASSABLE = 0x0,
                TEST_HULL_CURRENTLY_PASSABLE = 0x1
            };
            // Alignment: 1
            // Member count: 10
            enum class SurroundingBoundsType_t : uint8_t {
                USE_OBB_COLLISION_BOUNDS = 0x0,
                USE_BEST_COLLISION_BOUNDS = 0x1,
                USE_HITBOXES = 0x2,
                USE_SPECIFIED_BOUNDS = 0x3,
                USE_GAME_CODE = 0x4,
                USE_ROTATION_EXPANDED_BOUNDS = 0x5,
                USE_ROTATION_EXPANDED_ORIENTED_BOUNDS = 0x6,
                USE_COLLISION_BOUNDS_NEVER_VPHYSICS = 0x7,
                USE_ROTATION_EXPANDED_SEQUENCE_BOUNDS = 0x8,
                SURROUNDING_TYPE_BIT_COUNT = 0x3
            };
            // Alignment: 4
            // Member count: 5
            enum class LifeState_t : uint32_t {
                LIFE_ALIVE = 0x0,
                LIFE_DYING = 0x1,
                LIFE_DEAD = 0x2,
                LIFE_RESPAWNABLE = 0x3,
                LIFE_RESPAWNING = 0x4
            };
            // Alignment: 4
            // Member count: 2
            enum class PointOrientConstraint_t : uint32_t {
                eNone = 0x0,
                ePreserveUpAxis = 0x1
            };
            // Alignment: 1
            // Member count: 5
            enum class ELeapState_t : uint8_t {
                ELeapState_None = 0x0,
                ELeapState_Startup = 0x1,
                ELeapState_BoostingUp = 0x2,
                ELeapState_CrashingDown = 0x3,
                ELeapState_Land = 0x4
            };
            // Alignment: 4
            // Member count: 4
            enum class ECancelAbilityMode : uint32_t {
                ECancelAbilityMode_AbilityKey = 0x0,
                ECancelAbilityMode_CancelKey = 0x1,
                ECancelAbilityMode_Either = 0x2,
                ECancelAbilityModeMaxValue = 0x2
            };
            // Alignment: 4
            // Member count: 2
            enum class TargetIdentifierOriginType_t : uint32_t {
                eAbsOrigin = 0x0,
                eCenter = 0x1
            };
            // Alignment: 4
            // Member count: 30
            enum class SVC_Messages : uint32_t {
                svc_ServerInfo = 0x28,
                svc_FlattenedSerializer = 0x29,
                svc_ClassInfo = 0x2A,
                svc_SetPause = 0x2B,
                svc_CreateStringTable = 0x2C,
                svc_UpdateStringTable = 0x2D,
                svc_VoiceInit = 0x2E,
                svc_VoiceData = 0x2F,
                svc_Print = 0x30,
                svc_Sounds = 0x31,
                svc_SetView = 0x32,
                svc_ClearAllStringTables = 0x33,
                svc_CmdKeyValues = 0x34,
                svc_BSPDecal = 0x35,
                svc_SplitScreen = 0x36,
                svc_PacketEntities = 0x37,
                svc_Prefetch = 0x38,
                svc_Menu = 0x39,
                svc_GetCvarValue = 0x3A,
                svc_StopSound = 0x3B,
                svc_PeerList = 0x3C,
                svc_PacketReliable = 0x3D,
                svc_HLTVStatus = 0x3E,
                svc_ServerSteamID = 0x3F,
                svc_FullFrameSplit = 0x46,
                svc_RconServerDetails = 0x47,
                svc_UserMessage = 0x48,
                svc_Broadcast_Command = 0x4A,
                svc_HltvFixupOperatorStatus = 0x4B,
                svc_UserCmds = 0x4C
            };
            // Alignment: 4
            // Member count: 8
            enum class ECitadelMatchMode : uint32_t {
                k_ECitadelMatchMode_Invalid = 0x0,
                k_ECitadelMatchMode_Unranked = 0x1,
                k_ECitadelMatchMode_PrivateLobby = 0x2,
                k_ECitadelMatchMode_CoopBot = 0x3,
                k_ECitadelMatchMode_Ranked = 0x4,
                k_ECitadelMatchMode_ServerTest = 0x5,
                k_ECitadelMatchMode_Tutorial = 0x6,
                k_ECitadelMatchMode_HeroLabs = 0x7
            };
            // Alignment: 4
            // Member count: 4
            enum class PortraitSoundMode_t : uint32_t {
                PORTRAIT_SOUND_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PORTRAIT_SOUND_MODE_NO_SOUNDS = 0x0,
                PORTRAIT_SOUND_MODE_ONLY_TAUNT_SOUNDS = 0x1,
                PORTRAIT_SOUND_MODE_ALL_SOUNDS = 0x2
            };
            // Alignment: 4
            // Member count: 10
            enum class NPC_STATE : uint32_t {
                NPC_STATE_INVALID = 0xFFFFFFFFFFFFFFFF,
                NPC_STATE_INIT = 0x0,
                NPC_STATE_IDLE = 0x1,
                NPC_STATE_ALERT = 0x2,
                NPC_STATE_COMBAT = 0x3,
                NPC_STATE_SCRIPT = 0x4,
                NPC_STATE_DEAD = 0x5,
                NPC_STATE_INERT = 0x6,
                NPC_STATE_SYNCHRONIZED_SECONDARY = 0x7,
                NUM_NPC_STATES = 0x8
            };
            // Alignment: 4
            // Member count: 2
            enum class ModifierHiddenType_t : uint32_t {
                eHideAlways = 0x0,
                eHideIfCasterIsTarget = 0x1
            };
            // Alignment: 1
            // Member count: 3
            enum class LaneSide_t : uint8_t {
                Center = 0x0,
                Left = 0x1,
                Right = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class EHUDElementButtonHintLocType_t : uint32_t {
                EButtonHintLocType_Cast = 0x0,
                EButtonHintLocType_AltCast = 0x1,
                EButtonHintLocType_Custom = 0x2
            };
            // Alignment: 4
            // Member count: 7
            enum class ET3BossActivity : uint32_t {
                IdleShielded = 0x0,
                Idle = 0x1,
                Moving = 0x2,
                ElectricBeamWindup = 0x3,
                ElectricBeamShoot = 0x4,
                BecomingWeakenedLoop = 0x5,
                Weakened = 0x6
            };
            // Alignment: 4
            // Member count: 5
            enum class AIMotorTransitionState_t : uint32_t {
                eNone = 0x0,
                eFacingNotStarted = 0x1,
                eFacingStarted = 0x2,
                eFacingSuccessful = 0x3,
                eExecuting = 0x4
            };
            // Alignment: 4
            // Member count: 12
            enum class CitadelChatWheelQuickResponseTypes_t : uint32_t {
                CITADEL_QUICK_RESPONSE_NONE = 0xFFFFFFFFFFFFFFFF,
                CITADEL_QUICK_RESPONSE_DEFAULT = 0x0,
                CITADEL_QUICK_RESPONSE_THANKS = 0x0,
                CITADEL_QUICK_RESPONSE_YES = 0x1,
                CITADEL_QUICK_RESPONSE_YES_NO = 0x2,
                CITADEL_QUICK_RESPONSE_HEALING = 0x3,
                CITADEL_QUICK_RESPONSE_SHOP_OR_DEFEND = 0x4,
                CITADEL_QUICK_RESPONSE_HEADING_TO_LANE = 0x5,
                CITADEL_QUICK_RESPONSE_GOOD_JOB = 0x6,
                CITADEL_QUICK_RESPONSE_GREAT_KILL = 0x7,
                CITADEL_QUICK_RESPONSE_UH_OH = 0x8,
                CITADEL_QUICK_RESPONSE_COUNT = 0x9
            };
            // Alignment: 4
            // Member count: 6
            enum class ECurrencyType : uint32_t {
                ECurrencyInvalid = 0xFFFFFFFFFFFFFFFF,
                EGold = 0x0,
                EAbilityPoints = 0x1,
                EAbilityUnlocks = 0x2,
                EDeathPenaltyGold = 0x3,
                ECurrencyCount = 0x4
            };
            // Alignment: 4
            // Member count: 1
            enum class EDamageFlashFlags : uint32_t {
                EFlashFlag_DoT = 0x1
            };
            // Alignment: 1
            // Member count: 3
            enum class OnFrame : uint8_t {
                ONFRAME_UNKNOWN = 0x0,
                ONFRAME_TRUE = 0x1,
                ONFRAME_FALSE = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class EAbilityInterruptType : uint32_t {
                EAbilityInterruptNone = 0x0,
                EAbilityInterruptCancel = 0x1,
                EAbilityInterruptExternal = 0x2
            };
            // Alignment: 4
            // Member count: 12
            enum class Materials : uint32_t {
                matGlass = 0x0,
                matWood = 0x1,
                matMetal = 0x2,
                matFlesh = 0x3,
                matCinderBlock = 0x4,
                matCeilingTile = 0x5,
                matComputer = 0x6,
                matUnbreakableGlass = 0x7,
                matRocks = 0x8,
                matWeb = 0x9,
                matNone = 0xA,
                matLastMaterial = 0xB
            };
            // Alignment: 4
            // Member count: 17
            enum class StatusEffectProperty_t : uint32_t {
                EStatusEffect_None = 0x0,
                EStatusEffect_EMP = 0x1,
                EStatusEffect_Stun = 0x2,
                EStatusEffect_Freeze = 0x3,
                EStatusEffect_Burn = 0x4,
                EStatusEffect_Bleed = 0x5,
                EStatusEffect_Sleep = 0x6,
                EStatusEffect_Tethered = 0x7,
                EStatusEffect_Immobilized = 0x8,
                EStatusEffect_Disarmed = 0x9,
                EStatusEffect_Invisible = 0xA,
                EStatusEffect_Stacks = 0xB,
                EStatusEffect_InfiniteClip = 0xC,
                EStatusEffect_BulletDebuff = 0xD,
                EStatusEffect_Buff = 0xE,
                EStatusEffect_Petrify = 0xF,
                EStatusEffect_Count = 0x10
            };
            // Alignment: 4
            // Member count: 4
            enum class BreakableContentsType_t : uint32_t {
                BC_DEFAULT = 0x0,
                BC_EMPTY = 0x1,
                BC_PROP_GROUP_OVERRIDE = 0x2,
                BC_PARTICLE_SYSTEM_OVERRIDE = 0x3
            };
            // Alignment: 4
            // Member count: 6
            enum class ScriptedMoveTo_t : uint32_t {
                eWait = 0x0,
                eMoveWithGait = 0x3,
                eTeleport = 0x4,
                eWaitFacing = 0x5,
                eObsoleteBackCompat1 = 0x1,
                eObsoleteBackCompat2 = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class ECitadelAudioLoopSounds : uint32_t {
                CITADEL_AUDIO_LOOP_START_SOUND = 0x0,
                CITADEL_AUDIO_LOOP_LOOP_SOUND = 0x1,
                CITADEL_AUDIO_LOOP_STOP_SOUND = 0x2
            };
            // Alignment: 4
            // Member count: 7
            enum class EKnockDownTypes : uint32_t {
                KnockdownLarge = 0x0,
                KnockdownMedium = 0x1,
                KnockdownSmall = 0x2,
                KnockdownPancake = 0x3,
                KnockdownParried = 0x4,
                ENumKnockdowns = 0x5,
                EKnockdownInvalid = 0x5
            };
            // Alignment: 4
            // Member count: 22
            enum class EGCCitadelServerMessages : uint32_t {
                k_EMsgServerToGCMatchSignoutPermission = 0x271C,
                k_EMsgServerToGCMatchSignoutPermissionResponse = 0x271D,
                k_EMsgServerToGCMatchSignout = 0x271E,
                k_EMsgServerToGCMatchSignoutResponse = 0x271F,
                k_EMsgGCToServerAddSpectator = 0x2720,
                k_EMsgGCToServerAddSpectatorResponse = 0x2721,
                k_EMsgServerToGCIdlePing = 0x2722,
                k_EMsgGCToServerRequestPing = 0x2723,
                k_EMsgGCToServerAllocateForMatch = 0x2725,
                k_EMsgGCToServerAllocateForMatchResponse = 0x2726,
                k_EMsgServerToGCEnterMatchmaking = 0x2727,
                k_EMsgGCToServerCancelAllocateForMatch = 0x2728,
                k_EMsgServerToGCUpdateLobbyServerState = 0x2729,
                k_EMsgServerToGCAbandonMatch = 0x272A,
                k_EMsgServerToGCAbandonMatchResponse = 0x272B,
                k_EMsgServerToGCTestConnection = 0x272C,
                k_EMsgServerToGCTestConnectionResponse = 0x272D,
                k_EMsgGCToServerSetServerConVar = 0x2737,
                k_EMsgGCToServerSetServerConVarResponse = 0x2738,
                k_EMsgServerToGCUpdateMatchInfo = 0x2739,
                k_EMsgServerToGCReportCheater = 0x273A,
                k_EMsgServerToGCReportCheaterResponse = 0x273B
            };
            // Alignment: 4
            // Member count: 9
            enum class ECitadelWeaponTypes : uint32_t {
                ECitadelWeapon_Invalid = 0xFFFFFFFFFFFFFFFF,
                ECitadelWeapon_Pistol = 0x0,
                ECitadelWeapon_SMG = 0x1,
                ECitadelWeapon_Rifle = 0x2,
                ECitadelWeapon_MiniGun = 0x3,
                ECitadelWeapon_Shotgun = 0x4,
                ECitadelWeapon_Bow = 0x5,
                ECitadelWeapon_Laser = 0x6,
                ECitadelWeapon_Projectile = 0x7
            };
            // Alignment: 4
            // Member count: 40
            enum class CitadelPingWheelConcept_t : uint32_t {
                CITADEL_PING_CONCEPT_NONE = 0xFFFFFFFFFFFFFFFF,
                CITADEL_PING_LETS_GO_THIS_WAY = 0x0,
                CITADEL_PING_TEAMMATE = 0x1,
                CITADEL_PING_ENEMY_PLAYER = 0x2,
                CITADEL_PING_CAREFUL = 0x3,
                CITADEL_PING_MISSING = 0x4,
                CITADEL_PING_HELP = 0x5,
                CITADEL_PING_GOOD_JOB = 0x6,
                CITADEL_PING_THANK_YOU = 0x7,
                CITADEL_PING_GET_BACK = 0x8,
                CITADEL_PING_STUN = 0x9,
                CITADEL_PING_ATTACK_ENEMY = 0xA,
                CITADEL_PING_RETREAT = 0xB,
                CITADEL_PING_HEADING_TO_LANE = 0xC,
                CITADEL_PING_PUSH_LANE = 0xD,
                CITADEL_PING_DEFEND_LANE = 0xE,
                CITADEL_PING_IM_BACK = 0xF,
                CITADEL_PING_GOING_IN = 0x10,
                CITADEL_PING_STAY_TOGETHER = 0x11,
                CITADEL_PING_WAIT = 0x12,
                CITADEL_PING_PREGAME = 0x13,
                CITADEL_PING_IDOL = 0x14,
                CITADEL_PING_HEADED_TO_BASE = 0x15,
                CITADEL_PING_MID = 0x16,
                CITADEL_PING_ABILITY = 0x17,
                CITADEL_PING_NEED_HEAL = 0x18,
                CITADEL_PING_HAVE_HEAL = 0x19,
                CITADEL_PING_NEED_PLAN = 0x1A,
                CITADEL_PING_HELP_WITH_IDOL = 0x1B,
                CITADEL_PING_YOURE_WELCOME = 0x1C,
                CITADEL_PING_SORRY = 0x1D,
                CITADEL_PING_PURCHASED_MOD = 0x1E,
                CITADEL_PING_YES = 0x1F,
                CITADEL_PING_NO = 0x20,
                CITADEL_PING_ON_MY_WAY = 0x21,
                CITADEL_PING_THANKS_ALLCHAT = 0x22,
                CITADEL_PING_GOODJOB_ALLCHAT = 0x23,
                CITADEL_PING_GOOD_GAME_ALLCHAT = 0x24,
                CITADEL_PING_WELL_PLAYED_ALLCHAT = 0x25,
                CITADEL_PING_CONCEPT_COUNT = 0x26
            };
            // Alignment: 4
            // Member count: 5
            enum class ECitadelPingWheelSound_t : uint32_t {
                CITADEL_PING_WHEEL_SOUND_NONE = 0x0,
                CITADEL_PING_WHEEL_SOUND_MAP_PING = 0x1,
                CITADEL_PING_WHEEL_SOUND_ATTACK = 0x2,
                CITADEL_PING_WHEEL_SOUND_DEFEND = 0x3,
                CITADEL_PING_WHEEL_SOUND_WARNING = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class AnimLoopMode_t : uint32_t {
                ANIM_LOOP_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
                ANIM_LOOP_MODE_NOT_LOOPING = 0x0,
                ANIM_LOOP_MODE_LOOPING = 0x1,
                ANIM_LOOP_MODE_USE_SEQUENCE_SETTINGS = 0x2,
                ANIM_LOOP_MODE_COUNT = 0x3
            };
            // Alignment: 2
            // Member count: 10
            enum class SoundFlags_t : uint16_t {
                SOUND_FLAGS_NONE = 0x0,
                SOUND_FLAG_GUNFIRE = 0x1,
                SOUND_FLAG_COMBINE_ONLY = 0x2,
                SOUND_FLAG_REACT_TO_SOURCE = 0x4,
                SOUND_FLAG_EXPLOSION = 0x8,
                SOUND_FLAG_EXCLUDE_COMBINE = 0x10,
                SOUND_FLAG_DANGER_APPROACH = 0x20,
                SOUND_FLAG_ALLIES_ONLY = 0x40,
                SOUND_FLAG_PANIC_NPCS = 0x80,
                SOUND_FLAG_SQUAD_ONLY = 0x100
            };
            // Alignment: 1
            // Member count: 6
            enum class EAbilityType_t : uint8_t {
                EAbilityType_Invalid = 0xFFFFFFFFFFFFFFFF,
                EAbilityType_Weapon = 0x0,
                EAbilityType_Signature = 0x1,
                EAbilityType_Ultimate = 0x2,
                EAbilityType_Item = 0x3,
                EAbilityType_Innate = 0x4
            };
            // Alignment: 4
            // Member count: 52
            enum class EBaseUserMessages : uint32_t {
                UM_AchievementEvent = 0x65,
                UM_CloseCaption = 0x66,
                UM_CloseCaptionDirect = 0x67,
                UM_CurrentTimescale = 0x68,
                UM_DesiredTimescale = 0x69,
                UM_Fade = 0x6A,
                UM_GameTitle = 0x6B,
                UM_HudMsg = 0x6E,
                UM_HudText = 0x6F,
                UM_ColoredText = 0x71,
                UM_RequestState = 0x72,
                UM_ResetHUD = 0x73,
                UM_Rumble = 0x74,
                UM_SayText = 0x75,
                UM_SayText2 = 0x76,
                UM_SayTextChannel = 0x77,
                UM_Shake = 0x78,
                UM_ShakeDir = 0x79,
                UM_WaterShake = 0x7A,
                UM_TextMsg = 0x7C,
                UM_ScreenTilt = 0x7D,
                UM_VoiceMask = 0x80,
                UM_SendAudio = 0x82,
                UM_ItemPickup = 0x83,
                UM_AmmoDenied = 0x84,
                UM_ShowMenu = 0x86,
                UM_CreditsMsg = 0x87,
                UM_CloseCaptionPlaceholder = 0x8E,
                UM_CameraTransition = 0x8F,
                UM_AudioParameter = 0x90,
                UM_ParticleManager = 0x91,
                UM_HudError = 0x92,
                UM_CustomGameEvent = 0x94,
                UM_AnimGraphUpdate = 0x95,
                UM_HapticsManagerPulse = 0x96,
                UM_HapticsManagerEffect = 0x97,
                UM_CommandQueueState = 0x98,
                UM_UpdateCssClasses = 0x99,
                UM_ServerFrameTime = 0x9A,
                UM_LagCompensationError = 0x9B,
                UM_RequestDllStatus = 0x9C,
                UM_RequestUtilAction = 0x9D,
                UM_UtilActionResponse = 0x9E,
                UM_DllStatusResponse = 0x9F,
                UM_RequestInventory = 0xA0,
                UM_InventoryResponse = 0xA1,
                UM_RequestDiagnostic = 0xA2,
                UM_DiagnosticResponse = 0xA3,
                UM_ExtraUserData = 0xA4,
                UM_NotifyResponseFound = 0xA5,
                UM_PlayResponseConditional = 0xA6,
                UM_MAX_BASE = 0xC8
            };
            // Alignment: 4
            // Member count: 89
            enum class Class_T : uint32_t {
                CLASS_NONE = 0x0,
                CLASS_PLAYER = 0x1,
                CLASS_PLAYER_ALLY = 0x2,
                CLASS_MODIFIER_THINKER = 0x3,
                CLASS_TROOPER = 0x4,
                CLASS_TROOPER_BOSS = 0x5,
                CLASS_TROOPER_NEUTRAL = 0x6,
                CLASS_SUPER_NEUTRAL = 0x7,
                CLASS_SUPER_NEUTRAL_HEROTEST = 0x8,
                CLASS_SIEGE = 0x9,
                CLASS_GUN = 0xA,
                CLASS_CAP_POINT = 0xB,
                CLASS_ITEM_SHOP = 0xC,
                CLASS_ABILITY_SHOP = 0xD,
                CLASS_MINI_MAP_MARKER = 0xE,
                CLASS_ABILITY = 0xF,
                CLASS_ABILITY_PROJECTILE = 0x10,
                CLASS_CRATE = 0x11,
                CLASS_CRATE_SPAWN = 0x12,
                CLASS_PICKUP_SPAWN = 0x13,
                CLASS_VEHICLE = 0x14,
                CLASS_FLARE = 0x15,
                CLASS_SPAWNED_DRONE = 0x16,
                CLASS_ROLLERMINE = 0x17,
                CLASS_PERCHED_PREDATOR_PROJECTILE = 0x18,
                CLASS_PARACHUTE = 0x19,
                CLASS_SENTRY = 0x1A,
                CLASS_BASE_SENTRY = 0x1B,
                CLASS_DISPENSER = 0x1C,
                CLASS_SPY_DRONE = 0x1D,
                CLASS_GOLD_ORB = 0x1E,
                CLASS_LANE_NODE = 0x1F,
                CLASS_WARD = 0x20,
                CLASS_ZIP_LINE_NODE = 0x21,
                CLASS_DESTROYABLE_BUILDING = 0x22,
                CLASS_BOSS_TIER_2 = 0x23,
                CLASS_BOSS_BARRACKS = 0x24,
                CLASS_BOSS_TIER_3 = 0x25,
                CLASS_BOSS_TIER_3_DRONE = 0x26,
                CLASS_ANNOUNCER = 0x27,
                CLASS_WEAK_NEUTRAL_CAMP = 0x28,
                CLASS_MEDIUM_NEUTRAL_CAMP = 0x29,
                CLASS_STRONG_NEUTRAL_CAMP = 0x2A,
                CLASS_VAULT_NEUTRAL_CAMP = 0x2B,
                CLASS_SUPER_NEUTRAL_CAMP = 0x2C,
                CLASS_SUPER_NEUTRAL_CAMP_HEROTEST = 0x2D,
                CLASS_LADDER = 0x2E,
                CLASS_EXPLOSIVE_BARREL = 0x2F,
                CLASS_PAYLOAD = 0x30,
                CLASS_BULLET_TIME_WARP = 0x31,
                CLASS_BREAKABLE_PROP_PICKUP = 0x32,
                CLASS_ITEM_PICKUP = 0x33,
                CLASS_GOLDEN_IDOL_PICKUP = 0x34,
                CLASS_HERO_CLONE = 0x35,
                CLASS_TRIGGER_HURT = 0x36,
                CLASS_DRONE_DISPENSER = 0x37,
                CLASS_HERO_MINION = 0x38,
                CLASS_PING_MARKER = 0x39,
                CLASS_PING_LOCATION_TRIGGER = 0x3A,
                CLASS_TESLA_COIL = 0x3B,
                CLASS_FARADAY_CAGE = 0x3C,
                CLASS_DIRECTOR_CAMERA = 0x3D,
                CLASS_BREAKABLE_PROP = 0x3E,
                CLASS_TRIGGER_IDOL_RETURN = 0x3F,
                CLASS_TRIGGER_SHOP_TUNNEL = 0x40,
                CLASS_TRIGGER_TELEPORT = 0x41,
                CLASS_TRIGGER_MODIFIER = 0x42,
                CLASS_TRIGGER_OBSCURED_VOLUME = 0x43,
                CLASS_TRIGGER_ZIPLINE_CAPTURE = 0x44,
                CLASS_TRIGGER_CATAPULT = 0x45,
                CLASS_TRIGGER_CLIMB_ROPE = 0x46,
                CLASS_BALLISTA_BOMB = 0x47,
                CLASS_BALLISTA_MINE = 0x48,
                CLASS_TOMBSTONE = 0x49,
                CLASS_ICEPATH_SHARD = 0x4A,
                CLASS_TRICKSHOT_TARGET = 0x4B,
                CLASS_GUIDED_ARROW = 0x4C,
                CLASS_PING_LOCATION = 0x4D,
                CLASS_DUSTSTORM_PROJECTILE = 0x4E,
                CLASS_CYCLONE_PROJECTILE = 0x4F,
                CLASS_FIELD_SENTRY = 0x50,
                CLASS_RIPTIDE_PROJECTILE = 0x51,
                CLASS_ZAP_TRIGGER = 0x52,
                CLASS_VISCOUS_CUBE = 0x53,
                CLASS_FISSURE_WALL_SEGMENT = 0x54,
                CLASS_NANO_STATUE = 0x55,
                CLASS_TRAPPER_SPIDER = 0x56,
                CLASS_TRAPPER_WEBWALL = 0x57,
                NUM_CLASSIFY_CLASSES = 0x58
            };
            // Alignment: 4
            // Member count: 2
            enum class filter_t : uint32_t {
                FILTER_AND = 0x0,
                FILTER_OR = 0x1
            };
            // Alignment: 4
            // Member count: 2
            enum class EProceduralRagdollWeightIndexPropagationMethod : uint32_t {
                Bone = 0x0,
                BoneAndChildren = 0x1
            };
            // Alignment: 4
            // Member count: 4
            enum class EAltCastMode : uint32_t {
                EAltCast_PressAndHold = 0x0,
                EAltCast_DoubleTap = 0x1,
                EAltCast_ModifierKey = 0x2,
                EAltCastMaxValue = 0x2
            };
            // Alignment: 4
            // Member count: 7
            enum class EBotTestNodeType : uint32_t {
                EBotTestNode_NotSet = 0x0,
                EBotTestNode_StandingMantleStart = 0x1,
                EBotTestNode_MovingMantleStart = 0x2,
                EBotTestNode_Dest = 0x4,
                EBotTestNode_ShootTarget = 0x8,
                EBotTestNode_TargetDummy = 0x10,
                EBotTestNode_GunDPSTest = 0x20
            };
            // Alignment: 4
            // Member count: 17
            enum class BaseExplosionTypes_t : uint32_t {
                EXPLOSION_TYPE_DEFAULT = 0x0,
                EXPLOSION_TYPE_GRENADE = 0x1,
                EXPLOSION_TYPE_MOLOTOV = 0x2,
                EXPLOSION_TYPE_FIREWORKS = 0x3,
                EXPLOSION_TYPE_GASCAN = 0x4,
                EXPLOSION_TYPE_GASCYLINDER = 0x5,
                EXPLOSION_TYPE_EXPLOSIVEBARREL = 0x6,
                EXPLOSION_TYPE_ELECTRICAL = 0x7,
                EXPLOSION_TYPE_EMP = 0x8,
                EXPLOSION_TYPE_SHRAPNEL = 0x9,
                EXPLOSION_TYPE_SMOKEGRENADE = 0xA,
                EXPLOSION_TYPE_FLASHBANG = 0xB,
                EXPLOSION_TYPE_TRIPMINE = 0xC,
                EXPLOSION_TYPE_ICE = 0xD,
                EXPLOSION_TYPE_NONE = 0xE,
                EXPLOSION_TYPE_CUSTOM = 0xF,
                EXPLOSION_TYPE_COUNT = 0x10
            };
            // Alignment: 1
            // Member count: 2
            enum class EShieldType_t : uint8_t {
                BulletShield = 0x0,
                TechShield = 0x1
            };
            // Alignment: 4
            // Member count: 50
            enum class GameAnimEventIndex_t : uint32_t {
                AE_EMPTY = 0x0,
                AE_CL_PLAYSOUND = 0x1,
                AE_CL_PLAYSOUND_ATTACHMENT = 0x2,
                AE_CL_PLAYSOUND_POSITION = 0x3,
                AE_SV_PLAYSOUND = 0x4,
                AE_CL_STOPSOUND = 0x5,
                AE_CL_PLAYSOUND_LOOPING = 0x6,
                AE_CL_CREATE_PARTICLE_EFFECT = 0x7,
                AE_CL_STOP_PARTICLE_EFFECT = 0x8,
                AE_CL_CREATE_PARTICLE_EFFECT_CFG = 0x9,
                AE_SV_CREATE_PARTICLE_EFFECT_CFG = 0xA,
                AE_SV_STOP_PARTICLE_EFFECT = 0xB,
                AE_FOOTSTEP = 0xC,
                AE_RAGDOLL = 0xD,
                AE_CL_STOP_RAGDOLL_CONTROL = 0xE,
                AE_CL_ENABLE_BODYGROUP = 0xF,
                AE_CL_DISABLE_BODYGROUP = 0x10,
                AE_BODYGROUP_SET_VALUE = 0x11,
                AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN = 0x12,
                AE_WEAPON_PERFORM_ATTACK = 0x13,
                AE_FIRE_INPUT = 0x14,
                AE_CL_CLOTH_ATTR = 0x15,
                AE_CL_CLOTH_GROUND_OFFSET = 0x16,
                AE_CL_CLOTH_STIFFEN = 0x17,
                AE_CL_CLOTH_EFFECT = 0x18,
                AE_CL_CREATE_ANIM_SCOPE_PROP = 0x19,
                AE_SV_IKLOCK = 0x1A,
                AE_PULSE_GRAPH = 0x1B,
                AE_PULSE_GRAPH_LOOKAT = 0x1C,
                AE_PULSE_GRAPH_AIMAT = 0x1D,
                AE_PULSE_GRAPH_IKLOCKLEFTARM = 0x1E,
                AE_PULSE_GRAPH_IKLOCKRIGHTARM = 0x1F,
                AE_DISABLE_PLATFORM = 0x20,
                AE_ENABLE_PLATFORM = 0x21,
                AE_ANIMGRAPH_SET_PARAM = 0x22,
                AE_ANIMGRAPH_WARP_SECTION_START = 0x23,
                AE_ANIMGRAPH_WARP_SECTION_END = 0x24,
                AE_NPC_LEFTFOOT = 0x25,
                AE_NPC_RIGHTFOOT = 0x26,
                AE_NPC_BODYDROP_LIGHT = 0x27,
                AE_NPC_BODYDROP_HEAVY = 0x28,
                AE_NPC_SWISHSOUND = 0x29,
                AE_NPC_WEAPON_DROP = 0x2A,
                AE_NPC_RAGDOLL = 0x2B,
                AE_NPC_ATTACK_BROADCAST = 0x2C,
                AE_NPC_GIB = 0x2D,
                AE_HURDLE_RISE_START = 0x2E,
                AE_HURDLE_DROP_START = 0x2F,
                AE_RAGDOLL_WINDOW = 0x30,
                AE_MELEE_ATTACK = 0x31
            };
            // Alignment: 4
            // Member count: 4
            enum class EQueryCvarValueStatus : uint32_t {
                eQueryCvarValueStatus_ValueIntact = 0x0,
                eQueryCvarValueStatus_CvarNotFound = 0x1,
                eQueryCvarValueStatus_NotACvar = 0x2,
                eQueryCvarValueStatus_CvarProtected = 0x3
            };
            // Alignment: 1
            // Member count: 3
            enum class FixAngleSet_t : uint8_t {
                None = 0x0,
                Absolute = 0x1,
                Relative = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class IChoreoServices__ScriptState_t : uint32_t {
                SCRIPT_PLAYING = 0x0,
                SCRIPT_WAIT = 0x1,
                SCRIPT_POST_IDLE = 0x2,
                SCRIPT_CLEANUP = 0x3,
                SCRIPT_MOVE_TO_MARK = 0x4
            };
            // Alignment: 4
            // Member count: 2
            enum class CommandEntitySpecType_t : uint32_t {
                SPEC_SEARCH = 0x0,
                SPEC_TYPES_COUNT = 0x1
            };
            // Alignment: 4
            // Member count: 5
            enum class Touch_t : uint32_t {
                touch_none = 0x0,
                touch_player_only = 0x1,
                touch_npc_only = 0x2,
                touch_player_or_npc = 0x3,
                touch_player_or_npc_or_physicsprop = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class EAbilityUpgradeType : uint32_t {
                EAddToBase = 0x0,
                EMultiplyBase = 0x1,
                EAddToScale = 0x2,
                EMultiplyScale = 0x3,
                EAbilityUpgradeTypeCount = 0x4
            };
            // Alignment: 4
            // Member count: 4
            enum class CCitadelPlayerPawn_GraphController2_EGenericThrow : uint32_t {
                EGenericThrow_NONE = 0x0,
                EGenericThrow_COMPLETED = 0x1,
                EGenericThrow_INTERRUPTED = 0x2,
                EGenericThrow_CASTING = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class TrainVelocityType_t : uint32_t {
                TrainVelocity_Instantaneous = 0x0,
                TrainVelocity_LinearBlend = 0x1,
                TrainVelocity_EaseInEaseOut = 0x2
            };
            // Alignment: 4
            // Member count: 8
            enum class SignonState_t : uint32_t {
                SIGNONSTATE_NONE = 0x0,
                SIGNONSTATE_CHALLENGE = 0x1,
                SIGNONSTATE_CONNECTED = 0x2,
                SIGNONSTATE_NEW = 0x3,
                SIGNONSTATE_PRESPAWN = 0x4,
                SIGNONSTATE_SPAWN = 0x5,
                SIGNONSTATE_FULL = 0x6,
                SIGNONSTATE_CHANGELEVEL = 0x7
            };
            // Alignment: 4
            // Member count: 6
            enum class EMeleeHold_AttackState : uint32_t {
                EAttackState_None = 0x0,
                EAttackState_Charging = 0x1,
                EAttackState_GroundDashing = 0x2,
                EAttackState_AirDashing = 0x3,
                EAttackState_Attacking = 0x4,
                EAttackState_SlideDashing = 0x5
            };
            // Alignment: 4
            // Member count: 3
            enum class EntFinderMethod_t : uint32_t {
                ENT_FIND_METHOD_NEAREST = 0x0,
                ENT_FIND_METHOD_FARTHEST = 0x1,
                ENT_FIND_METHOD_RANDOM = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class HintPriority_t : uint32_t {
                HINT_PRIORITY_LOW = 0x0,
                HINT_PRIORITY_MEDIUM = 0x1,
                HINT_PRIORITY_HIGH = 0x2,
                HINT_PRIORITY_CRITICAL = 0x3
            };
            // Alignment: 4
            // Member count: 7
            enum class EDenyDistributionType : uint32_t {
                EDenyToDenier = 0x0,
                EDenyToDenierNearbyTeammates = 0x1,
                EDenyToDenierTeam = 0x2,
                EDenyToNobody = 0x3,
                EDenyInLaningPhase = 0x4,
                EDenyInLaningPhaseDuo = 0x5,
                EDenyTypesCount = 0x6
            };
            // Alignment: 4
            // Member count: 13
            enum class EGCBaseClientMsg : uint32_t {
                k_EMsgGCPingRequest = 0xBB9,
                k_EMsgGCPingResponse = 0xBBA,
                k_EMsgGCToClientPollConvarRequest = 0xBBB,
                k_EMsgGCToClientPollConvarResponse = 0xBBC,
                k_EMsgGCCompressedMsgToClient = 0xBBD,
                k_EMsgGCCompressedMsgToClient_Legacy = 0x20B,
                k_EMsgGCToClientRequestDropped = 0xBBE,
                k_EMsgGCClientWelcome = 0xFA4,
                k_EMsgGCServerWelcome = 0xFA5,
                k_EMsgGCClientHello = 0xFA6,
                k_EMsgGCServerHello = 0xFA7,
                k_EMsgGCClientConnectionStatus = 0xFA9,
                k_EMsgGCServerConnectionStatus = 0xFAA
            };
            // Alignment: 4
            // Member count: 7
            enum class ET1BossActivity : uint32_t {
                IdleShielded = 0x0,
                Stunned = 0x1,
                Disarmed = 0x2,
                Alert = 0x3,
                RangeAttack = 0x4,
                MeleeAttack = 0x5,
                Dying = 0x6
            };
            // Alignment: 4
            // Member count: 4
            enum class PropDoorRotatingSpawnPos_t : uint32_t {
                DOOR_SPAWN_CLOSED = 0x0,
                DOOR_SPAWN_OPEN_FORWARD = 0x1,
                DOOR_SPAWN_OPEN_BACK = 0x2,
                DOOR_SPAWN_AJAR = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class ECitadelTargetAbilityEffects : uint32_t {
                CITADEL_TARGET_ABILITY_BEHAVIOR_NONE = 0x0,
                CITADEL_TARGET_ABILITY_BEHAVIOR_IMBUE_MODIFIER_VALUE = 0x1,
                CITADEL_TARGET_ABILITY_BEHAVIOR_IMBUE_ACTIVE = 0x2
            };
            // Alignment: 1
            // Member count: 2
            enum class ShardSolid_t : uint8_t {
                SHARD_SOLID = 0x0,
                SHARD_DEBRIS = 0x1
            };
            // Alignment: 4
            // Member count: 4
            enum class ECitadelAccountStatMedal : uint32_t {
                k_eNone = 0x0,
                k_eBronze = 0x1,
                k_eSilver = 0x2,
                k_eGold = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class ESplitScreenMessageType : uint32_t {
                MSG_SPLITSCREEN_ADDUSER = 0x0,
                MSG_SPLITSCREEN_REMOVEUSER = 0x1
            };
            // Alignment: 1
            // Member count: 3
            enum class EntityPlatformTypes_t : uint8_t {
                ENTITY_NOT_PLATFORM = 0x0,
                ENTITY_PLATFORM_PLAYER_FOLLOWS_YAW = 0x1,
                ENTITY_PLATFORM_PLAYER_IGNORES_YAW = 0x2
            };
            // Alignment: 1
            // Member count: 13
            enum class RenderMode_t : uint8_t {
                kRenderNormal = 0x0,
                kRenderTransColor = 0x1,
                kRenderTransTexture = 0x2,
                kRenderGlow = 0x3,
                kRenderTransAlpha = 0x4,
                kRenderTransAdd = 0x5,
                kRenderEnvironmental = 0x6,
                kRenderTransAddFrameBlend = 0x7,
                kRenderTransAlphaAdd = 0x8,
                kRenderWorldGlow = 0x9,
                kRenderNone = 0xA,
                kRenderDevVisualizer = 0xB,
                kRenderModeCount = 0xC
            };
            // Alignment: 4
            // Member count: 3
            enum class NPCPathingRequest_t : uint32_t {
                StopIfNoPath = 0x0,
                TryRandomMovementIfNoPath = 0x1,
                AllowDirectDropDownIfNoPath = 0x2
            };
            // Alignment: 4
            // Member count: 64
            enum class EAbilityBehavior_t : uint32_t {
                CITADEL_ABILITY_BEHAVIOR_HIDDEN = 0x0,
                CITADEL_ABILITY_BEHAVIOR_DONT_BREAK_INVISIBILITY = 0x1,
                CITADEL_ABILITY_BEHAVIOR_IS_PRIMARY_WEAPON = 0x2,
                CITADEL_ABILITY_BEHAVIOR_SILENT_CAST_FAILURE_FEEDBACK = 0x3,
                CITADEL_ABILITY_BEHAVIOR_DONT_INTERRUPT_SPRINT = 0x4,
                CITADEL_ABILITY_BEHAVIOR_CAST_EVEN_IF_BUSY_AND_EXCLUSIVE = 0x5,
                CITADEL_ABILITY_BEHAVIOR_CHANNELLED = 0x6,
                CITADEL_ABILITY_BEHAVIOR_EXCLUSIVE_USE = 0x7,
                CITADEL_ABILITY_BEHAVIOR_PROJECTILE = 0x8,
                CITADEL_ABILITY_BEHAVIOR_WEAPON_TOGGLE = 0x9,
                CITADEL_ABILITY_BEHAVIOR_INPUT_DIRECTIONAL_2D = 0xA,
                CITADEL_ABILITY_BEHAVIOR_INPUT_DIRECTIONAL_3D = 0xB,
                CITADEL_ABILITY_BEHAVIOR_ALWAYS_PREVIEW_RADIUS = 0xC,
                CITADEL_ABILITY_BEHAVIOR_DONT_SWITCH_AWAY_ON_CAST = 0xD,
                CITADEL_ABILITY_BEHAVIOR_CASTABLE_WHILE_BUSY = 0xE,
                CITADEL_ABILITY_BEHAVIOR_INTERRUPT_MELEE_ON_CAST = 0xF,
                CITADEL_ABILITY_BEHAVIOR_START_COOLDOWN_ON_TOGGLE_OFF = 0x10,
                CITADEL_ABILITY_BEHAVIOR_DISARMABLE = 0x11,
                CITADEL_ABILITY_BEHAVIOR_NOT_SILENCABLE = 0x12,
                CITADEL_ABILITY_BEHAVIOR_DEPLOY_OBJECT = 0x13,
                CITADEL_ABILITY_BEHAVIOR_NO_TARGET = 0x14,
                CITADEL_ABILITY_BEHAVIOR_DAMAGE_DOESNT_WAKE_FROM_SLEEP = 0x15,
                CITADEL_ABILITY_BEHAVIOR_UNSELLABLE = 0x16,
                CITADEL_ABILITY_BEHAVIOR_PURCHASABLE_MULTIPLE_TIMES = 0x17,
                CITADEL_ABILITY_BEHAVIOR_DONT_TRIGGER_SPELL_BLOCK = 0x18,
                CITADEL_ABILITY_BEHAVIOR_CANCEL_ON_ATTACK = 0x19,
                CITADEL_ABILITY_BEHAVIOR_CASTABLE_WHILE_CMD_RESTRICTED = 0x1A,
                CITADEL_ABILITY_BEHAVIOR_DISPLAYS_DAMAGE_IMPACT = 0x1B,
                CITADEL_ABILITY_BEHAVIOR_PROJECTILE_PASS_THROUGH_WORLD = 0x1C,
                CITADEL_ABILITY_BEHAVIOR_NON_COMBAT = 0x1D,
                CITADEL_ABILITY_BEHAVIOR_EQUAL_UNIT_TARGET_PRIORITY = 0x1E,
                CITADEL_ABILITY_BEHAVIOR_DONT_AIM_FACING_ENEMY = 0x1F,
                CITADEL_ABILITY_BEHAVIOR_TARGET_THROUGH_WALLS = 0x20,
                CITADEL_ABILITY_BEHAVIOR_CASTABLE_WHILE_HIDDEN = 0x21,
                CITADEL_ABILITY_BEHAVIOR_ALLOW_SELF_CAST = 0x22,
                CITADEL_ABILITY_BEHAVIOR_CLEAVE_DISABLED = 0x23,
                CITADEL_ABILITY_BEHAVIOR_DISPLAYS_DAMAGE_SOURCE_IMPACT = 0x24,
                CITADEL_ABILITY_BEHAVIOR_PREVENT_BOT_USAGE = 0x25,
                CITADEL_ABILITY_BEHAVIOR_REQUIRE_PREDICTION = 0x26,
                CITADEL_ABILITY_BEHAVIOR_COOLDOWN_PERSISTS_ACROSS_REBUY = 0x27,
                CITADEL_ABILITY_BEHAVIOR_COOLDOWN_REFILLS_ALL_CHARGES = 0x28,
                CITADEL_ABILITY_BEHAVIOR_SHOW_CAST_RANGE_AS_SAT_SPHERE_WHILE_CASTING = 0x29,
                CITADEL_ABILITY_BEHAVIOR_IGNORE_SELECTION_MASH_PROTECTION = 0x2A,
                CITADEL_ABILITY_BEHAVIOR_PREVENT_TRAINING_BOT_USAGE = 0x2B,
                CITADEL_ABILITY_BEHAVIOR_CAN_CANCEL_DURING_CAST_DELAY = 0x2C,
                CITADEL_ABILITY_BEHAVIOR_CANNOT_CANCEL_DURING_CHANNEL = 0x2D,
                CITADEL_ABILITY_BEHAVIOR_CAN_CAST_ON_ZIPLINE = 0x2E,
                CITADEL_ABILITY_BEHAVIOR_STARTS_ON_COOLDOWN = 0x2F,
                CITADEL_ABILITY_BEHAVIOR_CAN_HEAL_PLAYERS = 0x30,
                CITADEL_ABILITY_BEHAVIOR_SWITCH_AWAY_ON_FAILED_CAST = 0x31,
                CITADEL_ABILITY_BEHAVIOR_CASTABLE_WHILE_DODGING = 0x32,
                CITADEL_ABILITY_BEHAVIOR_TRIGGER = 0x33,
                CITADEL_ABILITY_BEHAVIOR_IS_ALTERNATIVE_WEAPON = 0x34,
                CITADEL_ABILITY_BEHAVIOR_PROJECTILE_FIRED_AS_BULLET = 0x35,
                CITADEL_ABILITY_BEHAVIOR_COOLDOWN_ON_CHANNEL_END = 0x36,
                CITADEL_ABILITY_BEHAVIOR_DONT_CONSUME_ABILITY_RESOURCE_ON_CAST = 0x37,
                CITADEL_ABILITY_BEHAVIOR_ALLOW_ALT_CAST = 0x38,
                CITADEL_ABILITY_BEHAVIOR_DONT_TRIGGER_POST_CAST_ON_CAST_COMPLETE = 0x39,
                CITADEL_ABILITY_BEHAVIOR_USE_INSTANT_CAST_UNIT_TARGET_UI = 0x3A,
                CITADEL_ABILITY_BEHAVIOR_MOVEMENT = 0x3B,
                CITADEL_ABILITY_BEHAVIOR_TRIGGER_CANCEL_MASH_PROTECTION_ON_CAST = 0x3C,
                CITADEL_ABILITY_BEHAVIOR_REQUIRE_ABILITY_BUTTON_TO_CANCEL = 0x3D,
                CITADEL_ABILITY_BEHAVIOR_CAN_SET_QUICK_CAST = 0x3E,
                CITADEL_ABILITY_BEHAVIOR_COUNT = 0x3F
            };
            // Alignment: 4
            // Member count: 3
            enum class ForcedCrouchState_t : uint32_t {
                FORCEDCROUCH_NONE = 0x0,
                FORCEDCROUCH_CROUCHED = 0x1,
                FORCEDCROUCH_UNCROUCHED = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class PerformanceMode_t : uint32_t {
                PM_NORMAL = 0x0,
                PM_NO_GIBS = 0x1,
                PM_FULL_GIBS = 0x2,
                PM_REDUCED_GIBS = 0x3
            };
            // Alignment: 4
            // Member count: 5
            enum class BuildupMode_t : uint32_t {
                BUILDUP_MODE_ONE_AND_DONE = 0x0,
                BUILDUP_MODE_RESTART_ON_FILL = 0x1,
                BUILDUP_MODE_EXTEND_FILL_DURATION = 0x2,
                BUILDUP_MODE_MAX_FILL_DURATION = 0x3,
                BUILDUP_MODE_ADD_STACK = 0x4
            };
            // Alignment: 4
            // Member count: 8
            enum class TOGGLE_STATE : uint32_t {
                TS_AT_TOP = 0x0,
                TS_AT_BOTTOM = 0x1,
                TS_GOING_UP = 0x2,
                TS_GOING_DOWN = 0x3,
                DOOR_OPEN = 0x0,
                DOOR_CLOSED = 0x1,
                DOOR_OPENING = 0x2,
                DOOR_CLOSING = 0x3
            };
            // Alignment: 1
            // Member count: 4
            enum class EAbilityMoveExecuteType_t : uint8_t {
                EMoveExecute_TryPlayerMove = 0x0,
                EMoveExecute_FullWalkMove = 0x1,
                EMoveExecute_NoclipMove = 0x2,
                EMoveExecute_FlyMove = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class EDestructiblePartDamagePassThroughType : uint32_t {
                Normal = 0x0,
                Absorb = 0x1
            };
            // Alignment: 4
            // Member count: 3
            enum class VoiceDataFormat_t : uint32_t {
                VOICEDATA_FORMAT_STEAM = 0x0,
                VOICEDATA_FORMAT_ENGINE = 0x1,
                VOICEDATA_FORMAT_OPUS = 0x2
            };
            // Alignment: 4
            // Member count: 20
            enum class NavAttributeEnum : uint32_t {
                NAV_MESH_AVOID = 0x80,
                NAV_MESH_STAIRS = 0x1000,
                NAV_MESH_NON_ZUP = 0x8000,
                NAV_MESH_SHORT_HEIGHT = 0x10000,
                NAV_MESH_NON_ZUP_TRANSITION = 0x20000,
                NAV_MESH_CROUCH = 0x10000,
                NAV_MESH_JUMP = 0x2,
                NAV_MESH_PRECISE = 0x4,
                NAV_MESH_NO_JUMP = 0x8,
                NAV_MESH_STOP = 0x10,
                NAV_MESH_RUN = 0x20,
                NAV_MESH_WALK = 0x40,
                NAV_MESH_TRANSIENT = 0x100,
                NAV_MESH_DONT_HIDE = 0x200,
                NAV_MESH_STAND = 0x400,
                NAV_MESH_NO_HOSTAGES = 0x800,
                NAV_MESH_NO_MERGE = 0x2000,
                NAV_MESH_OBSTACLE_TOP = 0x4000,
                NAV_ATTR_FIRST_GAME_INDEX = 0x13,
                NAV_ATTR_LAST_INDEX = 0x1F
            };
            // Alignment: 4
            // Member count: 3
            enum class MoveLinearAuthoredPos_t : uint32_t {
                MOVELINEAR_AUTHORED_AT_START_POSITION = 0x0,
                MOVELINEAR_AUTHORED_AT_OPEN_POSITION = 0x1,
                MOVELINEAR_AUTHORED_AT_CLOSED_POSITION = 0x2
            };
            // Alignment: 4
            // Member count: 17
            enum class WaypointFlags_t : uint32_t {
                WP_NONE = 0x0,
                WP_TO_DETOUR = 0x1,
                WP_TO_PATHCORNER = 0x2,
                WP_TO_NODE = 0x4,
                WP_TO_GOAL = 0x8,
                WP_TO_DOOR = 0x10,
                WP_DONT_SIMPLIFY = 0x20,
                WP_INTERRUPTED_STOP = 0x40,
                WP_FROM_NAVMESH = 0x80,
                WP_FROM_NAVSPACE = 0x100,
                WP_LOCAL_PATH = 0x200,
                WP_RETURN_PATH = 0x400,
                WP_GOAL_FROM_BLOCKED = 0x800,
                WP_PLACED_ON_GROUND = 0x1000,
                WP_PATH_INCOMPLETE_FROM_PROCESSING = 0x2000,
                WP_STOPPING_PATH = 0x4000,
                WP_TO_SUBGOAL = 0x8000
            };
            // Alignment: 4
            // Member count: 7
            enum class CCitadelPlayerPawn_GraphController2_EGenericCast : uint32_t {
                EGenericCast_COMPLETED = 0x0,
                EGenericCast_CASTING = 0x1,
                EGenericCast_CHANNELING = 0x2,
                EGenericCast_EXECUTED = 0x3,
                EGenericCast_INTERRUPTED = 0x4,
                EGenericCast_TOGGLED_ON = 0x5,
                EGenericCast_TOGGLED_OFF = 0x6
            };
            // Alignment: 4
            // Member count: 7
            enum class HandshakeState_t : uint32_t {
                eInactive = 0x0,
                eWaitingToBecomeInactive = 0x1,
                eWaitingToBecomeActive = 0x2,
                eWaitingToFinish = 0x3,
                eWaitingForScriptedSequence = 0x4,
                eRestartingFromScriptedSequence = 0x5,
                eFinished = 0x6
            };
            // Alignment: 4
            // Member count: 4
            enum class ValueRemapperMomentumType_t : uint32_t {
                MomentumType_None = 0x0,
                MomentumType_Friction = 0x1,
                MomentumType_SpringTowardSnapValue = 0x2,
                MomentumType_SpringAwayFromSnapValue = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class EMiniMapMarkerType_t : uint32_t {
                EMarkerShopTunnels = 0x0,
                EMarkerShopTunnelExit = 0x1,
                EMarkerCount = 0x2
            };
            // Alignment: 4
            // Member count: 13
            enum class ECitadelChatMessage : uint32_t {
                CITADEL_CHAT_MESSAGE_UNPAUSE_COUNTDOWN = 0x1,
                CITADEL_CHAT_MESSAGE_UNPAUSED = 0x2,
                CITADEL_CHAT_MESSAGE_AUTO_UNPAUSED = 0x3,
                CITADEL_CHAT_MESSAGE_PAUSE_COUNTDOWN = 0x4,
                CITADEL_CHAT_MESSAGE_PAUSED = 0x5,
                CITADEL_CHAT_MESSAGE_YOUPAUSED = 0x6,
                CITADEL_CHAT_MESSAGE_CANTPAUSE = 0x7,
                CITADEL_CHAT_MESSAGE_CANTUNPAUSETEAM = 0x8,
                CITADEL_CHAT_MESSAGE_NOPAUSESLEFT = 0x9,
                CITADEL_CHAT_MESSAGE_CANTPAUSEYET = 0xA,
                CITADEL_CHAT_MESSAGE_PREGAME_COUNTDOWN = 0xB,
                CITADEL_CHAT_MESSAGE_NOTEAMPAUSESLEFT = 0xC,
                CITADEL_CHAT_MESSAGE_COMMS_RESTRICTED = 0xD
            };
            // Alignment: 4
            // Member count: 10
            enum class Navigation_t : uint32_t {
                AI_NAV_NONE = 0xFFFFFFFFFFFFFFFF,
                AI_NAV_GROUND = 0x0,
                AI_NAV_JUMP = 0x1,
                AI_NAV_FLY = 0x2,
                AI_NAV_CLIMB = 0x3,
                AI_NAV_LINK = 0x5,
                AI_NAV_NAVLINK = 0x5,
                AI_NAV_TRANSITION = 0x6,
                AI_NAV_ORIENTED = 0x7,
                AI_NAV_SMART_GOAL = 0x8
            };
            // Alignment: 4
            // Member count: 12
            enum class Hull_t : uint32_t {
                HULL_HUMAN = 0x0,
                HULL_SMALL_CENTERED = 0x1,
                HULL_WIDE_HUMAN = 0x2,
                HULL_TINY = 0x3,
                HULL_MEDIUM = 0x4,
                HULL_TINY_CENTERED = 0x5,
                HULL_LARGE = 0x6,
                HULL_LARGE_CENTERED = 0x7,
                HULL_MEDIUM_TALL = 0x8,
                HULL_SMALL = 0x9,
                NUM_HULLS = 0xA,
                HULL_NONE = 0xB
            };
            // Alignment: 4
            // Member count: 3
            enum class EViscousChargedGunState : uint32_t {
                EViscousChargedGunState_Idle = 0x0,
                EViscousChargedGunState_Charging = 0x1,
                EViscousChargedGunState_Shoot = 0x2
            };
            // Alignment: 4
            // Member count: 1
            enum class CitadelEntityMessageIds : uint32_t {
                k_EEntityMsg_BreakablePropSpawnDebris = 0x1F4
            };
            // Alignment: 4
            // Member count: 13
            enum class NET_Messages : uint32_t {
                net_NOP = 0x0,
                net_Disconnect_Legacy = 0x1,
                net_SplitScreenUser = 0x3,
                net_Tick = 0x4,
                net_StringCmd = 0x5,
                net_SetConVar = 0x6,
                net_SignonState = 0x7,
                net_SpawnGroup_Load = 0x8,
                net_SpawnGroup_ManifestUpdate = 0x9,
                net_SpawnGroup_SetCreationTick = 0xB,
                net_SpawnGroup_Unload = 0xC,
                net_SpawnGroup_LoadCompleted = 0xD,
                net_DebugOverlay = 0xF
            };
            // Alignment: 4
            // Member count: 5
            enum class EWeakPointBreakBehavior : uint32_t {
                EBreakOnceBecomeInvuln = 0x0,
                EBreakOnceRemainDamagable = 0x1,
                EBreakMultipleTimes = 0x2,
                EBreakNever = 0x3,
                EBreakOnceHideBodygroup = 0x4
            };
            // Alignment: 4
            // Member count: 6
            enum class EBaseEntityMessages : uint32_t {
                EM_PlayJingle = 0x88,
                EM_ScreenOverlay = 0x89,
                EM_RemoveAllDecals = 0x8A,
                EM_PropagateForce = 0x8B,
                EM_DoSpark = 0x8C,
                EM_FixAngle = 0x8D
            };
            // Alignment: 4
            // Member count: 4
            enum class EGuidedBotMatchObjective : uint32_t {
                EGuidedBotMatchObjective_LaningMetrics = 0x0,
                EGuidedBotMatchObjective_PowerUp = 0x1,
                EGuidedBotMatchObjective_KillGuardian = 0x2,
                EGuidedBotMatchObjective_Complete = 0x3
            };
            // Alignment: 4
            // Member count: 9
            enum class EInButtonState : uint32_t {
                IN_BUTTON_UP = 0x0,
                IN_BUTTON_DOWN = 0x1,
                IN_BUTTON_DOWN_UP = 0x2,
                IN_BUTTON_UP_DOWN = 0x3,
                IN_BUTTON_UP_DOWN_UP = 0x4,
                IN_BUTTON_DOWN_UP_DOWN = 0x5,
                IN_BUTTON_DOWN_UP_DOWN_UP = 0x6,
                IN_BUTTON_UP_DOWN_UP_DOWN = 0x7,
                IN_BUTTON_STATE_COUNT = 0x8
            };
            // Alignment: 4
            // Member count: 8
            enum class CitadelNPCDamageState_t : uint32_t {
                INVALID = 0xFFFFFFFFFFFFFFFF,
                NONE = 0x0,
                LIGHT = 0x1,
                MEDIUM = 0x2,
                HEAVY = 0x3,
                NEAR_DEATH = 0x4,
                DEAD = 0x5,
                COUNT = 0x6
            };
            // Alignment: 4
            // Member count: 4
            enum class BeamClipStyle_t : uint32_t {
                kNOCLIP = 0x0,
                kGEOCLIP = 0x1,
                kMODELCLIP = 0x2,
                kBEAMCLIPSTYLE_NUMBITS = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class ModifierDebuffType_t : uint32_t {
                MODIFIER_DEBUFF_ENEMY_TEAM_ONLY = 0x0,
                MODIFIER_DEBUFF_YES = 0x1,
                MODIFIER_DEBUFF_NO = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class AI_MotorForceFacingOwner_t : uint32_t {
                eNone = 0xFFFFFFFFFFFFFFFF,
                eLookTarget = 0x0,
                eMotor = 0x1,
                eCount = 0x2
            };
            // Alignment: 4
            // Member count: 38
            enum class ECurrencySource : uint32_t {
                EInvalidDesc = 0xFFFFFFFFFFFFFFFF,
                EItemPurchase = 0x0,
                EItemUpgrade = 0x1,
                EItemSale = 0x2,
                ETreasureChest = 0x3,
                EAbilityPurchase = 0x4,
                EStartingAmount = 0x5,
                ELevelUp = 0x6,
                ECheats = 0x7,
                EResetDeathPenalty = 0x8,
                EDroppedOnDeath = 0x9,
                EHeroSwap = 0xA,
                EPlayerKill = 0xB,
                EPlayerKillAssist = 0xC,
                EBossKill = 0xD,
                ELaneTrooperKill = 0xE,
                ENeutralTrooperKill = 0xF,
                ENeutralBossKill = 0x10,
                EBaseSentryKill = 0x11,
                EDeniedFromEnemy = 0x12,
                EAssassinatePlayerKill = 0x13,
                EOrbPlayer = 0x14,
                EOrbDeny = 0x15,
                EOrbLaneTrooper = 0x16,
                EOrbNeutralTrooper = 0x17,
                EOrbTier1TrooperBoss = 0x18,
                EOrbTier2TrooperBoss = 0x19,
                EOrbBaseGuardians = 0x1A,
                EOrbShrines = 0x1B,
                EOrbTier3TrooperBoss = 0x1C,
                EOrbBaseSentry = 0x1D,
                EOrbDeployable = 0x1E,
                EOrbTrophyKill = 0x1F,
                EOrbTreasureChest = 0x20,
                EOrbSpawner = 0x21,
                ENeutralWorldPickup = 0x22,
                EPlayerKillComeback = 0x23,
                ECurrencySourceCount = 0x24
            };
            // Alignment: 4
            // Member count: 4
            enum class WeaponAttackType_t : uint32_t {
                eInvalid = 0xFFFFFFFFFFFFFFFF,
                ePrimary = 0x0,
                eSecondary = 0x1,
                eCount = 0x2
            };
            // Alignment: 4
            // Member count: 10
            enum class EAbilityActivation_t : uint32_t {
                CITADEL_ABILITY_ACTIVATION_NONE = 0x0,
                CITADEL_ABILITY_ACTIVATION_PASSIVE = 0x1,
                CITADEL_ABILITY_ACTIVATION_INSTANT_CAST = 0x2,
                CITADEL_ABILITY_ACTIVATION_PRESS = 0x3,
                CITADEL_ABILITY_ACTIVATION_PRESS_TOGGLE = 0x4,
                CITADEL_ABILITY_ACTIVATION_HOLD_TOGGLE = 0x5,
                CITADEL_ABILITY_ACTIVATION_ON_BUTTON_RELEASE = 0x6,
                CITADEL_ABILITY_ACTIVATION_INSTANT_CAST_ON_BUTTON_RELEASE = 0x7,
                CITADEL_ABILITY_ACTIVATION_ON_BUTTON_IS_DOWN = 0x8,
                CITADEL_ABILITY_ACTIVATION_COUNT = 0x9
            };
            // Alignment: 4
            // Member count: 5
            enum class ChatMsgPingMarkerInfo : uint32_t {
                k_EPingMarkerInfo_ShowMarkerAndSound = 0x0,
                k_EPingMarkerInfo_HideMarkerAndSound = 0x1,
                k_EPingMarkerInfo_ShowMarkerOnSender = 0x2,
                k_EPingMarkerInfo_OnlyShowMarker = 0x3,
                k_EPingMarkerInfo_OnlyPlaySound = 0x4
            };
            // Alignment: 4
            // Member count: 36
            enum class PARTICLE_MESSAGE : uint32_t {
                GAME_PARTICLE_MANAGER_EVENT_CREATE = 0x0,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE = 0x1,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = 0x2,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = 0x3,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = 0x4,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENT = 0x5,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = 0x6,
                GAME_PARTICLE_MANAGER_EVENT_DESTROY = 0x7,
                GAME_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = 0x8,
                GAME_PARTICLE_MANAGER_EVENT_RELEASE = 0x9,
                GAME_PARTICLE_MANAGER_EVENT_LATENCY = 0xA,
                GAME_PARTICLE_MANAGER_EVENT_SHOULD_DRAW = 0xB,
                GAME_PARTICLE_MANAGER_EVENT_FROZEN = 0xC,
                GAME_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT = 0xD,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENTITY_POSITION = 0xE,
                GAME_PARTICLE_MANAGER_EVENT_SET_FOW_PROPERTIES = 0xF,
                GAME_PARTICLE_MANAGER_EVENT_SET_TEXT = 0x10,
                GAME_PARTICLE_MANAGER_EVENT_SET_SHOULD_CHECK_FOW = 0x11,
                GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_MODEL = 0x12,
                GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_SNAPSHOT = 0x13,
                GAME_PARTICLE_MANAGER_EVENT_SET_TEXTURE_ATTRIBUTE = 0x14,
                GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_GENERIC_FLAG = 0x15,
                GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_TINT_AND_DESAT = 0x16,
                GAME_PARTICLE_MANAGER_EVENT_DESTROY_NAMED = 0x17,
                GAME_PARTICLE_MANAGER_EVENT_SKIP_TO_TIME = 0x18,
                GAME_PARTICLE_MANAGER_EVENT_CAN_FREEZE = 0x19,
                GAME_PARTICLE_MANAGER_EVENT_SET_NAMED_VALUE_CONTEXT = 0x1A,
                GAME_PARTICLE_MANAGER_EVENT_UPDATE_TRANSFORM = 0x1B,
                GAME_PARTICLE_MANAGER_EVENT_FREEZE_TRANSITION_OVERRIDE = 0x1C,
                GAME_PARTICLE_MANAGER_EVENT_FREEZE_INVOLVING = 0x1D,
                GAME_PARTICLE_MANAGER_EVENT_ADD_MODELLIST_OVERRIDE_ELEMENT = 0x1E,
                GAME_PARTICLE_MANAGER_EVENT_CLEAR_MODELLIST_OVERRIDE = 0x1F,
                GAME_PARTICLE_MANAGER_EVENT_CREATE_PHYSICS_SIM = 0x20,
                GAME_PARTICLE_MANAGER_EVENT_DESTROY_PHYSICS_SIM = 0x21,
                GAME_PARTICLE_MANAGER_EVENT_SET_VDATA = 0x22,
                GAME_PARTICLE_MANAGER_EVENT_SET_MATERIAL_OVERRIDE = 0x23
            };
            // Alignment: 4
            // Member count: 10
            enum class ECustomGameInstallStatus : uint32_t {
                k_ECustomGameInstallStatus_Unknown = 0x0,
                k_ECustomGameInstallStatus_Ready = 0x1,
                k_ECustomGameInstallStatus_Busy = 0x2,
                k_ECustomGameInstallStatus_FailedGeneric = 0x65,
                k_ECustomGameInstallStatus_FailedInternalError = 0x66,
                k_ECustomGameInstallStatus_RequestedTimestampTooOld = 0x67,
                k_ECustomGameInstallStatus_RequestedTimestampTooNew = 0x68,
                k_ECustomGameInstallStatus_CRCMismatch = 0x69,
                k_ECustomGameInstallStatus_FailedSteam = 0x6A,
                k_ECustomGameInstallStatus_FailedCanceled = 0x6B
            };
            // Alignment: 4
            // Member count: 4
            enum class CommandExecMode_t : uint32_t {
                EXEC_MANUAL = 0x0,
                EXEC_LEVELSTART = 0x1,
                EXEC_PERIODIC = 0x2,
                EXEC_MODES_COUNT = 0x3
            };
            // Alignment: 4
            // Member count: 11
            enum class SquadSlotId_t : uint32_t {
                SQUAD_SLOT_NONE = 0xFFFFFFFFFFFFFFFF,
                SQUAD_SLOT_ATTACK1 = 0x0,
                SQUAD_SLOT_ATTACK2 = 0x1,
                SQUAD_SLOT_ATTACK3 = 0x2,
                SQUAD_SLOT_INVESTIGATE_SOUND = 0x3,
                SQUAD_SLOT_EXCLUSIVE_HANDSIGN = 0x4,
                SQUAD_SLOT_EXCLUSIVE_RELOAD = 0x5,
                SQUAD_SLOT_SPECIAL_ATTACK = 0x6,
                SQUAD_SLOT_ADVANCE_ON_ENEMY = 0x7,
                SQUAD_SLOT_THROW_GRENADE = 0x8,
                SQUAD_SLOT_COUNT = 0x9
            };
            // Alignment: 4
            // Member count: 8
            enum class EPointType : uint32_t {
                EPointType_MoveTarget = 0x0,
                EPointType_EnemyBot = 0x1,
                EPointType_EnemyTrooper = 0x2,
                EPointType_FriendlyBot = 0x3,
                EPointType_FriendlyTrooper = 0x4,
                EPointType_DamageZone = 0x5,
                EPointType_MovingEnemyBot = 0x6,
                EPointType_MeleeTrainer = 0x7
            };
            // Alignment: 4
            // Member count: 3
            enum class EFireMode_t : uint32_t {
                EFireMode_None = 0x0,
                EFireMode_Primary = 0x1,
                EFireMode_Secondary = 0x2
            };
            // Alignment: 1
            // Member count: 5
            enum class ShatterDamageCause : uint8_t {
                SHATTERDAMAGE_BULLET = 0x0,
                SHATTERDAMAGE_MELEE = 0x1,
                SHATTERDAMAGE_THROWN = 0x2,
                SHATTERDAMAGE_SCRIPT = 0x3,
                SHATTERDAMAGE_EXPLOSIVE = 0x4
            };
            // Alignment: 4
            // Member count: 1
            enum class SVC_Messages_LowFrequency : uint32_t {
                svc_dummy = 0x258
            };
            // Alignment: 4
            // Member count: 5
            enum class eRollType : uint32_t {
                ROLL_NONE = 0xFFFFFFFFFFFFFFFF,
                ROLL_STATS = 0x0,
                ROLL_CREDITS = 0x1,
                ROLL_LATE_JOIN_LOGO = 0x2,
                ROLL_OUTTRO = 0x3
            };
            // Alignment: 4
            // Member count: 4
            enum class AbilityCastEvent_t : uint32_t {
                CAST_DELAY_STARTED = 0x0,
                CAST_COMPLETED = 0x1,
                CAST_TOGGLED_ON = 0x2,
                CAST_CHANNEL_STARTED = 0x3
            };
            // Alignment: 4
            // Member count: 4
            enum class ScriptedOnDeath_t : uint32_t {
                SS_ONDEATH_NOT_APPLICABLE = 0xFFFFFFFFFFFFFFFF,
                SS_ONDEATH_UNDEFINED = 0x0,
                SS_ONDEATH_RAGDOLL = 0x1,
                SS_ONDEATH_ANIMATED_DEATH = 0x2
            };
            // Alignment: 4
            // Member count: 10
            enum class ENeutralTrooperType : uint32_t {
                NEUTRAL_TROOPER_WEAK = 0x1,
                NEUTRAL_TROOPER_NORMAL = 0x2,
                NEUTRAL_TROOPER_STRONG = 0x3,
                NEUTRAL_SUPER = 0x5,
                NEUTRAL_SINNERS_SACRIFICE = 0x6,
                NEUTRAL_GARGOYLE = 0x9,
                NEUTRAL_TRASHBUG = 0xA,
                NEUTRAL_WHACK_A_GHOST = 0xB,
                NEUTRAL_VAULT = 0xC,
                NEUTRAL_SUPER_HEROTEST = 0xD
            };
            // Alignment: 4
            // Member count: 11
            enum class AI_MotorGroundAnimGraph_StateType_t : uint32_t {
                eIdle = 0x0,
                eIdleTurn = 0x1,
                eStart = 0x2,
                eLoop = 0x3,
                eStop = 0x4,
                eInstantStop = 0x5,
                eHop = 0x6,
                eLoopPerformance = 0x7,
                ePlantedTurn = 0x8,
                eAny = 0x9,
                eCount = 0x9
            };
            // Alignment: 4
            // Member count: 5
            enum class EHUDElementButtonHintSide_t : uint32_t {
                EButtonSide_Top = 0x0,
                EButtonSide_Right = 0x1,
                EButtonSide_Bottom = 0x2,
                EButtonSide_Left = 0x3,
                EButtonSide_Center = 0x4
            };
            // Alignment: 4
            // Member count: 2
            enum class CCitadelPlayerPawn_GraphController2_ESelectedAbility : uint32_t {
                ESelectedAbility_CITADEL_WEAPON_SET = 0x0,
                ESelectedAbility_ITEM = 0x1
            };
            // Alignment: 4
            // Member count: 4
            enum class ChoreoLookAtSpeed_t : uint32_t {
                eInvalid = 0xFFFFFFFFFFFFFFFF,
                eSlow = 0x0,
                eMedium = 0x1,
                eFast = 0x2
            };
            // Alignment: 4
            // Member count: 8
            enum class SpawnGroupFlags_t : uint32_t {
                SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE = 0x1,
                SPAWN_GROUP_DONT_SPAWN_ENTITIES = 0x2,
                SPAWN_GROUP_SYNCHRONOUS_SPAWN = 0x4,
                SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP = 0x8,
                SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES = 0x10,
                SPAWN_GROUP_BLOCK_UNTIL_LOADED = 0x40,
                SPAWN_GROUP_LOAD_STREAMING_DATA = 0x80,
                SPAWN_GROUP_CREATE_NEW_SCENE_WORLD = 0x100
            };
            // Alignment: 4
            // Member count: 16
            enum class ProjectileBehaviorFlag_t : uint32_t {
                PBF_None = 0x0,
                PBF_BounceOffWall = 0x1,
                PBF_StickToTarget = 0x2,
                PBF_StickToWorld = 0x4,
                PBF_NotTurnTowardVelocity = 0x8,
                PBF_DetonateOnHitTarget = 0x10,
                PBF_DetonateOnHitWorld = 0x20,
                PBF_DetonateOnHitIgnoreArmingTime = 0x40,
                PBF_StartDetonateTimeOnHitTarget = 0x80,
                PBF_StartDetonateTimeOnHitWorld = 0x100,
                PBF_DisableTouchOnHit = 0x200,
                PBF_DisableRemoveOnTouchTrackedTarget = 0x400,
                PBF_DisableTriggerProjectileImpactBehavior = 0x800,
                PBF_DetonateOnLifetimeExpire = 0x1000,
                PBF_ValidateTargetLineOfSight = 0x2000,
                PBF_AllowHitOnNonTrackedTargets = 0x4000
            };
            // Alignment: 4
            // Member count: 36
            enum class EUISound : uint32_t {
                EUISound_Invalid = 0xFFFFFFFFFFFFFFFF,
                EMainMenuHover = 0x0,
                EMainMenuActivate = 0x1,
                EShopModHover = 0x2,
                EShopModActivate = 0x3,
                EShopModDestroy = 0x4,
                EAbilityHover = 0x5,
                EAbilityActivate = 0x6,
                EAbilityUpgradeHover = 0x7,
                EAbilityUpgradeActivate = 0x8,
                ESocialMenuHover = 0x9,
                ESocialMenuActivate = 0xA,
                EShopEnter = 0xB,
                EShopExit = 0xC,
                EShopExitAlarm = 0xD,
                EHeroCardHover = 0xE,
                EHeroCardActivate = 0xF,
                EClearRosterHover = 0x10,
                EClearRosterActivate = 0x11,
                EPurchaseActiveItem = 0x12,
                EPurchaseImbuedItem = 0x13,
                EPlayButtonClicked = 0x14,
                EShopFilterWeaponClicked = 0x15,
                EShopFilterVitalityClicked = 0x16,
                EShopFilterMagicClicked = 0x17,
                EShopFilterFavoritesClicked = 0x18,
                EMainMenuPartyInvited = 0x19,
                EMainMenuPartyLeave = 0x1A,
                EMainMenuPartyNewMember = 0x1B,
                EMainMenuPartyPickHeroesEnter = 0x1C,
                EMainMenuPartyPickHeroesConfirm = 0x1D,
                EMainMenuPartyPickHeroesExit = 0x1E,
                ECommendConfirmation = 0x1F,
                ECommendToast = 0x20,
                EOtherPlayerPurchasesMod = 0x21,
                EUISoundCount = 0x22
            };
            // Alignment: 4
            // Member count: 4
            enum class ECitadelStatCategory : uint32_t {
                ECitadelStat_Invalid = 0xFFFFFFFFFFFFFFFF,
                ECitadelStat_Weapon = 0x0,
                ECitadelStat_Vitality = 0x1,
                ECitadelStat_Spirit = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class ScriptedMoveType_t : uint32_t {
                SCRIPTED_MOVETYPE_NONE = 0x0,
                SCRIPTED_MOVETYPE_TO_WITH_DURATION = 0x1,
                SCRIPTED_MOVETYPE_TO_WITH_MOVESPEED = 0x2,
                SCRIPTED_MOVETYPE_SWEEP_TO_AT_MOVEMENT_SPEED = 0x3
            };
            // Alignment: 4
            // Member count: 7
            enum class CitadelPingEvent_t : uint32_t {
                CITADEL_PING_EVENT_LOCATION_PING = 0x0,
                CITADEL_PING_MINIMAP_LOCATION_PING = 0x1,
                CITADEL_PING_EVENT_BASE_UNDER_ATTACK = 0x2,
                CITADEL_PING_EVENT_ENTITY_PING = 0x3,
                CITADEL_PING_CRATE_SPAWN = 0x4,
                CITADEL_PING_OBJECTIVE_SPAWN = 0x5,
                CITADEL_PING_NEUTRAL_SPAWN = 0x6
            };
            // Alignment: 4
            // Member count: 7
            enum class EAbilityTargetingShape_t : uint32_t {
                CITADEL_ABILITY_TARGETING_SHAPE_NONE = 0x0,
                CITADEL_ABILITY_TARGETING_SHAPE_SPHERE = 0x1,
                CITADEL_ABILITY_TARGETING_SHAPE_LINE = 0x2,
                CITADEL_ABILITY_TARGETING_SHAPE_CIRCLE = 0x3,
                CITADEL_ABILITY_TARGETING_SHAPE_CONE = 0x4,
                CITADEL_ABILITY_TARGETING_SHAPE_CAPSULE = 0x5,
                CITADEL_ABILITY_TARGETING_SHAPE_COUNT = 0x6
            };
            // Alignment: 4
            // Member count: 8
            enum class EAbilityTargetingLocation_t : uint32_t {
                CITADEL_ABILITY_TARGETING_LOCATION_NONE = 0x0,
                CITADEL_ABILITY_TARGETING_LOCATION_SELF = 0x1,
                CITADEL_ABILITY_TARGETING_LOCATION_UNIT = 0x2,
                CITADEL_ABILITY_TARGETING_LOCATION_GROUND = 0x3,
                CITADEL_ABILITY_TARGETING_LOCATION_FIXED_RANGE_GROUND = 0x4,
                CITADEL_ABILITY_TARGETING_LOCATION_MINIMAP_GROUND = 0x5,
                CITADEL_ABILITY_TARGETING_LOCATION_MINIMAP_UNIT = 0x6,
                CITADEL_ABILITY_TARGETING_LOCATION_COUNT = 0x7
            };
            // Alignment: 4
            // Member count: 2
            enum class eAuraShapeType : uint32_t {
                k_eAuraShapeTypeSphere = 0x0,
                k_eAuraShapeTypeEntityBased = 0x1
            };
            // Alignment: 4
            // Member count: 3
            enum class CameraAction : uint32_t {
                k_EAction_AddOp = 0x0,
                k_EAction_ClearAllOps = 0x1,
                k_EAction_ClearOpsForContext = 0x2
            };
            // Alignment: 4
            // Member count: 12
            enum class ECitadelClientMessages : uint32_t {
                CITADEL_CM_MapPing = 0x3EA,
                CITADEL_CM_PerformanceStats = 0x3EB,
                CITADEL_CM_PingWheel = 0x3EC,
                CITADEL_CM_ChatMsg = 0x3ED,
                CITADEL_CM_PerfReport = 0x3EE,
                CITADEL_CM_QuickResponse = 0x3EF,
                CITADEL_CM_Pause = 0x3F0,
                CITADEL_CM_MapLine = 0x3F1,
                CITADEL_CM_AbilityPing = 0x3F2,
                CITADEL_CM_ExecuteMapUnitAbility = 0x3F3,
                CITADEL_CM_GetDamageStats = 0x3F4,
                CITADEL_CM_CheaterVote = 0x3F5
            };
            // Alignment: 4
            // Member count: 5
            enum class EAttachState_t : uint32_t {
                EAttachState_None = 0x0,
                EAttachState_AwaitingTether = 0x1,
                EAttachState_Latched = 0x2,
                EAttachState_Attached = 0x3,
                EAttachStateCount = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class ModifierDisableGroup_t : uint32_t {
                MODIFIER_DISABLE_GROUP_MIN = 0x0,
                MODIFIER_DISABLE_GROUP_ACTIVE_WEAPON = 0x1,
                MODIFIER_DISABLE_GROUP_TIME_LOCKED = 0x2,
                MODIFIER_DISABLE_GROUP_MAX_BIT = 0x1,
                MODIFIER_DISABLE_GROUP_MAX = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class ECitadelAbilityHUDElementType_t : uint32_t {
                CITADEL_ABILITY_HUD_ELEMENT_TYPE_GUN = 0x0,
                CITADEL_ABILITY_HUD_ELEMENT_TYPE_UNIT_TARGET = 0x1,
                CITADEL_ABILITY_HUD_ELEMENT_TYPE_PROGRESS = 0x2,
                CITADEL_ABILITY_HUD_ELEMENT_TYPE_HIDDEN = 0x3
            };
            // Alignment: 4
            // Member count: 85
            enum class EStatsType : uint32_t {
                EWeaponDPS = 0x0,
                EMeleeDamage_DEPRECATED = 0x1,
                EMaxHealth = 0x2,
                EClipSize = 0x3,
                EBaseHealthRegen = 0x4,
                EExternalHealthRegen = 0x5,
                EHealthRegen = 0x6,
                EMaxMoveSpeed = 0x7,
                ESprintSpeed = 0x8,
                ECrouchSpeed = 0x9,
                EMoveAcceleration = 0xA,
                EClipSizeIncrease = 0xB,
                EBulletArmorDamageReduction = 0xC,
                EBulletShieldHealth = 0xD,
                ETechArmorDamageReduction = 0xE,
                ETechShieldHealth = 0xF,
                ELightMeleeDamage = 0x10,
                EHeavyMeleeDamage = 0x11,
                EWeaponRange = 0x12,
                EWeaponRecoilReduction = 0x13,
                EFireRate = 0x14,
                EWeaponPower = 0x15,
                EWeaponPowerScale = 0x16,
                EBulletDamage = 0x17,
                ETechPowerAmp_DEPRECATED = 0x18,
                ETechPowerAmpBonus_DEPRECATED = 0x19,
                ERoundsPerSecond = 0x1A,
                ERoundsPerSecondInverse = 0x1B,
                EBaseWeaponDamageIncrease = 0x1C,
                EBaseMeleeDamageIncrease = 0x1D,
                EAirJumpCount = 0x1E,
                EProcBuildUpRateScale = 0x1F,
                ETechCooldown = 0x20,
                ETechCooldownBetweenChargeUses = 0x21,
                ETechRange = 0x22,
                ETechRadius = 0x23,
                EProjectileRadius_DEPRECATED = 0x24,
                EMeleeRange = 0x25,
                EReloadSpeed = 0x26,
                EMaxChargesIncrease = 0x27,
                EHealingOutput = 0x28,
                ETechDuration = 0x29,
                EWeaponSpreadScale = 0x2A,
                EMeleeScalingFromWeaponPower_DEPRECATED = 0x2B,
                EHealthAttribute_DEPRECATED = 0x2C,
                EArmorAttribute_DEPRECATED = 0x2D,
                EFireRateAttribute_DEPRECATED = 0x2E,
                EWeaponPowerAttribute_DEPRECATED = 0x2F,
                ETechDamageAttribute_DEPRECATED = 0x30,
                EReloadTime = 0x31,
                EStamina = 0x32,
                EStaminaCooldown_DEPRECATED = 0x33,
                EBuildUpRate = 0x34,
                EBaseWeaponDamagePerShot = 0x35,
                ETechLifesteal = 0x36,
                ETechLifestealNonHero_DEPRECATED = 0x37,
                EBulletLifesteal = 0x38,
                EDamageScale = 0x39,
                EChannelDuration = 0x3A,
                ETechPower = 0x3B,
                EArmorPower = 0x3C,
                ETechDamageScale = 0x3D,
                EWeaponDamageScale = 0x3E,
                EMeleeDamageScale = 0x3F,
                ELevelUpBaseWeaponDamageIncrease = 0x40,
                ELevelUpBaseMeleeDamageIncrease = 0x41,
                ELevelUpBaseHealthIncrease = 0x42,
                EStaminaRegenPerSecond = 0x43,
                EAbilityResourceMax = 0x44,
                EAbilityResourceRegenPerSecond = 0x45,
                ECycleTime = 0x46,
                EMeleeTravelDistanceScale = 0x47,
                EAirMoveDistanceScale = 0x48,
                ECritDamageReceivedScale = 0x49,
                EWeaponFalloffMinRange = 0x4A,
                EWeaponFalloffMaxRange = 0x4B,
                EBulletSpeed = 0x4C,
                EBulletSpeedIncrease = 0x4D,
                EStaminaRegenIncrease = 0x4E,
                EStaminaCooldown = 0x4F,
                EDebuffResist = 0x50,
                ECritDamageBonusScale = 0x51,
                EMeleeResist = 0x52,
                EStatsCount = 0x53,
                EStatsInvalid = 0x53
            };
            // Alignment: 4
            // Member count: 3
            enum class RequestPause_t : uint32_t {
                RP_PAUSE = 0x0,
                RP_UNPAUSE = 0x1,
                RP_TOGGLEPAUSE = 0x2
            };
            // Alignment: 4
            // Member count: 2
            enum class ScriptedConflictResponse_t : uint32_t {
                SS_CONFLICT_ENQUEUE = 0x0,
                SS_CONFLICT_INTERRUPT = 0x1
            };
            // Alignment: 1
            // Member count: 6
            enum class WaterLevel_t : uint8_t {
                WL_NotInWater = 0x0,
                WL_Feet = 0x1,
                WL_Waist = 0x2,
                WL_Chest = 0x3,
                WL_FullyUnderwater = 0x4,
                WL_Count = 0x5
            };
            // Alignment: 4
            // Member count: 3
            enum class WorldTextPanelVerticalAlign_t : uint32_t {
                WORLDTEXT_VERTICAL_ALIGN_TOP = 0x0,
                WORLDTEXT_VERTICAL_ALIGN_CENTER = 0x1,
                WORLDTEXT_VERTICAL_ALIGN_BOTTOM = 0x2
            };
            // Alignment: 1
            // Member count: 5
            enum class ETelepunchState_t : uint8_t {
                ETelepunchState_None = 0x0,
                ETelepunchState_EnemyPortalTelegraph = 0x1,
                ETelepunchState_SelfPortalTelegraph = 0x2,
                ETelepunchState_Windup = 0x3,
                ETelepunchState_Attack = 0x4
            };
            // Alignment: 4
            // Member count: 15
            enum class CLC_Messages : uint32_t {
                clc_ClientInfo = 0x14,
                clc_Move = 0x15,
                clc_VoiceData = 0x16,
                clc_BaselineAck = 0x17,
                clc_RespondCvarValue = 0x19,
                clc_FileCRCCheck = 0x1A,
                clc_LoadingProgress = 0x1B,
                clc_SplitPlayerConnect = 0x1C,
                clc_SplitPlayerDisconnect = 0x1E,
                clc_ServerStatus = 0x1F,
                clc_RequestPause = 0x21,
                clc_CmdKeyValues = 0x22,
                clc_RconServerDetails = 0x23,
                clc_HltvReplay = 0x24,
                clc_Diagnostic = 0x25
            };
            // Alignment: 4
            // Member count: 3
            enum class EClientUIEvent : uint32_t {
                EClientUIEvent_Invalid = 0x0,
                EClientUIEvent_DialogFinished = 0x1,
                EClientUIEvent_FireOutput = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class CAI_InterestTarget__Type_t : uint32_t {
                eDisabled = 0x0,
                eEntity = 0x1,
                ePosition = 0x2,
                eDirection = 0x3
            };
            // Alignment: 1
            // Member count: 9
            enum class EItemSlotTypes_t : uint8_t {
                EItemSlotType_Invalid = 0xFFFFFFFFFFFFFFFF,
                EItemSlotType_WeaponMod = 0x0,
                EItemSlotType_Armor = 0x1,
                EItemSlotType_Tech = 0x2,
                EItemSlotType_Universal = 0x3,
                EItemSlotType_UniversalLocked = 0x4,
                EItemSlotType_All = 0x5,
                EItemSlotType_Favorites = 0x6,
                EMaxItemSlotTypes = 0x7
            };
            // Alignment: 1
            // Member count: 3
            enum class AI_Motor_MovementFacingMode_t : uint8_t {
                eInvalid = 0x0,
                eTarget = 0x1,
                ePath = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class AmmoPosition_t : uint32_t {
                AMMO_POSITION_INVALID = 0xFFFFFFFFFFFFFFFF,
                AMMO_POSITION_PRIMARY = 0x0,
                AMMO_POSITION_SECONDARY = 0x1,
                AMMO_POSITION_COUNT = 0x2
            };
            // Alignment: 4
            // Member count: 11
            enum class CDebugOverlayFilterType_t : uint32_t {
                NONE = 0x0,
                TEXT = 0x1,
                ENTITY = 0x2,
                COUNT = 0x3,
                TACTICAL_SEARCH = 0x4,
                AI_SCHEDULE = 0x5,
                AI_TASK = 0x6,
                AI_EVENT = 0x7,
                AI_PATHFINDING = 0x8,
                END_SIM_HISTORY_TYPES = 0x9,
                COMBINED = 0xFFFFFFFFFFFFFFFF
            };
            // Alignment: 4
            // Member count: 2
            enum class ModifierTimeScaleSource_t : uint32_t {
                MODIFIER_TIME_SCALE_USE_PARENT = 0x0,
                MODIFIER_TIME_SCALE_USE_CASTER = 0x1
            };
            // Alignment: 4
            // Member count: 50
            enum class CitadelUserMessageIds : uint32_t {
                k_EUserMsg_Damage = 0x12C,
                k_EUserMsg_MapPing = 0x12F,
                k_EUserMsg_TeamRewards = 0x130,
                k_EUserMsg_AbilityFailed = 0x132,
                k_EUserMsg_TriggerDamageFlash = 0x134,
                k_EUserMsg_AbilitiesChanged = 0x135,
                k_EUserMsg_RecentDamageSummary = 0x136,
                k_EUserMsg_SpectatorTeamChanged = 0x137,
                k_EUserMsg_ChatWheel = 0x138,
                k_EUserMsg_GoldHistory = 0x139,
                k_EUserMsg_ChatMsg = 0x13A,
                k_EUserMsg_QuickResponse = 0x13B,
                k_EUserMsg_PostMatchDetails = 0x13C,
                k_EUserMsg_ChatEvent = 0x13D,
                k_EUserMsg_AbilityInterrupted = 0x13E,
                k_EUserMsg_HeroKilled = 0x13F,
                k_EUserMsg_ReturnIdol = 0x140,
                k_EUserMsg_SetClientCameraAngles = 0x141,
                k_EUserMsg_MapLine = 0x142,
                k_EUserMsg_BulletHit = 0x143,
                k_EUserMsg_ObjectiveMask = 0x144,
                k_EUserMsg_ModifierApplied = 0x145,
                k_EUserMsg_CameraController = 0x146,
                k_EUserMsg_AuraModifierApplied = 0x147,
                k_EUserMsg_ObstructedShotFired = 0x149,
                k_EUserMsg_AbilityLateFailure = 0x14A,
                k_EUserMsg_AbilityPing = 0x14B,
                k_EUserMsg_PostProcessingAnim = 0x14C,
                k_EUserMsg_DeathReplayData = 0x14D,
                k_EUserMsg_PlayerLifetimeStatInfo = 0x14E,
                k_EUserMsg_ForceShopClosed = 0x150,
                k_EUserMsg_StaminaDrained = 0x151,
                k_EUserMsg_AbilityNotify = 0x152,
                k_EUserMsg_GetDamageStatsResponse = 0x153,
                k_EUserMsg_ParticipantStartSoundEvent = 0x154,
                k_EUserMsg_ParticipantStopSoundEvent = 0x155,
                k_EUserMsg_ParticipantStopSoundEventHash = 0x156,
                k_EUserMsg_ParticipantSetSoundEventParams = 0x157,
                k_EUserMsg_ParticipantSetLibraryStackFields = 0x158,
                k_EUserMsg_CurrencyChanged = 0x159,
                k_EUserMsg_GameOver = 0x15A,
                k_EUserMsg_BossKilled = 0x15B,
                k_EUserMsg_BossDamaged = 0x15C,
                k_EUserMsg_MidBossSpawned = 0x15D,
                k_EUserMsg_RejuvStatus = 0x15E,
                k_EUserMsg_KillStreak = 0x15F,
                k_EUserMsg_TeamMsg = 0x160,
                k_EUserMsg_PlayerRespawned = 0x161,
                k_EUserMsg_CallCheaterVote = 0x162,
                k_EUserMsg_MeleeHit = 0x163
            };
            // Alignment: 4
            // Member count: 4
            enum class ECitadelPingWheelSliceTypes_t : uint32_t {
                CITADEL_PING_WHEEL_ONE_SLICE = 0x0,
                CITADEL_PING_WHEEL_TWO_SLICE = 0x1,
                CITADEL_PING_WHEEL_SUBNAV_ONE_SLICE = 0x2,
                CITADEL_PING_WHEEL_SUBNAV_TWO_SLICE = 0x3
            };
            // Alignment: 4
            // Member count: 1
            enum class EGCEconBaseMsg : uint32_t {
                k_EMsgGCGenericResult = 0xA13
            };
            // Alignment: 4
            // Member count: 5
            enum class EntityDisolveType_t : uint32_t {
                ENTITY_DISSOLVE_INVALID = 0xFFFFFFFFFFFFFFFF,
                ENTITY_DISSOLVE_NORMAL = 0x0,
                ENTITY_DISSOLVE_ELECTRICAL = 0x1,
                ENTITY_DISSOLVE_ELECTRICAL_LIGHT = 0x2,
                ENTITY_DISSOLVE_CORE = 0x3
            };
            // Alignment: 2
            // Member count: 10
            enum class ECitadelWeaponAttributes : uint16_t {
                EWeaponAttribute_None = 0x0,
                EWeaponAttribute_RapidFire = 0x1,
                EWeaponAttribute_BurstFire = 0x2,
                EWeaponAttribute_Spreadshot = 0x4,
                EWeaponAttribute_BeamWeapon = 0x8,
                EWeaponAttribute_CloseRange = 0x10,
                EWeaponAttribute_MediumRange = 0x20,
                EWeaponAttribute_LongRange = 0x40,
                EWeaponAttribute_HeavyHitter = 0x80,
                EWeaponAttribute_Projectile = 0x100
            };
            // Alignment: 4
            // Member count: 3
            enum class AI_MovementHeadingUpdateCondition_t : uint32_t {
                eNone = 0x0,
                eLeftFootDown = 0x1,
                eRightFootDown = 0x2
            };
            // Alignment: 1
            // Member count: 3
            enum class EAbilitySpectatePriority : uint8_t {
                CITADELTV_ABILITY_SPECTATE_PRIORITY_NONE = 0x0,
                CITADELTV_ABILITY_SPECTATE_PRIORITY_MEDIUM = 0x1,
                CITADELTV_ABILITY_SPECTATE_PRIORITY_HIGH = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class CCitadelPlayerPawn_GraphController2_EFlinchType : uint32_t {
                EFlinchType_NONE = 0x0,
                EFlinchType_BACK = 0x1,
                EFlinchType_LEFT = 0x2,
                EFlinchType_RIGHT = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class Bidirectional_Messages_LowFrequency : uint32_t {
                bi_RelayInfo = 0x2BC,
                bi_RelayPacket = 0x2BD
            };
            // Alignment: 4
            // Member count: 7
            enum class AI_Motor_FacingTargetRequestSource_t : uint32_t {
                eInvalid = 0xFFFFFFFFFFFFFFFF,
                eMotor = 0x0,
                eChoreo = 0x1,
                eLevelScript = 0x2,
                eSmartGoal = 0x3,
                eSchedule = 0x4,
                eCount = 0x5
            };
            // Alignment: 4
            // Member count: 8
            enum class ESOMsg : uint32_t {
                k_ESOMsg_Create = 0x15,
                k_ESOMsg_Update = 0x16,
                k_ESOMsg_Destroy = 0x17,
                k_ESOMsg_CacheSubscribed = 0x18,
                k_ESOMsg_CacheUnsubscribed = 0x19,
                k_ESOMsg_UpdateMultiple = 0x1A,
                k_ESOMsg_CacheSubscriptionRefresh = 0x1C,
                k_ESOMsg_CacheSubscribedUpToDate = 0x1D
            };
            // Alignment: 4
            // Member count: 10
            enum class ECitadelGameEvents : uint32_t {
                GE_FireBullets = 0x1C2,
                GE_PlayerAnimEvent = 0x1C3,
                GE_ParticleSystemManager = 0x1CA,
                GE_ScreenTextPretty = 0x1CB,
                GE_ServerRequestedTracer = 0x1CC,
                GE_BulletImpact = 0x1CD,
                GE_EnableSatVolumesEvent = 0x1CE,
                GE_PlaceSatVolumeEvent = 0x1CF,
                GE_DisableSatVolumesEvent = 0x1D0,
                GE_RemoveSatVolumeEvent = 0x1D1
            };
            // Alignment: 4
            // Member count: 3
            enum class TaskHandshakeScope_t : uint32_t {
                eTask = 0x0,
                eSchedule = 0x1,
                eInvalid = 0x2
            };
            // Alignment: 8
            // Member count: 43
            enum class InputBitMask_t : uint64_t {
                IN_NONE = 0x0,
                IN_ALL = 0xFFFFFFFFFFFFFFFF,
                IN_ATTACK = 0x1,
                IN_JUMP = 0x2,
                IN_DUCK = 0x4,
                IN_FORWARD = 0x8,
                IN_BACK = 0x10,
                IN_USE = 0x20,
                IN_TURNLEFT = 0x80,
                IN_TURNRIGHT = 0x100,
                IN_MOVELEFT = 0x200,
                IN_MOVERIGHT = 0x400,
                IN_ATTACK2 = 0x800,
                IN_RELOAD = 0x2000,
                IN_SPEED = 0x10000,
                IN_JOYAUTOSPRINT = 0x20000,
                IN_FIRST_MOD_SPECIFIC_BIT = 0x100000000,
                IN_WEAPON1 = 0x100000000,
                IN_ABILITY1 = 0x200000000,
                IN_ABILITY2 = 0x400000000,
                IN_ABILITY3 = 0x800000000,
                IN_ABILITY4 = 0x1000000000,
                IN_ITEM1 = 0x2000000000,
                IN_ITEM2 = 0x4000000000,
                IN_ITEM3 = 0x8000000000,
                IN_ITEM4 = 0x10000000000,
                IN_ITEM5 = 0x20000000000,
                IN_ABILITY_HELD = 0x40000000000,
                IN_INNATE_1 = 0x100000000000,
                IN_INNATE_2 = 0x200000000000,
                IN_INNATE_3 = 0x400000000000,
                IN_MANTLE = 0x1000000000000,
                IN_SPEC_NEXT = 0x2000000000000,
                IN_SPEC_PREV = 0x4000000000000,
                IN_SPEC_MODE = 0x8000000000000,
                IN_SPEC_TOGGLE_TEAM = 0x10000000000000,
                IN_ALT_CAST = 0x20000000000000,
                IN_REPLAY_DEATH = 0x40000000000000,
                IN_TELEPORT = 0x80000000000000,
                IN_CANCEL_ABILITY = 0x100000000000000,
                IN_ZIPLINE = 0x200000000000000,
                IN_MOVE_UP = 0x400000000000000,
                IN_MOVE_DOWN = 0x800000000000000
            };
            // Alignment: 4
            // Member count: 21
            enum class HitGroup_t : uint32_t {
                HITGROUP_INVALID = 0xFFFFFFFFFFFFFFFF,
                HITGROUP_GENERIC = 0x0,
                HITGROUP_HEAD = 0x1,
                HITGROUP_CHEST = 0x2,
                HITGROUP_STOMACH = 0x3,
                HITGROUP_LEFTARM = 0x4,
                HITGROUP_RIGHTARM = 0x5,
                HITGROUP_LEFTLEG = 0x6,
                HITGROUP_RIGHTLEG = 0x7,
                HITGROUP_NECK = 0x8,
                HITGROUP_UNUSED = 0x9,
                HITGROUP_GEAR = 0xA,
                HITGROUP_SPECIAL = 0xB,
                HITGROUP_T2_BOSS_FRONT_LEFT_LEG_WEAKPOINT = 0xC,
                HITGROUP_T2_BOSS_FRONT_RIGHT_LEG_WEAKPOINT = 0xD,
                HITGROUP_T2_BOSS_REAR_LEFT_LEG_WEAKPOINT = 0xE,
                HITGROUP_T2_BOSS_REAR_RIGHT_LEG_WEAKPOINT = 0xF,
                HITGROUP_T2_BOSS_HEAD_WEAKPOINT = 0x10,
                HITGROUP_T2_BOSS_BACK_WEAKPOINT = 0x11,
                HITGROUP_DRONE_BOSS_DRONE_WEAKPOINT = 0x12,
                HITGROUP_COUNT = 0x13
            };
            // Alignment: 1
            // Member count: 2
            enum class AI_Motor_DefaultFacing_t : uint8_t {
                eLookTarget = 0x0,
                eForward = 0x1
            };
            // Alignment: 4
            // Member count: 5
            enum class CCitadelPlayerPawn_GraphController2_EKnockdownType : uint32_t {
                EKnockdownType_NONE = 0x0,
                EKnockdownType_LARGE = 0x1,
                EKnockdownType_MEDIUM = 0x2,
                EKnockdownType_SMALL = 0x3,
                EKnockdownType_PARRIED = 0x4
            };
            // Alignment: 4
            // Member count: 5
            enum class NPCStatusEffectPriority_t : uint32_t {
                STATUS_PRIORITY_NOT_USED = 0x0,
                STATUS_PRIORITY_LOW = 0x1,
                STATUS_PRIORITY_MEDIUM = 0x2,
                STATUS_PRIORITY_HIGH = 0x3,
                STATUS_PRIORITY_HIGHEST = 0x4
            };
            // Alignment: 4
            // Member count: 2
            enum class PointWorldTextReorientMode_t : uint32_t {
                POINT_WORLD_TEXT_REORIENT_NONE = 0x0,
                POINT_WORLD_TEXT_REORIENT_AROUND_UP = 0x1
            };
            // Alignment: 4
            // Member count: 2
            enum class CCitadelPlayerPawn_GraphController2_EDeathSequence : uint32_t {
                EDeathSequence_NONE = 0x0,
                EDeathSequence_GENERIC = 0x1
            };
            // Alignment: 8
            // Member count: 41
            enum class DebugOverlayBits_t : uint64_t {
                OVERLAY_TEXT_BIT = 0x1,
                OVERLAY_NAME_BIT = 0x2,
                OVERLAY_BBOX_BIT = 0x4,
                OVERLAY_PIVOT_BIT = 0x8,
                OVERLAY_MESSAGE_BIT = 0x10,
                OVERLAY_ABSBOX_BIT = 0x20,
                OVERLAY_RBOX_BIT = 0x40,
                OVERLAY_SHOW_BLOCKSLOS = 0x80,
                OVERLAY_ATTACHMENTS_BIT = 0x100,
                OVERLAY_INTERPOLATED_ATTACHMENTS_BIT = 0x200,
                OVERLAY_INTERPOLATED_PIVOT_BIT = 0x400,
                OVERLAY_SKELETON_BIT = 0x800,
                OVERLAY_INTERPOLATED_SKELETON_BIT = 0x1000,
                OVERLAY_TRIGGER_BOUNDS_BIT = 0x2000,
                OVERLAY_HITBOX_BIT = 0x4000,
                OVERLAY_INTERPOLATED_HITBOX_BIT = 0x8000,
                OVERLAY_AUTOAIM_BIT = 0x10000,
                OVERLAY_NPC_SELECTED_BIT = 0x20000,
                OVERLAY_JOINT_INFO_BIT = 0x40000,
                OVERLAY_NPC_ROUTE_BIT = 0x80000,
                OVERLAY_VISIBILITY_TRACES_BIT = 0x100000,
                OVERLAY_NPC_ENEMIES_BIT = 0x400000,
                OVERLAY_NPC_CONDITIONS_BIT = 0x800000,
                OVERLAY_NPC_COMBAT_BIT = 0x1000000,
                OVERLAY_NPC_TASK_BIT = 0x2000000,
                OVERLAY_NPC_BODYLOCATIONS = 0x4000000,
                OVERLAY_NPC_VIEWCONE_BIT = 0x8000000,
                OVERLAY_NPC_KILL_BIT = 0x10000000,
                OVERLAY_WC_CHANGE_ENTITY = 0x20000000,
                OVERLAY_BUDDHA_MODE = 0x40000000,
                OVERLAY_NPC_STEERING_REGULATIONS = 0x80000000,
                OVERLAY_NPC_TASK_TEXT_BIT = 0x100000000,
                OVERLAY_PROP_DEBUG = 0x200000000,
                OVERLAY_NPC_RELATION_BIT = 0x400000000,
                OVERLAY_VIEWOFFSET = 0x800000000,
                OVERLAY_VCOLLIDE_WIREFRAME_BIT = 0x1000000000,
                OVERLAY_NPC_SCRIPTED_COMMANDS_BIT = 0x2000000000,
                OVERLAY_ACTORNAME_BIT = 0x4000000000,
                OVERLAY_NPC_CONDITIONS_TEXT_BIT = 0x8000000000,
                OVERLAY_NPC_ABILITY_RANGE_DEBUG_BIT = 0x10000000000,
                OVERLAY_MINIMAL_TEXT = 0x20000000000
            };
            // Alignment: 4
            // Member count: 14
            enum class EGCMsgUseItemResponse : uint32_t {
                k_EGCMsgUseItemResponse_ItemUsed = 0x0,
                k_EGCMsgUseItemResponse_GiftNoOtherPlayers = 0x1,
                k_EGCMsgUseItemResponse_ServerError = 0x2,
                k_EGCMsgUseItemResponse_MiniGameAlreadyStarted = 0x3,
                k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted = 0x4,
                k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted = 0x5,
                k_EGCMsgUseItemResponse_NotInLowPriorityPool = 0x6,
                k_EGCMsgUseItemResponse_NotHighEnoughLevel = 0x7,
                k_EGCMsgUseItemResponse_EventNotActive = 0x8,
                k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted = 0x9,
                k_EGCMsgUseItemResponse_MissingRequirement = 0xA,
                k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew = 0xB,
                k_EGCMsgUseItemResponse_EmoticonUnlock_Complete = 0xC,
                k_EGCMsgUseItemResponse_ItemUsed_Compendium = 0xD
            };
            // Alignment: 2
            // Member count: 11
            enum class EShopFilters_t : uint16_t {
                EShopFilterNone = 0x0,
                EShopFilterWeaponDamage = 0x1,
                EShopFilterMagicDamage = 0x2,
                EShopFilterDurability = 0x4,
                EShopFilterFireRate = 0x8,
                EShopFilterClipSize = 0x10,
                EShopFilterMelee = 0x20,
                EShopFilterHealing = 0x40,
                EShopFilterMovement = 0x80,
                EShopFilterDisruption = 0x100,
                EShopFilterMax = 0x200
            };
            // Alignment: 4
            // Member count: 3
            enum class AmmoFlags_t : uint32_t {
                AMMO_FORCE_DROP_IF_CARRIED = 0x1,
                AMMO_RESERVE_STAYS_WITH_WEAPON = 0x2,
                AMMO_FLAG_MAX = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class CCitadelPlayerPawn_GraphController2_ELaunchType : uint32_t {
                ELaunchType_NONE = 0x0,
                ELaunchType_JUMP = 0x1,
                ELaunchType_FORCED = 0x2,
                ELaunchType_CATAPULT = 0x3
            };
            // Alignment: 4
            // Member count: 13
            enum class EBaseGameEvents : uint32_t {
                GE_VDebugGameSessionIDEvent = 0xC8,
                GE_PlaceDecalEvent = 0xC9,
                GE_ClearWorldDecalsEvent = 0xCA,
                GE_ClearEntityDecalsEvent = 0xCB,
                GE_ClearDecalsForSkeletonInstanceEvent = 0xCC,
                GE_Source1LegacyGameEventList = 0xCD,
                GE_Source1LegacyListenEvents = 0xCE,
                GE_Source1LegacyGameEvent = 0xCF,
                GE_SosStartSoundEvent = 0xD0,
                GE_SosStopSoundEvent = 0xD1,
                GE_SosSetSoundEventParams = 0xD2,
                GE_SosSetLibraryStackFields = 0xD3,
                GE_SosStopSoundEventHash = 0xD4
            };
            // Alignment: 4
            // Member count: 78
            enum class CitadelConcept_t : uint32_t {
                CITADEL_CONCEPT_NONE = 0xFFFFFFFFFFFFFFFF,
                TLK_CITADEL_CAST_EXECUTE = 0x0,
                TLK_CITADEL_CAST_ULTIMATE = 0x1,
                TLK_CITADEL_DEATH = 0x2,
                TLK_CITADEL_KILL = 0x3,
                TLK_CITADEL_KILL_ASSIST = 0x4,
                TLK_CITADEL_KILL_STREAK = 0x5,
                TLK_CITADEL_DENY = 0x6,
                TLK_CITADEL_WAS_DENIED = 0x7,
                TLK_CITADEL_DEFEAT = 0x8,
                TLK_CITADEL_VICTORY = 0x9,
                TLK_CITADEL_PAIN = 0xA,
                TLK_CITADEL_CUSTOM = 0xB,
                TLK_CITADEL_AP_GAINED = 0xC,
                TLK_CITADEL_GOLD_GAINED = 0xD,
                TLK_CITADEL_LEVEL_GAINED = 0xE,
                TLK_CITADEL_HUNTING = 0xF,
                TLK_CITADEL_BE_CAREFUL = 0x10,
                TLK_CITADEL_LEAVING_AREA = 0x11,
                TLK_CITADEL_ZIPLINE = 0x12,
                TLK_CITADEL_ENEMY_ESCAPED = 0x13,
                TLK_CITADEL_SURVIVED = 0x14,
                TLK_CITADEL_OBSERVED_SURVIVAL = 0x15,
                TLK_CITADEL_MATCH_START = 0x16,
                TLK_CITADEL_CONVERSATION = 0x17,
                TLK_CITADEL_IDOL = 0x18,
                TLK_CITADEL_UPGRADE_ABILITY = 0x19,
                TLK_CITADEL_BUY_UPGRADE = 0x1A,
                TLK_CITADEL_SELL_UPGRADE = 0x1B,
                TLK_CITADEL_ABILITY_SELECTED = 0x1C,
                TLK_CITADEL_HERO_SELECTED = 0x1D,
                TLK_CITADEL_PICKUP_ITEM = 0x1E,
                TLK_CITADEL_INTERRUPT_ABILITY = 0x1F,
                TLK_CITADEL_ABILITY_INTERRUPTED = 0x20,
                TLK_CITADEL_OBSERVED_INTERRUPT = 0x21,
                TLK_CITADEL_OPEN_SHOP = 0x22,
                TLK_CITADEL_INTERACT_WITH_ABILITY = 0x23,
                TLK_CITADEL_ULTIMATE_READY = 0x24,
                TLK_CITADEL_NEUTRAL_IDLE = 0x25,
                TLK_CITADEL_NEUTRAL_AGGRO = 0x26,
                TLK_CITADEL_ALLY_KILLED = 0x27,
                TLK_CITADEL_ENEMY_PICKED_UP_REJUVENATOR = 0x28,
                TLK_CITADEL_PARRY = 0x29,
                TLK_CITADEL_CAST_FINISH = 0x2A,
                TLK_CITADEL_CAST_TARGET_VICTIM = 0x2B,
                TLK_CITADEL_CAST_FINISH_VICTIM = 0x2C,
                TLK_CITADEL_PROJECTILE_HIT = 0x2D,
                TLK_CITADEL_HIT_BY_PROJECTILE = 0x2E,
                TLK_CITADEL_DROP_ITEM = 0x2F,
                TLK_CITADEL_HEALED = 0x30,
                TLK_CITADEL_OBSERVE_CAST = 0x31,
                TLK_CITADEL_OBSERVE_CAST_FINISH = 0x32,
                TLK_CITADEL_OBSERVE_PROJECTILE_HIT = 0x33,
                TLK_CITADEL_PING = 0x34,
                TLK_CITADEL_MOVEMENT_EFFORT = 0x35,
                TLK_CITADEL_ANN_BEGIN_REGEN = 0x36,
                TLK_CITADEL_ANN_MIDBOSS_SPAWN = 0x37,
                TLK_CITADEL_ANN_MIDBOSS_KILLED = 0x38,
                TLK_CITADEL_ANN_ENEMY_DETECTED = 0x39,
                TLK_CITADEL_ANN_REJUVINATOR = 0x3A,
                TLK_CITADEL_ANN_DEFEAT = 0x3B,
                TLK_CITADEL_ANN_VICTORY = 0x3C,
                TLK_CITADEL_ANN_PICKUP_ITEM = 0x3D,
                TLK_CITADEL_ANN_DROP_ITEM = 0x3E,
                TLK_CITADEL_ANN_IDOL = 0x3F,
                TLK_CITADEL_ANN_TEAM_LANE_BOSS_ATTACKED = 0x40,
                TLK_CITADEL_ANN_TEAM_BASE_BOSS_ATTACKED = 0x41,
                TLK_CITADEL_ANN_ENEMY_LANE_BOSS_ATTACKED = 0x42,
                TLK_CITADEL_ANN_ENEMY_BASE_BOSS_ATTACKED = 0x43,
                TLK_CITADEL_ANN_TEAM_LANE_BOSS_DESTROYED = 0x44,
                TLK_CITADEL_ANN_TEAM_BASE_BOSS_DESTROYED = 0x45,
                TLK_CITADEL_ANN_ENEMY_LANE_BOSS_DESTROYED = 0x46,
                TLK_CITADEL_ANN_ENEMY_BASE_BOSS_DESTROYED = 0x47,
                TLK_CITADEL_ANN_KILL = 0x48,
                TLK_CITADEL_ANN_KILL_STREAK = 0x49,
                TLK_CITADEL_ANN_COMMEND_HERO = 0x4A,
                TLK_CITADEL_ANN_GUIDED_BOT_MATCH = 0x4B,
                CITADEL_CONCEPT_COUNT = 0x4C
            };
            // Alignment: 4
            // Member count: 5
            enum class AI_Motor_MovementFacingModeRequestSource_t : uint32_t {
                eLevelScript = 0x0,
                eSmartGoal = 0x1,
                eSchedule = 0x2,
                eDefault = 0x3,
                eCount = 0x4
            };
            // Alignment: 4
            // Member count: 6
            enum class HierarchyType_t : uint32_t {
                HIERARCHY_NONE = 0x0,
                HIERARCHY_BONE_MERGE = 0x1,
                HIERARCHY_ATTACHMENT = 0x2,
                HIERARCHY_ABSORIGIN = 0x3,
                HIERARCHY_BONE = 0x4,
                HIERARCHY_TYPE_COUNT = 0x5
            };
            // Alignment: 4
            // Member count: 12
            enum class PARTICLE_SYSTEM_MANAGER_MESSAGE : uint32_t {
                PARTICLE_SYSTEM_MANAGER_EVENT_CREATE = 0x0,
                PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY = 0x1,
                PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY_INVOLVING = 0x2,
                PARTICLE_SYSTEM_MANAGER_EVENT_RELEASE = 0x3,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE = 0x4,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FORWARD = 0x5,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ORIENTATION = 0x6,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FALLBACK = 0x7,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ENT = 0x8,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_OFFSET = 0x9,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FROZEN = 0xA,
                PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_SHOULD_DRAW = 0xB
            };
            // Alignment: 4
            // Member count: 3
            enum class EHUDElementButtonType_t : uint32_t {
                EButtonHintType_SingleButton = 0x0,
                EButtonHintType_TwoDifferentButtons = 0x1,
                EButtonHintType_TwoButtonCombo = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class doorCheck_e : uint32_t {
                DOOR_CHECK_FORWARD = 0x0,
                DOOR_CHECK_BACKWARD = 0x1,
                DOOR_CHECK_FULL = 0x2
            };
            // Alignment: 4
            // Member count: 7
            enum class BeamType_t : uint32_t {
                BEAM_INVALID = 0x0,
                BEAM_POINTS = 0x1,
                BEAM_ENTPOINT = 0x2,
                BEAM_ENTS = 0x3,
                BEAM_HOSE = 0x4,
                BEAM_SPLINE = 0x5,
                BEAM_LASER = 0x6
            };
            // Alignment: 4
            // Member count: 2
            enum class CCitadelModifierSpeaker_t : uint32_t {
                MODIFIER_RR_SPEAKER_PARENT = 0x0,
                MODIFIER_RR_SPEAKER_CASTER = 0x1
            };
            // Alignment: 4
            // Member count: 5
            enum class CMsgLaneColor : uint32_t {
                k_ELaneColor_Invalid = 0x0,
                k_ELaneColor_Yellow = 0x1,
                k_ELaneColor_Green = 0x3,
                k_ELaneColor_Blue = 0x4,
                k_ELaneColor_Purple = 0x6
            };
            // Alignment: 1
            // Member count: 6
            enum class UnitFilterResult : uint8_t {
                UF_SUCCESS = 0x0,
                UF_FAIL_INVALID_LOCATION = 0x1,
                UF_FAIL_INVALID_TEAM = 0x2,
                UF_FAIL_INVALID_TYPE = 0x3,
                UF_FAIL_INVALID_ENTITY = 0x4,
                UF_FAIL_INVALID_FLAGS = 0x5
            };
            // Alignment: 4
            // Member count: 2
            enum class ESourceEngine : uint32_t {
                k_ESE_Source1 = 0x0,
                k_ESE_Source2 = 0x1
            };
            // Alignment: 4
            // Member count: 5
            enum class ReplayEventType_t : uint32_t {
                REPLAY_EVENT_CANCEL = 0x0,
                REPLAY_EVENT_DEATH = 0x1,
                REPLAY_EVENT_GENERIC = 0x2,
                REPLAY_EVENT_STUCK_NEED_FULL_UPDATE = 0x3,
                REPLAY_EVENT_VICTORY = 0x4
            };
            // Alignment: 4
            // Member count: 12
            enum class EProgressType_t : uint32_t {
                EProgress_None = 0x0,
                EProgress_Opacity = 0x1,
                EProgress_OffsetLeft = 0x2,
                EProgress_OffsetRight = 0x3,
                EProgress_OffsetUp = 0x4,
                EProgress_OffsetDown = 0x5,
                EProgress_FillLeft = 0x6,
                EProgress_FillRight = 0x7,
                EProgress_FillUp = 0x8,
                EProgress_FillDown = 0x9,
                EProgress_RadialCW = 0xA,
                EProgress_RadialCCW = 0xB
            };
            // Alignment: 4
            // Member count: 5
            enum class EPreviewStatFlags : uint32_t {
                EPreviewFlag_None = 0x0,
                EPreviewFlag_WithPreviewItem = 0x1,
                EPreviewFlag_WithTierBonuses = 0x2,
                EPreviewFlag_WithPreviewItemConditionals = 0x4,
                EPreviewFlag_OnlyTierBonuses = 0x8
            };
            // Alignment: 1
            // Member count: 2
            enum class AI_ScheduleFacingTargetPriority_t : uint8_t {
                eDefault = 0x0,
                eTaskBlocking = 0x1
            };
            // Alignment: 4
            // Member count: 5
            enum class EFeatureBanReason : uint32_t {
                k_eFeatureBanReason_Invalid = 0x0,
                k_eFeatureBanReason_DevCommand = 0x1,
                k_eFeatureBanReason_PlayerReports = 0x2,
                k_eFeatureBanReason_MatchAbandons = 0x3,
                k_eFeatureBanReason_ExcessivePlayerReports = 0x4
            };
            // Alignment: 4
            // Member count: 8
            enum class EntitySubclassScope_t : uint32_t {
                SUBCLASS_SCOPE_NONE = 0xFFFFFFFFFFFFFFFF,
                SUBCLASS_SCOPE_MISC = 0x0,
                SUBCLASS_SCOPE_PRECIPITATION = 0x1,
                SUBCLASS_SCOPE_MODIFIERS = 0x2,
                SUBCLASS_SCOPE_NPC_UNITS = 0x3,
                SUBCLASS_SCOPE_ABILITIES = 0x4,
                SUBCLASS_SCOPE_SCALE_FUNCTIONS = 0x5,
                SUBCLASS_SCOPE_COUNT = 0x6
            };
            // Alignment: 4
            // Member count: 3
            enum class HintIgnoreFacing_t : uint32_t {
                HIF_NO = 0x0,
                HIF_YES = 0x1,
                HIF_DEFAULT = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class EClimbRopeState_t : uint32_t {
                ERopeClimb_None = 0x0,
                ERopeClimb_Latching = 0x1,
                ERopeClimb_Attached = 0x2,
                ERopeClimb_Count = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class EMaxSpeedState : uint32_t {
                NORMAL = 0x0,
                SLOWED = 0x1,
                BUFFED = 0x2
            };
            // Alignment: 4
            // Member count: 2
            enum class PointTemplateClientOnlyEntityBehavior_t : uint32_t {
                CREATE_FOR_CURRENTLY_CONNECTED_CLIENTS_ONLY = 0x0,
                CREATE_FOR_CLIENTS_WHO_CONNECT_LATER = 0x1
            };
            // Alignment: 4
            // Member count: 3
            enum class CDebugOverlayCombinedTypes_t : uint32_t {
                ALL = 0x0,
                ANY = 0x1,
                COUNT = 0x2
            };
            // Alignment: 1
            // Member count: 4
            enum class ShatterGlassStressType : uint8_t {
                SHATTERGLASS_BLUNT = 0x0,
                SHATTERGLASS_BALLISTIC = 0x1,
                SHATTERGLASS_PULSE = 0x2,
                SHATTERGLASS_EXPLOSIVE = 0x3
            };
            // Alignment: 4
            // Member count: 4
            enum class CCitadelPlayerPawn_GraphController2_EZiplineState : uint32_t {
                EZiplineState_NOZIPLINE = 0x0,
                ESelectedAbility_AWAITINGTETHER = 0x1,
                ESelectedAbility_LATCHEDANDREELING = 0x2,
                ESelectedAbility_ATTACHEDTOZIPLINE = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class TrackOrientationType_t : uint32_t {
                TrackOrientation_Fixed = 0x0,
                TrackOrientation_FacePath = 0x1,
                TrackOrientation_FacePathAngles = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class EPlayerPlayState : uint32_t {
                EPlayerStateInvalid = 0xFFFFFFFFFFFFFFFF,
                EPlayerActive = 0x0,
                EPlayerAwaitingHeroAssignment = 0x1,
                EPlayerChoosingHero = 0x2,
                EPlayerPlayStateCount = 0x3
            };
            // Alignment: 4
            // Member count: 49
            enum class eEconItemOrigin : uint32_t {
                kEconItemOrigin_Invalid = 0xFFFFFFFFFFFFFFFF,
                kEconItemOrigin_Drop = 0x0,
                kEconItemOrigin_Achievement = 0x1,
                kEconItemOrigin_Purchased = 0x2,
                kEconItemOrigin_Traded = 0x3,
                kEconItemOrigin_Crafted = 0x4,
                kEconItemOrigin_StorePromotion = 0x5,
                kEconItemOrigin_Gifted = 0x6,
                kEconItemOrigin_SupportGranted = 0x7,
                kEconItemOrigin_FoundInCrate = 0x8,
                kEconItemOrigin_Earned = 0x9,
                kEconItemOrigin_ThirdPartyPromotion = 0xA,
                kEconItemOrigin_GiftWrapped = 0xB,
                kEconItemOrigin_HalloweenDrop = 0xC,
                kEconItemOrigin_PackageItem = 0xD,
                kEconItemOrigin_Foreign = 0xE,
                kEconItemOrigin_CDKey = 0xF,
                kEconItemOrigin_CollectionReward = 0x10,
                kEconItemOrigin_PreviewItem = 0x11,
                kEconItemOrigin_SteamWorkshopContribution = 0x12,
                kEconItemOrigin_PeriodicScoreReward = 0x13,
                kEconItemOrigin_Recycling = 0x14,
                kEconItemOrigin_TournamentDrop = 0x15,
                kEconItemOrigin_PassportReward = 0x16,
                kEconItemOrigin_TutorialDrop = 0x17,
                kEconItemOrigin_RecipeOutput = 0x18,
                kEconItemOrigin_GemExtract = 0x19,
                kEconItemOrigin_EventPointReward = 0x1A,
                kEconItemOrigin_ItemRedemption = 0x1B,
                kEconItemOrigin_FantasyTicketRefund = 0x1C,
                kEconItemOrigin_VictoryPredictionReward = 0x1D,
                kEconItemOrigin_AssassinEventReward = 0x1E,
                kEconItemOrigin_CompendiumReward = 0x1F,
                kEconItemOrigin_CompendiumDrop = 0x20,
                kEconItemOrigin_MysteryItem = 0x21,
                kEconItemOrigin_UnpackedFromBundle = 0x22,
                kEconItemOrigin_WonFromWeeklyGame = 0x23,
                kEconItemOrigin_SeasonalItemGrant = 0x24,
                kEconItemOrigin_PackOpening = 0x25,
                kEconItemOrigin_InitialGrant = 0x26,
                kEconItemOrigin_MarketPurchase = 0x27,
                kEconItemOrigin_MarketRefunded = 0x28,
                kEconItemOrigin_LimitedDraft = 0x29,
                kEconItemOrigin_GauntletReward = 0x2A,
                kEconItemOrigin_CompendiumGift = 0x2B,
                kEconItemOrigin_CandyShopPurchase = 0x2C,
                kEconItemOrigin_Transmuted = 0x2D,
                kEconItemOrigin_PruchaseWithCharges = 0x2E,
                kEconItemOrigin_Max = 0x2F
            };
            // Alignment: 4
            // Member count: 5
            enum class CameraOperation : uint32_t {
                k_ECameraOp_Maintain = 0x2,
                k_ECameraOp_Approach = 0x3,
                k_ECameraOp_Spring = 0x4,
                k_ECameraOp_Lerp = 0x5,
                k_ECameraOp_Lag = 0x6
            };
            // Alignment: 4
            // Member count: 3
            enum class AI_BaseNPC_StopType_t : uint32_t {
                eNone = 0x0,
                eMoving = 0x1,
                eInstant = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class AI_MovementHeadingSmoothingMode_t : uint32_t {
                eNone = 0x0,
                eSpring = 0x1,
                eConstant = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class WeaponSwitchReason_t : uint32_t {
                eDrawn = 0x0,
                eEquipped = 0x1,
                eUserInitiatedSwitchToLast = 0x2,
                eUserInitiatedUIKeyPress = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class ValueRemapperRatchetType_t : uint32_t {
                RatchetType_Absolute = 0x0,
                RatchetType_EachEngage = 0x1
            };
            // Alignment: 4
            // Member count: 5
            enum class NavDirType : uint32_t {
                NORTH = 0x0,
                EAST = 0x1,
                SOUTH = 0x2,
                WEST = 0x3,
                NUM_NAV_DIR_TYPE_DIRECTIONS = 0x4
            };
            // Alignment: 2
            // Member count: 27
            enum class EAbilitySlots_t : uint16_t {
                ESlot_Invalid = 0xFFFFFFFFFFFFFFFF,
                ESlot_Signature_First = 0x0,
                ESlot_Signature_1 = 0x0,
                ESlot_Signature_2 = 0x1,
                ESlot_Signature_3 = 0x2,
                ESlot_Signature_4 = 0x3,
                ESlot_ActiveItem_First = 0x4,
                ESlot_ActiveItem_1 = 0x4,
                ESlot_ActiveItem_2 = 0x5,
                ESlot_ActiveItem_3 = 0x6,
                ESlot_ActiveItem_4 = 0x7,
                ESlot_Ability_Held = 0x8,
                ESlot_Ability_ZipLine = 0x9,
                ESlot_Ability_Mantle = 0xA,
                ESlot_Ability_ClimbRope = 0xB,
                ESlot_Ability_Jump = 0xC,
                ESlot_Ability_Slide = 0xD,
                ESlot_Ability_Teleport = 0xE,
                ESlot_Ability_ZipLineBoost = 0xF,
                ESlot_Ability_Innate_1 = 0x10,
                ESlot_Ability_Innate_2 = 0x11,
                ESlot_Ability_Innate_3 = 0x12,
                ESlot_Weapon_Secondary = 0x13,
                ESlot_Weapon_Primary = 0x14,
                ESlot_Weapon_Melee = 0x15,
                ESlot_None = 0x16,
                EMaxAbilitySlots = 0x16
            };
            // Alignment: 4
            // Member count: 3
            enum class PartnerAccountType : uint32_t {
                PARTNER_NONE = 0x0,
                PARTNER_PERFECT_WORLD = 0x1,
                PARTNER_INVALID = 0x3
            };
            // Alignment: 4
            // Member count: 16
            enum class ECitadelTeamObjective : uint32_t {
                k_eCitadelTeamObjective_Core = 0x0,
                k_eCitadelTeamObjective_Tier1_Lane1 = 0x1,
                k_eCitadelTeamObjective_Tier1_Lane2 = 0x2,
                k_eCitadelTeamObjective_Tier1_Lane3 = 0x3,
                k_eCitadelTeamObjective_Tier1_Lane4 = 0x4,
                k_eCitadelTeamObjective_Tier2_Lane1 = 0x5,
                k_eCitadelTeamObjective_Tier2_Lane2 = 0x6,
                k_eCitadelTeamObjective_Tier2_Lane3 = 0x7,
                k_eCitadelTeamObjective_Tier2_Lane4 = 0x8,
                k_eCitadelTeamObjective_Titan = 0x9,
                k_eCitadelTeamObjective_TitanShieldGenerator_1 = 0xA,
                k_eCitadelTeamObjective_TitanShieldGenerator_2 = 0xB,
                k_eCitadelTeamObjective_BarrackBoss_Lane1 = 0xC,
                k_eCitadelTeamObjective_BarrackBoss_Lane2 = 0xD,
                k_eCitadelTeamObjective_BarrackBoss_Lane3 = 0xE,
                k_eCitadelTeamObjective_BarrackBoss_Lane4 = 0xF
            };
            // Alignment: 4
            // Member count: 14
            enum class AI_NavGoalFlags_t : uint32_t {
                eYawToDest = 0x1,
                eDisableUpdateGoalPos = 0x2,
                eLocalSucceedOnWithinTolerance = 0x4,
                eGoalOffsetInLocalYaw = 0x8,
                eGoalOffsetInLocalSpace = 0x10,
                eDestInWorldSpace = 0x20,
                eDontLimitGoalOffset = 0x40,
                eInterruptPath = 0x80,
                eDisablePathSmoothing = 0x100,
                eClearGoalOffsetOnRepathForMovement = 0x200,
                eUseTargetPredictedPosition = 0x400,
                eDisableTargetPredictedPositionForDynamicPathing = 0x800,
                eDisableStopAtGoal = 0x1000,
                eDefault = 0x0
            };
            // Alignment: 4
            // Member count: 24
            enum class EGCBaseMsg : uint32_t {
                k_EMsgGCInviteToParty = 0x1195,
                k_EMsgGCInvitationCreated = 0x1196,
                k_EMsgGCPartyInviteResponse = 0x1197,
                k_EMsgGCKickFromParty = 0x1198,
                k_EMsgGCLeaveParty = 0x1199,
                k_EMsgGCServerAvailable = 0x119A,
                k_EMsgGCClientConnectToServer = 0x119B,
                k_EMsgGCGameServerInfo = 0x119C,
                k_EMsgGCLANServerAvailable = 0x119F,
                k_EMsgGCInviteToLobby = 0x11A0,
                k_EMsgGCLobbyInviteResponse = 0x11A1,
                k_EMsgGCToClientPollFileRequest = 0x11A2,
                k_EMsgGCToClientPollFileResponse = 0x11A3,
                k_EMsgGCToGCPerformManualOp = 0x11A4,
                k_EMsgGCToGCPerformManualOpCompleted = 0x11A5,
                k_EMsgGCToGCReloadServerRegionSettings = 0x11A6,
                k_EMsgGCAdditionalWelcomeMsgList = 0x11A7,
                k_EMsgGCToClientApplyRemoteConVars = 0x11A8,
                k_EMsgGCToServerApplyRemoteConVars = 0x11A9,
                k_EMsgClientToGCIntegrityStatus = 0x11AA,
                k_EMsgClientToGCAggregateMetrics = 0x11AB,
                k_EMsgGCToClientAggregateMetricsBackoff = 0x11AC,
                k_EMsgGCToServerSteamLearnAccessTokensChanged = 0x11AD,
                k_EMsgGCToServerSteamLearnUseHTTP = 0x11AE
            };
            // Alignment: 4
            // Member count: 2
            enum class CRR_Response__ResponseEnum_t : uint32_t {
                MAX_RESPONSE_NAME = 0xC0,
                MAX_RULE_NAME = 0x80
            };
            // Alignment: 4
            // Member count: 3
            enum class ESprintAnimState : uint32_t {
                IN_COMBAT_RUN = 0x0,
                OUT_OF_COMBAT_RUN = 0x1,
                OUT_OF_COMBAT_SPRINT = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class EFlinchType : uint32_t {
                NONE = 0x0,
                BACK = 0x1,
                RIGHT = 0x2,
                LEFT = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class EModifierScriptVariantType : uint32_t {
                MODIFIER_SCRIPT_VARIANT_MODIFIER_FLOAT = 0x0,
                MODIFIER_SCRIPT_VARIANT_MODEL = 0x1,
                MODIFIER_SCRIPT_VARIANT_PARTICLE = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class CCitadelPlayerPawn_GraphController2_EFullBodySequence : uint32_t {
                EFullBodySequence_NONE = 0x0,
                EFullBodySequence_MANTLE_32 = 0x1,
                EFullBodySequence_MANTLE_64 = 0x2,
                EFullBodySequence_MANTLE_96 = 0x3,
                EFullBodySequence_MANTLE_128 = 0x4
            };
            // Alignment: 4
            // Member count: 4
            enum class ECitadelGameMode : uint32_t {
                k_ECitadelGameMode_Invalid = 0x0,
                k_ECitadelGameMode_Normal = 0x1,
                k_ECitadelGameMode_1v1Test = 0x2,
                k_ECitadelGameMode_Sandbox = 0x3
            };
            // Alignment: 1
            // Member count: 20
            enum class RenderFx_t : uint8_t {
                kRenderFxNone = 0x0,
                kRenderFxPulseSlow = 0x1,
                kRenderFxPulseFast = 0x2,
                kRenderFxPulseSlowWide = 0x3,
                kRenderFxPulseFastWide = 0x4,
                kRenderFxFadeSlow = 0x5,
                kRenderFxFadeFast = 0x6,
                kRenderFxSolidSlow = 0x7,
                kRenderFxSolidFast = 0x8,
                kRenderFxStrobeSlow = 0x9,
                kRenderFxStrobeFast = 0xA,
                kRenderFxStrobeFaster = 0xB,
                kRenderFxFlickerSlow = 0xC,
                kRenderFxFlickerFast = 0xD,
                kRenderFxNoDissipation = 0xE,
                kRenderFxFadeOut = 0xF,
                kRenderFxFadeIn = 0x10,
                kRenderFxPulseFastWider = 0x11,
                kRenderFxGlowShell = 0x12,
                kRenderFxMax = 0x13
            };
            // Alignment: 4
            // Member count: 16
            enum class vote_create_failed_t : uint32_t {
                VOTE_FAILED_GENERIC = 0x0,
                VOTE_FAILED_TRANSITIONING_PLAYERS = 0x1,
                VOTE_FAILED_RATE_EXCEEDED = 0x2,
                VOTE_FAILED_YES_MUST_EXCEED_NO = 0x3,
                VOTE_FAILED_QUORUM_FAILURE = 0x4,
                VOTE_FAILED_ISSUE_DISABLED = 0x5,
                VOTE_FAILED_MAP_NOT_FOUND = 0x6,
                VOTE_FAILED_MAP_NAME_REQUIRED = 0x7,
                VOTE_FAILED_FAILED_RECENTLY = 0x8,
                VOTE_FAILED_TEAM_CANT_CALL = 0x9,
                VOTE_FAILED_WAITINGFORPLAYERS = 0xA,
                VOTE_FAILED_PLAYERNOTFOUND = 0xB,
                VOTE_FAILED_CANNOT_KICK_ADMIN = 0xC,
                VOTE_FAILED_SCRAMBLE_IN_PROGRESS = 0xD,
                VOTE_FAILED_SPECTATOR = 0xE,
                VOTE_FAILED_MAX = 0xF
            };
            // Alignment: 4
            // Member count: 27
            enum class RumbleEffect_t : uint32_t {
                RUMBLE_INVALID = 0xFFFFFFFFFFFFFFFF,
                RUMBLE_STOP_ALL = 0x0,
                RUMBLE_PISTOL = 0x1,
                RUMBLE_357 = 0x2,
                RUMBLE_SMG1 = 0x3,
                RUMBLE_AR2 = 0x4,
                RUMBLE_SHOTGUN_SINGLE = 0x5,
                RUMBLE_SHOTGUN_DOUBLE = 0x6,
                RUMBLE_AR2_ALT_FIRE = 0x7,
                RUMBLE_RPG_MISSILE = 0x8,
                RUMBLE_CROWBAR_SWING = 0x9,
                RUMBLE_AIRBOAT_GUN = 0xA,
                RUMBLE_JEEP_ENGINE_LOOP = 0xB,
                RUMBLE_FLAT_LEFT = 0xC,
                RUMBLE_FLAT_RIGHT = 0xD,
                RUMBLE_FLAT_BOTH = 0xE,
                RUMBLE_DMG_LOW = 0xF,
                RUMBLE_DMG_MED = 0x10,
                RUMBLE_DMG_HIGH = 0x11,
                RUMBLE_FALL_LONG = 0x12,
                RUMBLE_FALL_SHORT = 0x13,
                RUMBLE_PHYSCANNON_OPEN = 0x14,
                RUMBLE_PHYSCANNON_PUNT = 0x15,
                RUMBLE_PHYSCANNON_LOW = 0x16,
                RUMBLE_PHYSCANNON_MEDIUM = 0x17,
                RUMBLE_PHYSCANNON_HIGH = 0x18,
                NUM_RUMBLE_EFFECTS = 0x19
            };
            // Alignment: 4
            // Member count: 6
            enum class LatchDirtyPermission_t : uint32_t {
                LATCH_DIRTY_DISALLOW = 0x0,
                LATCH_DIRTY_SERVER_CONTROLLED = 0x1,
                LATCH_DIRTY_CLIENT_SIMULATED = 0x2,
                LATCH_DIRTY_PREDICTION = 0x3,
                LATCH_DIRTY_FRAMESIMULATE = 0x4,
                LATCH_DIRTY_PARTICLE_SIMULATE = 0x5
            };
            // Alignment: 4
            // Member count: 5
            enum class DoorState_t : uint32_t {
                DOOR_STATE_CLOSED = 0x0,
                DOOR_STATE_OPENING = 0x1,
                DOOR_STATE_OPEN = 0x2,
                DOOR_STATE_CLOSING = 0x3,
                DOOR_STATE_AJAR = 0x4
            };
            // Alignment: 4
            // Member count: 3
            enum class AbilityPropertyUsageFlag_t : uint32_t {
                APUsageFlag_NONE = 0x0,
                APUsageFlag_ModifierIntrinsic = 0x1,
                APUsageFlag_ModifierConditional = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class AbilitySectionType_t : uint32_t {
                EArea_Innate = 0x0,
                EArea_Passive = 0x1,
                EArea_Active = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class EMeleeHold_AttackType : uint32_t {
                EAttackType_None = 0x0,
                EAttackType_Light = 0x1,
                EAttackType_Heavy = 0x2,
                EAttackType_HeavyAir = 0x3,
                EAttackType_Slide = 0x4
            };
            // Alignment: 4
            // Member count: 75
            enum class EModifierEvent : uint32_t {
                MODIFIER_EVENT_PRE_DAMAGE_TAKEN_BROADCAST = 0x0,
                MODIFIER_EVENT_DAMAGE_TAKEN_BROADCAST = 0x1,
                MODIFIER_EVENT_HEALTH_TAKEN_BROADCAST = 0x2,
                MODIFIER_EVENT_KILLED_BROADCAST = 0x3,
                MODIFIER_EVENT_RAGDOLL_CREATED_BROADCAST = 0x4,
                MODIFIER_EVENT_PROP_BROKE_BROADCAST = 0x5,
                MODIFIER_EVENT_PLAYER_KILLED_BROADCAST = 0x6,
                MODIFIER_EVENT_NPC_KILLED_BROADCAST = 0x7,
                MODIFIER_EVENT_DISJOINT_TRACKING_BROADCAST = 0x8,
                MODIFIER_EVENT_ABILITY_GAINED_BROADCAST = 0x9,
                MODIFIER_EVENT_TIME_SCALE_CHANGED_BROADCAST = 0xA,
                MODIFIER_EVENT_UNIT_SHIELD_ABSORBED_DAMAGE_BROADCAST = 0xB,
                MODIFIER_EVENT_ABILITY_EXECUTED_BROADCAST = 0xC,
                MODIFIER_EVENT_BROADCAST_EVENT_COUNT = 0xD,
                MODIFIER_EVENT_MODIFIER_GAINED = 0xD,
                MODIFIER_EVENT_MODIFIER_LOST = 0xE,
                MODIFIER_EVENT_SCRIPTED_EVENT = 0xF,
                MODIFIER_EVENT_PRE_DAMAGE_TAKEN = 0x10,
                MODIFIER_EVENT_DAMAGE_TAKEN = 0x11,
                MODIFIER_EVENT_KILLED = 0x12,
                MODIFIER_EVENT_HEALTH_TAKEN = 0x13,
                MODIFIER_EVENT_PARENT_ACTIVATED = 0x14,
                MODIFIER_EVENT_MODEL_CHANGED = 0x15,
                MODIFIER_EVENT_START_TOUCH = 0x16,
                MODIFIER_EVENT_ABILITY_CAST_STARTED = 0x17,
                MODIFIER_EVENT_ABILITY_EXECUTED = 0x18,
                MODIFIER_EVENT_ABILITY_SELECTED = 0x19,
                MODIFIER_EVENT_ABILITY_ADDED = 0x1A,
                MODIFIER_EVENT_ITEM_REMOVED = 0x1B,
                MODIFIER_EVENT_GUN_FIRED = 0x1C,
                MODIFIER_EVENT_BULLET_CREATED = 0x1D,
                MODIFIER_EVENT_BULLET_HIT = 0x1E,
                MODIFIER_EVENT_ABILITY_AS_BULLET_HIT = 0x1F,
                MODIFIER_EVENT_FIRED_LAST_SHOT_IN_CLIP = 0x20,
                MODIFIER_EVENT_CANCEL_MODIFIERS_UNASSOCIATED_WITH_CASTER_ABILITIES = 0x21,
                MODIFIER_EVENT_ON_PRE_ABILITY_CHANNEL_STARTED = 0x22,
                MODIFIER_EVENT_ON_ABILITY_CHANNEL_FINISHED = 0x23,
                MODIFIER_EVENT_PLAYER_KILLED = 0x24,
                MODIFIER_EVENT_NPC_KILLED = 0x25,
                MODIFIER_EVENT_LANDED_ON_GROUND = 0x26,
                MODIFIER_EVENT_ATTACHED_TO_ZIPLINE = 0x27,
                MODIFIER_EVENT_FIRED_LAST_SHOT_IN_BURST = 0x28,
                MODIFIER_EVENT_BULLET_REMOVED = 0x29,
                MODIFIER_EVENT_ATTACK_REFLECTED = 0x2A,
                MODIFIER_EVENT_PLAYER_GROUND_DASH_STARTED = 0x2B,
                MODIFIER_EVENT_PLAYER_GROUND_DASH_FINISHED = 0x2C,
                MODIFIER_EVENT_PLAYER_RELOAD_STARTED = 0x2D,
                MODIFIER_EVENT_PLAYER_RELOAD_FINISHED = 0x2E,
                MODIFIER_EVENT_UNIT_HEALED = 0x2F,
                MODIFIER_EVENT_PRE_OWNER_TAKE_ADJUSTED_DAMAGE = 0x30,
                MODIFIER_EVENT_UNIT_SHIELD_REMOVED = 0x31,
                MODIFIER_EVENT_UNIT_SHIELD_ABSORBED_DAMAGE = 0x32,
                MODIFIER_EVENT_PLAYER_PURCHASED_ITEM = 0x33,
                MODIFIER_EVENT_ADD_ABILITY_BONUS = 0x34,
                MODIFIER_EVENT_ABILITY_INTERRUPTED = 0x35,
                MODIFIER_EVENT_PLAYER_ENTERED_FOUNTAIN = 0x36,
                MODIFIER_EVENT_BOUNCE_PAD_ACTIVATED = 0x37,
                MODIFIER_EVENT_PLAYER_RESPAWNED = 0x38,
                MODIFIER_EVENT_DASH_JUMP_EXECUTED = 0x39,
                MODIFIER_EVENT_AIR_JUMP_EXECUTED = 0x3A,
                MODIFIER_EVENT_CHECK_FOR_PARRY = 0x3B,
                MODIFIER_EVENT_HERO_LEVEL_CHANGED = 0x3C,
                MODIFIER_EVENT_PRE_FATAL_DAMAGE = 0x3D,
                MODIFIER_EVENT_OVERRIDE_SHOT_PARAMS = 0x3E,
                MODIFIER_EVENT_ABILITY_TRIGGER_ACTIVATED = 0x3F,
                MODIFIER_EVENT_VISCOUS_CUBE_DESTROYED = 0x40,
                MODIFIER_EVENT_ABILITY_DASHCAST_HIT = 0x41,
                MODIFIER_EVENT_ABILITY_DASHCAST_MISS = 0x42,
                MODIFIER_EVENT_PRE_BULLET_FIRED = 0x43,
                MODIFIER_EVENT_BULLET_EVADED = 0x44,
                MODIFIER_EVENT_MELEE_ATTACK = 0x45,
                MODIFIER_EVENT_PLAYER_MOVE_COLLIDE = 0x46,
                MODIFIER_EVENT_ORB_CLAIMED = 0x47,
                MODIFIER_EVENT_COUNT = 0x48,
                MODIFIER_EVENT_INVALID = 0xFF
            };
            // Alignment: 4
            // Member count: 4
            enum class ChoreoLookAtMode_t : uint32_t {
                eInvalid = 0xFFFFFFFFFFFFFFFF,
                eChest = 0x0,
                eHead = 0x1,
                eEyesOnly = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class ChatIgnoreType_t : uint32_t {
                CHAT_IGNORE_NONE = 0x0,
                CHAT_IGNORE_ALL = 0x1,
                CHAT_IGNORE_TEAM = 0x2
            };
            // Alignment: 1
            // Member count: 4
            enum class EJumpType_t : uint8_t {
                EJumpType_Ground = 0x0,
                EJumpType_Air = 0x1,
                EJumpType_Wall = 0x2,
                EJumpType_DashJump = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class ProjectileShape_t : uint32_t {
                Sphere = 0x0,
                Capsule = 0x1
            };
            // Alignment: 4
            // Member count: 7
            enum class PlayerConnectedState : uint32_t {
                PlayerNeverConnected = 0xFFFFFFFFFFFFFFFF,
                PlayerConnected = 0x0,
                PlayerConnecting = 0x1,
                PlayerReconnecting = 0x2,
                PlayerDisconnecting = 0x3,
                PlayerDisconnected = 0x4,
                PlayerReserved = 0x5
            };
            // Alignment: 4
            // Member count: 2
            enum class EAbilityResourceType : uint32_t {
                EResourceType_None = 0x0,
                EResourceType_Rage = 0x1
            };
            // Alignment: 4
            // Member count: 6
            enum class ModifierOverheadDrawType_t : uint32_t {
                OVERHEAD_DRAW_NEVER = 0x0,
                OVERHEAD_DRAW_FOR_EVERYONE = 0x1,
                OVERHEAD_DRAW_FOR_CASTER_ONLY = 0x2,
                OVERHEAD_DRAW_FOR_CASTER_TEAM_ONLY = 0x3,
                OVERHEAD_DRAW_FOR_PARENT_TEAM_ONLY = 0x4,
                OVERHEAD_DRAW_OWNERS_OF_APPLYING_ABILITY = 0x5
            };
            // Alignment: 4
            // Member count: 3
            enum class SimpleConstraintSoundProfile__SimpleConstraintsSoundProfileKeypoints_t : uint32_t {
                kMIN_THRESHOLD = 0x0,
                kMIN_FULL = 0x1,
                kHIGHWATER = 0x2
            };
            // Alignment: 4
            // Member count: 7
            enum class CameraParam : uint32_t {
                k_EParam_ClearAllOps = 0x0,
                k_EParam_ClearAllOpsForContext = 0x1,
                k_EParam_Distance = 0x2,
                k_EParam_FOV = 0x3,
                k_EParam_TargetPosition = 0x4,
                k_EParam_VertOffset = 0x5,
                k_EParam_HorizOffset = 0x6
            };
            // Alignment: 4
            // Member count: 1
            enum class navproperties_t : uint32_t {
                NAV_IGNORE = 0x1
            };
            // Alignment: 4
            // Member count: 11
            enum class Flinch_DamageClasses_t : uint32_t {
                AGE_DMG_INVALID = 0xFFFFFFFFFFFFFFFF,
                AGE_DMG_LIGHT = 0x0,
                AGE_DMG_HEAVY = 0x1,
                AGE_DMG_BLAST = 0x2,
                AGE_DMG_PHYSICS = 0x3,
                AGE_DMG_MELEE = 0x4,
                AGE_DMG_SHOCK = 0x5,
                AGE_DMG_BURN = 0x6,
                AGE_DMG_SONIC_SECONDARY = 0x7,
                AGE_DMG_SONIC_PRIMARY = 0x8,
                AGE_DMG_NEWTON = 0x9
            };
            // Alignment: 4
            // Member count: 210
            enum class EModifierValue : uint32_t {
                MODIFIER_VALUE_MATERIAL_OVERRIDE = 0x0,
                MODIFIER_VALUE_PROC_BUILDUP_PERCENTAGE = 0x1,
                MODIFIER_VALUE_FRICTION_PERCENTAGE = 0x2,
                MODIFIER_VALUE_BASE_VELOCITY = 0x3,
                MODIFIER_VALUE_MOVE_TYPE_OVERRIDE = 0x4,
                MODIFIER_VALUE_TARGET_IDENTIFIER_OVERRIDE = 0x5,
                MODIFIER_VALUE_TARGET_IDENTIFIER_OVERRIDE_ORIENTATION = 0x6,
                MODIFIER_VALUE_INCOMING_DAMAGE_PERCENTAGE = 0x7,
                MODIFIER_VALUE_OUTGOING_DAMAGE_PERCENTAGE = 0x8,
                MODIFIER_VALUE_BASEATTACK_DAMAGE = 0x9,
                MODIFIER_VALUE_ATTACK_DAMAGE_ADDITIVE_ONLY = 0xA,
                MODIFIER_VALUE_BASEATTACK_DAMAGE_PERCENT = 0xB,
                MODIFIER_VALUE_DAMAGE_PERCENT = 0xC,
                MODIFIER_VALUE_BASE_BULLET_DAMAGE_PERCENT = 0xD,
                MODIFIER_VALUE_BASE_BULLET_DAMAGE_PERCENT_FROM_LEVEL = 0xE,
                MODIFIER_VALUE_BASE_BULLET_DAMAGE_FROM_LEVEL = 0xF,
                MODIFIER_VALUE_BULLET_DAMAGE_PERCENT = 0x10,
                MODIFIER_VALUE_BASE_MELEE_DAMAGE_PERCENT = 0x11,
                MODIFIER_VALUE_BASE_MELEE_DAMAGE_PERCENT_FROM_LEVEL = 0x12,
                MODIFIER_VALUE_BASE_MELEE_DAMAGE_FROM_LEVEL = 0x13,
                MODIFIER_VALUE_MELEE_DAMAGE_PERCENT = 0x14,
                MODIFIER_VALUE_TECH_DAMAGE_PERCENT = 0x15,
                MODIFIER_VALUE_HEALTH_MAX = 0x16,
                MODIFIER_VALUE_HEALTH_MAX_PERCENT = 0x17,
                MODIFIER_VALUE_BASE_HEALTH_PERCENT = 0x18,
                MODIFIER_VALUE_BASE_HEALTH_FROM_LEVEL = 0x19,
                MODIFIER_VALUE_BONUS_MAX_HEALTH_NO_SCALE = 0x1A,
                MODIFIER_VALUE_HEALTH_REGEN_PER_SECOND = 0x1B,
                MODIFIER_VALUE_HEALTH_REGEN_PER_SECOND_PERCENT = 0x1C,
                MODIFIER_VALUE_REGEN_MAX_HEALTH_PERCENT_PER_SECOND = 0x1D,
                MODIFIER_VALUE_EXTERNAL_HEALTH_REGEN_PER_SECOND = 0x1E,
                MODIFIER_VALUE_HEAL_AMP_CAST_PERCENT = 0x1F,
                MODIFIER_VALUE_HEAL_AMP_RECEIVE_PERCENT = 0x20,
                MODIFIER_VALUE_HEAL_AMP_REGEN_PERCENT = 0x21,
                MODIFIER_VALUE_HEAL_DEGEN_RESISTANCE = 0x22,
                MODIFIER_VALUE_AMMO_CLIP_SIZE = 0x23,
                MODIFIER_VALUE_AMMO_CLIP_SIZE_PERCENT = 0x24,
                MODIFIER_VALUE_AMMO_CLIP_SIZE_OVERRIDE = 0x25,
                MODIFIER_VALUE_RELOAD_SPEED = 0x26,
                MODIFIER_VALUE_RELOAD_SPEED_CONSTANT = 0x27,
                MODIFIER_VALUE_MOVE_SPEED_LIMIT = 0x28,
                MODIFIER_VALUE_MOVEMENT_SPEED_MAX = 0x29,
                MODIFIER_VALUE_MOVEMENT_SPEED_MAX_PERCENT = 0x2A,
                MODIFIER_VALUE_MOVEMENT_SPEED_WHILE_ZOOMED_PENALTY_REDUCTION_PERCENT = 0x2B,
                MODIFIER_VALUE_MOVEMENT_SPEED_WHILE_SHOOTING_PENALTY_REDUCTION_PERCENT = 0x2C,
                MODIFIER_VALUE_MOVEMENT_SPEED_SLOW_PERCENT = 0x2D,
                MODIFIER_VALUE_MOVEMENT_GROUND_DASH_REDUCTION_PERCENT = 0x2E,
                MODIFIER_VALUE_MOVEMENT_GROUND_DASH_INCREASE_PERCENT = 0x2F,
                MODIFIER_VALUE_AIR_MOVE_DISTANCE_INCREASE_PERCENT = 0x30,
                MODIFIER_VALUE_MOVEMENT_SLIDE_DISTANCE_SCALE = 0x31,
                MODIFIER_VALUE_MOVEMENT_SLOW_RESISTANCE = 0x32,
                MODIFIER_VALUE_BONUS_ATTACK_RANGE = 0x33,
                MODIFIER_VALUE_BONUS_ATTACK_RANGE_PERCENT = 0x34,
                MODIFIER_VALUE_ZOOM_INCREASE_PERCENT = 0x35,
                MODIFIER_VALUE_ZOOM_POSITION = 0x36,
                MODIFIER_VALUE_WEAPON_RECOIL_REDUCTION_PERCENT = 0x37,
                MODIFIER_VALUE_SPRINT_SPEED_BONUS = 0x38,
                MODIFIER_VALUE_SPRINT_SPEED_MAX_PERCENT = 0x39,
                MODIFIER_VALUE_SPRINT_DURATION = 0x3A,
                MODIFIER_VALUE_SPRINT_ACCELERATION = 0x3B,
                MODIFIER_VALUE_DISPLAY_SPEED_CURRENT = 0x3C,
                MODIFIER_VALUE_DISPLAY_SPEED_MAX = 0x3D,
                MODIFIER_VALUE_AVOID_SPELL = 0x3E,
                MODIFIER_VALUE_SHOT_SHOULD_PENETRATE = 0x3F,
                MODIFIER_VALUE_FIRE_RATE = 0x40,
                MODIFIER_VALUE_FIRE_RATE_SLOW = 0x41,
                MODIFIER_VALUE_CYCLE_TIME_PERCENTAGE = 0x42,
                MODIFIER_VALUE_SPREAD_SCALE = 0x43,
                MODIFIER_VALUE_CYCLE_TIME = 0x44,
                MODIFIER_VALUE_AMMO_COST_REDUCTION = 0x45,
                MODIFIER_VALUE_DAMAGE_TAKEN_REDUCTION_PERCENT = 0x46,
                MODIFIER_VALUE_DAMAGE_TAKEN_INCREASE_PERCENT = 0x47,
                MODIFIER_VALUE_BULLET_DAMAGE_TAKEN_INCREASE_PERCENT = 0x48,
                MODIFIER_VALUE_ABILITY_DAMAGE_TAKEN_INCREASE_PERCENT = 0x49,
                MODIFIER_VALUE_TECH_ARMOR = 0x4A,
                MODIFIER_VALUE_TECH_ARMOR_DAMAGE_RESIST = 0x4B,
                MODIFIER_VALUE_TECH_ARMOR_DAMAGE_RESIST_PERCENT = 0x4C,
                MODIFIER_VALUE_TECH_ARMOR_DAMAGE_RESIST_REDUCTION = 0x4D,
                MODIFIER_VALUE_ABILITY_DAMAGE_REDUCTION = 0x4E,
                MODIFIER_VALUE_ABILITY_DAMAGE_REDUCTION_PERCENT = 0x4F,
                MODIFIER_VALUE_BULLET_ARMOR = 0x50,
                MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST = 0x51,
                MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST_PERCENT = 0x52,
                MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST_REDUCTION = 0x53,
                MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST_NON_HERO = 0x54,
                MODIFIER_VALUE_CRIT_DAMAGE_RECEIVED_SCALE = 0x55,
                MODIFIER_VALUE_BULLET_DAMAGE_REDUCTION = 0x56,
                MODIFIER_VALUE_BULLET_DAMAGE_REDUCTION_PERCENT = 0x57,
                MODIFIER_VALUE_BASE_WEAPON_DAMAGE_TAKEN_PERCENT = 0x58,
                MODIFIER_VALUE_BASE_BULLET_DAMAGE_TAKEN_PERCENT = 0x59,
                MODIFIER_VALUE_BASE_MELEE_DAMAGE_TAKEN_PERCENT = 0x5A,
                MODIFIER_VALUE_MELEE_DAMAGE_REDUCTION_PERCENT = 0x5B,
                MODIFIER_VALUE_MELEE_DAMAGE_INCREASE_PERCENT = 0x5C,
                MODIFIER_VALUE_STATUS_RESISTANCE = 0x5D,
                MODIFIER_VALUE_COOLDOWN_REDUCTION_PERCENTAGE = 0x5E,
                MODIFIER_VALUE_COOLDOWN_MAX_TIME = 0x5F,
                MODIFIER_VALUE_COOLDOWN_BETWEEN_CHARGE_REDUCTION_PERCENTAGE = 0x60,
                MODIFIER_VALUE_BONUS_ABILITY_CHARGES = 0x61,
                MODIFIER_VALUE_BONUS_ABILITY_DURATION_PERCENTAGE = 0x62,
                MODIFIER_VALUE_MELEEATTACK_DAMAGE = 0x63,
                MODIFIER_VALUE_MELEEATTACK_DAMAGE_PERCENTAGE = 0x64,
                MODIFIER_VALUE_MELEEATTACK_SPEED = 0x65,
                MODIFIER_VALUE_MELEE_TRAVEL_DISTANCE_PERCENTAGE = 0x66,
                MODIFIER_VALUE_FIREARM_ACCURACY_PERCENTAGE = 0x67,
                MODIFIER_VALUE_TURN_SIDEMOVE_PERCENTAGE = 0x68,
                MODIFIER_VALUE_CHARGE_SPEED = 0x69,
                MODIFIER_VALUE_TELEPORT_COOLDOWN_REDUCTION_PERCENT = 0x6A,
                MODIFIER_VALUE_FALL_SPEED_MAX = 0x6B,
                MODIFIER_VALUE_AIR_SPEED_MAX = 0x6C,
                MODIFIER_VALUE_GRAVITY_SCALE = 0x6D,
                MODIFIER_VALUE_BULLET_EVASION = 0x6E,
                MODIFIER_VALUE_TECH_SHIELD_HEALTH = 0x6F,
                MODIFIER_VALUE_TECH_SHIELD_HEALTH_MAX = 0x70,
                MODIFIER_VALUE_TECH_SHIELD_HEALTH_TEMP = 0x71,
                MODIFIER_VALUE_TECH_SHIELD_DAMAGE_PERCENT = 0x72,
                MODIFIER_VALUE_TECH_SHIELD_DAMAGE_REGEN_COOLDOWN = 0x73,
                MODIFIER_VALUE_TECH_SHIELD_BREAK_REGEN_COOLDOWN = 0x74,
                MODIFIER_VALUE_BULLET_SHIELD_HEALTH = 0x75,
                MODIFIER_VALUE_BULLET_SHIELD_HEALTH_MAX = 0x76,
                MODIFIER_VALUE_BULLET_SHIELD_HEALTH_TEMP = 0x77,
                MODIFIER_VALUE_BULLET_SHIELD_DAMAGE_PERCENT = 0x78,
                MODIFIER_VALUE_BULLET_SHIELD_DAMAGE_REGEN_COOLDOWN = 0x79,
                MODIFIER_VALUE_BULLET_SHIELD_BREAK_REGEN_COOLDOWN = 0x7A,
                MODIFIER_VALUE_BONUS_CRIT_DAMAGE_PERCENT = 0x7B,
                MODIFIER_VALUE_HEIGHT_ADVANTAGE_BONUS_BASE_DAMAGE_PERCENT = 0x7C,
                MODIFIER_VALUE_CLOSE_RANGE_BONUS_BASE_DAMAGE_PERCENT = 0x7D,
                MODIFIER_VALUE_BONUS_WEAPON_DAMAGE_CLOSE_RANGE_MAX_RANGE = 0x7E,
                MODIFIER_VALUE_LONG_RANGE_BONUS_BASE_DAMAGE_PERCENT = 0x7F,
                MODIFIER_VALUE_BONUS_WEAPON_DAMAGE_LONG_RANGE_MIN_RANGE = 0x80,
                MODIFIER_VALUE_TECH_RANGE_ADDITIVE = 0x81,
                MODIFIER_VALUE_TECH_RANGE_PERCENT = 0x82,
                MODIFIER_VALUE_TECH_RANGE_CLAMP = 0x83,
                MODIFIER_VALUE_TECH_RADIUS_ADDITIVE = 0x84,
                MODIFIER_VALUE_TECH_RADIUS_PERCENT = 0x85,
                MODIFIER_VALUE_TURN_ANGLE_PER_SECOND_MAX = 0x86,
                MODIFIER_VALUE_BONUS_JUMP_VERTICAL_SPEED_PERCENT = 0x87,
                MODIFIER_VALUE_AIR_JUMPS = 0x88,
                MODIFIER_VALUE_ZIP_LINE_SPEED_ADDITIVE = 0x89,
                MODIFIER_VALUE_ZIP_LINE_SPEED_PERCENTAGE = 0x8A,
                MODIFIER_VALUE_CLIMB_ROPE_SPEED_PERCENTAGE = 0x8B,
                MODIFIER_VALUE_GROUND_FRICTION_PERCENTAGE = 0x8C,
                MODIFIER_VALUE_GROUND_ACCELERATION_PERCENTAGE = 0x8D,
                MODIFIER_VALUE_INVISIBILITY_LEVEL = 0x8E,
                MODIFIER_VALUE_CLOAK_FACTOR = 0x8F,
                MODIFIER_VALUE_CLOAK_DESAT_FACTOR = 0x90,
                MODIFIER_VALUE_PARTICLE_TINT_OVERRIDE = 0x91,
                MODIFIER_VALUE_PARTICLE_DESAT_OVERRIDE = 0x92,
                MODIFIER_VALUE_DIMENSION_TYPE = 0x93,
                MODIFIER_VALUE_GAMEPLAY_TIME_SCALE_ADDITIVE = 0x94,
                MODIFIER_VALUE_GAMEPLAY_TIME_SCALE_PERCENT = 0x95,
                MODIFIER_VALUE_ANIMATION_TIME_SCALE_ADDITIVE = 0x96,
                MODIFIER_VALUE_ANIMATION_TIME_SCALE_PERCENT = 0x97,
                MODIFIER_VALUE_ANIMATION_FRAME_SKIP_RATE = 0x98,
                MODIFIER_VALUE_MOVEMENT_TIME_SCALE_ADDITIVE = 0x99,
                MODIFIER_VALUE_MOVEMENT_TIME_SCALE_PERCENT = 0x9A,
                MODIFIER_VALUE_PARTICLE_TIME_SCALE_ADDITIVE = 0x9B,
                MODIFIER_VALUE_PARTICLE_TIME_SCALE_PERCENT = 0x9C,
                MODIFIER_VALUE_STAMINA = 0x9D,
                MODIFIER_VALUE_STAMINA_REGEN_PER_SECOND_ADDITIVE = 0x9E,
                MODIFIER_VALUE_STAMINA_REGEN_PER_SECOND_PERCENTAGE = 0x9F,
                MODIFIER_VALUE_WEAPON_POWER = 0xA0,
                MODIFIER_VALUE_ARMOR_POWER = 0xA1,
                MODIFIER_VALUE_TECH_POWER = 0xA2,
                MODIFIER_VALUE_WEAPON_POWER_PERCENT = 0xA3,
                MODIFIER_VALUE_AIR_CONTROL_PERCENT = 0xA4,
                MODIFIER_VALUE_AIR_CONTROL_ACCEL_PERCENT = 0xA5,
                MODIFIER_VALUE_ABILITY_PROJECTILE_SPEED_PERCENT = 0xA6,
                MODIFIER_VALUE_BONUS_BULLET_SPEED_PERCENT = 0xA7,
                MODIFIER_VALUE_BASE_BULLET_SPEED_OVERRIDE = 0xA8,
                MODIFIER_VALUE_BULLET_SHOOT_SOUND = 0xA9,
                MODIFIER_VALUE_BULLET_SHOOT_SOUND_FRIENDLY = 0xAA,
                MODIFIER_VALUE_BULLET_SHOOT_SOUND_ENEMY = 0xAB,
                MODIFIER_VALUE_BULLET_SHOOT_SOUND_WHIZ = 0xAC,
                MODIFIER_VALUE_BULLET_SHOOT_SOUND_WHIZ_LEFT_TO_RIGHT = 0xAD,
                MODIFIER_VALUE_BULLET_SHOOT_SOUND_WHIZ_RIGHT_TO_LEFT = 0xAE,
                MODIFIER_VALUE_TRACER_REPLACEMENT = 0xAF,
                MODIFIER_VALUE_TRACER_ADDITIONAL = 0xB0,
                MODIFIER_VALUE_CAMERA_TARGET_OVERRIDE = 0xB1,
                MODIFIER_VALUE_SPECTATING_SPEED_OVERRIDE = 0xB2,
                MODIFIER_NON_PLAYER_BONUS_BASE_DAMAGE_PERCENT = 0xB3,
                MODIFIER_VALUE_AIR_DRAG = 0xB4,
                MODIFIER_VALUE_TECH_DAMAGE_TAKEN_HEALS_ATTACKER = 0xB5,
                MODIFIER_VALUE_BULLET_DAMAGE_TAKEN_HEALS_ATTACKER = 0xB6,
                MODIFIER_VALUE_TECH_LIFESTEAL = 0xB7,
                MODIFIER_VALUE_BULLET_LIFESTEAL = 0xB8,
                MODIFIER_VALUE_OVERRIDE_BULLET_ATTACKER = 0xB9,
                MODIFIER_VALUE_OVERRIDE_MELEE_HIT_SOUND = 0xBA,
                MODIFIER_VALUE_OVERRIDE_MELEE_MISS_SOUND = 0xBB,
                MODIFIER_VALUE_IMBUED_BONUS_DAMAGE = 0xBC,
                MODIFIER_VALUE_IMBUED_BONUS_DURATION = 0xBD,
                MODIFIER_VALUE_INTRA_BURST_SHOT_CYCLE_TIME_OVERRIDE = 0xBE,
                MODIFIER_VALUE_BONUS_BURST_SHOT_PERCENT = 0xBF,
                MODIFIER_VALUE_BONUS_BURST_SHOT_CONSTANT = 0xC0,
                MODIFIER_VALUE_SPIN_UP_RATE_OVERRIDE = 0xC1,
                MODIFIER_VALUE_SPIN_UP_DECAY_OVERRIDE = 0xC2,
                MODIFIER_VALUE_SPIN_UP_MAX_CYCLE_TIME_OVERRIDE = 0xC3,
                MODIFIER_VALUE_SPIN_UP_MAX_BURST_FIRE_COOLDOWN_OVERRIDE = 0xC4,
                MODIFIER_VALUE_SPIN_UP_SOUND_OVERRIDE = 0xC5,
                MODIFIER_VALUE_SPIN_DOWN_SOUND_OVERRIDE = 0xC6,
                MODIFIER_VALUE_SPIN_LOOP_SOUND_OVERRIDE = 0xC7,
                MODIFIER_VALUE_BONUS_CHANNEL_TIME_PERCENTAGE = 0xC8,
                MODIFIER_VALUE_ABILITY_RESOURCE_MAX_ADDITIVE = 0xC9,
                MODIFIER_VALUE_ABILITY_RESOURCE_REGEN_PER_SECOND_ADDITIVE = 0xCA,
                MODIFIER_VALUE_ABILITY_RESOURCE_REGEN_PER_SECOND_PERCENTAGE = 0xCB,
                MODIFIER_VALUE_PENDING_INCOMING_DAMAGE = 0xCC,
                MODIFIER_VALUE_CAMERA_WOBBLE_INTENSITY = 0xCD,
                MODIFIER_VALUE_CAMERA_WOBBLE_SPEED = 0xCE,
                MODIFIER_VALUE_RESPAWN_TIME_ADDITIVE = 0xCF,
                MODIFIER_VALUE_COUNT = 0xD0,
                MODIFIER_VALUE_INVALID = 0xFF
            };
            // Alignment: 4
            // Member count: 57
            enum class Hint_e : uint32_t {
                HINT_ANY = 0xFFFFFFFFFFFFFFFF,
                HINT_NONE = 0x0,
                HINT_NOT_USED_WORLD_DOOR = 0x1,
                HINT_WORLD_WINDOW = 0x2,
                HINT_NOT_USED_WORLD_BUTTON = 0x3,
                HINT_NOT_USED_WORLD_MACHINERY = 0x4,
                HINT_NOT_USED_WORLD_LEDGE = 0x5,
                HINT_NOT_USED_WORLD_LIGHT_SOURCE = 0x6,
                HINT_NOT_USED_WORLD_HEAT_SOURCE = 0x7,
                HINT_NOT_USED_WORLD_BLINKING_LIGHT = 0x8,
                HINT_NOT_USED_WORLD_BRIGHT_COLORS = 0x9,
                HINT_NOT_USED_WORLD_HUMAN_BLOOD = 0xA,
                HINT_NOT_USED_WORLD_ALIEN_BLOOD = 0xB,
                HINT_WORLD_WORK_POSITION = 0xC,
                HINT_WORLD_VISUALLY_INTERESTING = 0xD,
                HINT_WORLD_VISUALLY_INTERESTING_DONT_AIM = 0xE,
                HINT_WORLD_INHIBIT_COMBINE_MINES = 0xF,
                HINT_WORLD_VISUALLY_INTERESTING_STEALTH = 0x10,
                HINT_GENERIC = 0x11,
                HINT_TACTICAL_COVER_MED_DEPRECATED = 0x64,
                HINT_TACTICAL_COVER_CENTER = 0x65,
                HINT_TACTICAL_HIDE = 0x66,
                HINT_TACTICAL_PINCH = 0x67,
                HINT_TACTICAL_SENTRY = 0x68,
                HINT_TACTICAL_ENEMY_DISADVANTAGED = 0x69,
                HINT_NOT_USED_HEALTH_KIT = 0x6A,
                HINT_TACTICAL_HIGH_GROUND = 0x6B,
                HINT_TACTICAL_COVER_LEFT = 0x6C,
                HINT_TACTICAL_COVER_RIGHT = 0x6D,
                HINT_TACTICAL_COVER_NARROW = 0x6E,
                HINT_TACTICAL_CREATE_COVER = 0x6F,
                HINT_NOT_USED_URBAN_STREETCORNER = 0xC8,
                HINT_NOT_USED_URBAN_STREETLAMP = 0xC9,
                HINT_NOT_USED_URBAN_DARK_SPOT = 0xCA,
                HINT_NOT_USED_URBAN_POSTER = 0xCB,
                HINT_NOT_USED_URBAN_SHELTER = 0xCC,
                HINT_NOT_USED_ASSASSIN_SECLUDED = 0x12C,
                HINT_NOT_USED_ASSASSIN_RAFTERS = 0x12D,
                HINT_NOT_USED_ASSASSIN_GROUND = 0x12E,
                HINT_NOT_USED_ASSASSIN_MONKEYBARS = 0x12F,
                HINT_ANTLION_BURROW_POINT = 0x190,
                HINT_ANTLION_THUMPER_FLEE_POINT = 0x191,
                HINT_HEADCRAB_BURROW_POINT = 0x1C2,
                HINT_HEADCRAB_EXIT_POD_POINT = 0x1C3,
                HINT_NOT_USED_ROLLER_PATROL_POINT = 0x1F4,
                HINT_NOT_USED_ROLLER_CLEANUP_POINT = 0x1F5,
                HINT_NOT_USED_PSTORM_ROCK_SPAWN = 0x258,
                HINT_CROW_FLYTO_POINT = 0x2BC,
                HINT_BUG_PATROL_POINT = 0x320,
                HINT_FOLLOW_WAIT_POINT = 0x384,
                HINT_JUMP_OVERRIDE = 0x385,
                HINT_PLAYER_SQUAD_TRANSITON_POINT = 0x386,
                HINT_NPC_EXIT_POINT = 0x387,
                HINT_STRIDER_NODE = 0x388,
                HINT_PLAYER_ALLY_MOVE_AWAY_DEST = 0x3B6,
                HINT_PLAYER_ALLY_FEAR_DEST = 0x3B7,
                HINT_CSTRIKE_HOSTAGE_ESCAPE = 0x44C
            };
            // Alignment: 1
            // Member count: 3
            enum class EMinimapHeight : uint8_t {
                NORMAL = 0x0,
                UP = 0x1,
                DOWN = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class Bidirectional_Messages : uint32_t {
                bi_RebroadcastGameEvent = 0x10,
                bi_RebroadcastSource = 0x11,
                bi_GameEvent = 0x12
            };
            // Alignment: 4
            // Member count: 4
            enum class PetLevelup_Rule_t : uint32_t {
                PETLEVELFROM_NOTHING = 0x0,
                PETLEVELFROM_KILLEATER = 0x1,
                PETLEVELFROM_COMPENDIUM_LEVEL = 0x2,
                NUM_PETLEVELUPRULES = 0x3
            };
            // Alignment: 4
            // Member count: 4
            enum class ECitadelGameMessages : uint32_t {
                k_EMsgGameServerToClientConnectionStatus = 0xA,
                k_EMsgGameServerToClientInitialGameState = 0xC,
                k_EMsgGameServerToClientGameCompleted = 0xD,
                k_EMsgGameServerToClientGoodbye = 0xF
            };
            // Alignment: 4
            // Member count: 7
            enum class ECitadelPingLocation_t : uint32_t {
                CITADEL_PING_LOCATION_NONE = 0x0,
                CITADEL_PING_LOCATION_ON_ROOF = 0x1,
                CITADEL_PING_LOCATION_ON_BRIDGE = 0x2,
                CITADEL_PING_LOCATION_TOP_OF_MID = 0x3,
                CITADEL_PING_LOCATION_IN_MID = 0x4,
                CITADEL_PING_LOCATION_TOP_OF_GARAGE = 0x5,
                CITADEL_PING_LOCATION_UNDER_GARAGE = 0x6
            };
            // Alignment: 4
            // Member count: 5
            enum class ELobbyServerState : uint32_t {
                k_eLobbyServerState_Assign = 0x0,
                k_eLobbyServerState_InGame = 0x1,
                k_eLobbyServerState_PostMatch = 0x2,
                k_eLobbyServerState_SignedOut = 0x3,
                k_eLobbyServerState_Abandoned = 0x4
            };
            // Alignment: 1
            // Member count: 9
            enum class SolidType_t : uint8_t {
                SOLID_NONE = 0x0,
                SOLID_BSP = 0x1,
                SOLID_BBOX = 0x2,
                SOLID_OBB = 0x3,
                SOLID_SPHERE = 0x4,
                SOLID_POINT = 0x5,
                SOLID_VPHYSICS = 0x6,
                SOLID_CAPSULE = 0x7,
                SOLID_LAST = 0x8
            };
            // Alignment: 4
            // Member count: 4
            enum class EBannedFeature : uint32_t {
                k_eBannedFeature_Invalid = 0x0,
                k_eBannedFeature_LowPriorityMatchmaking = 0x1,
                k_eBannedFeature_CommsRestricted = 0x2,
                k_eBannedFeature_ReportingDisabled = 0x3
            };
            // Alignment: 4
            // Member count: 27
            enum class DamageTypes_t : uint32_t {
                DMG_GENERIC = 0x0,
                DMG_CRUSH = 0x1,
                DMG_BULLET = 0x2,
                DMG_SLASH = 0x4,
                DMG_BURN = 0x8,
                DMG_VEHICLE = 0x10,
                DMG_FALL = 0x20,
                DMG_BLAST = 0x40,
                DMG_CLUB = 0x80,
                DMG_SHOCK = 0x100,
                DMG_SONIC = 0x200,
                DMG_ENERGYBEAM = 0x400,
                DMG_DROWN = 0x4000,
                DMG_POISON = 0x8000,
                DMG_RADIATION = 0x10000,
                DMG_DROWNRECOVER = 0x20000,
                DMG_ACID = 0x40000,
                DMG_PHYSGUN = 0x100000,
                DMG_DISSOLVE = 0x200000,
                DMG_BLAST_SURFACE = 0x400000,
                DMG_BUCKSHOT = 0x1000000,
                DMG_LASTGENERICFLAG = 0x1000000,
                DMG_HEADSHOT = 0x2000000,
                DMG_CRIT = 0x4000000,
                DMG_BUFFED = 0x8000000,
                DMG_DOT = 0x10000000,
                DMG_GROUND_AURA = 0x20000000
            };
            // Alignment: 4
            // Member count: 4
            enum class ModifierRemoveTargets_t : uint32_t {
                MODIFIER_REMOVE_ALL = 0x0,
                MODIFIER_REMOVE_ENEMY = 0x1,
                MODIFIER_REMOVE_ALLY = 0x2,
                MODIFIER_REMOVE_INTRINSIC = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class PointWorldTextJustifyVertical_t : uint32_t {
                POINT_WORLD_TEXT_JUSTIFY_VERTICAL_BOTTOM = 0x0,
                POINT_WORLD_TEXT_JUSTIFY_VERTICAL_CENTER = 0x1,
                POINT_WORLD_TEXT_JUSTIFY_VERTICAL_TOP = 0x2
            };
            // Alignment: 4
            // Member count: 6
            enum class EDamageFlashType : uint32_t {
                EFlashType_BulletDamage = 0x0,
                EFlashType_TechDamage = 0x1,
                EFlashType_Healing = 0x2,
                EFlashType_CritDamage = 0x3,
                EFlashType_MeleeActivate = 0x4,
                EFlshTypeCount = 0x5
            };
            // Alignment: 4
            // Member count: 5
            enum class EProtoDebugVisiblity : uint32_t {
                k_EProtoDebugVisibility_Always = 0x0,
                k_EProtoDebugVisibility_Server = 0x46,
                k_EProtoDebugVisibility_ValveServer = 0x50,
                k_EProtoDebugVisibility_GC = 0x5A,
                k_EProtoDebugVisibility_Never = 0x64
            };
            // Alignment: 4
            // Member count: 4
            enum class CCitadelPlayerPawn_GraphController2_ERopeClimb : uint32_t {
                ERopeClimb_NONE = 0x0,
                ERopeClimb_DOWN = 0x1,
                ERopeClimb_UP = 0x2,
                ERopeClimb_ATTACHED = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class attributeprovidertypes_t : uint32_t {
                PROVIDER_GENERIC = 0x0,
                PROVIDER_WEAPON = 0x1
            };
            // Alignment: 4
            // Member count: 9
            enum class EGCMsgResponse : uint32_t {
                k_EGCMsgResponseOK = 0x0,
                k_EGCMsgResponseDenied = 0x1,
                k_EGCMsgResponseServerError = 0x2,
                k_EGCMsgResponseTimeout = 0x3,
                k_EGCMsgResponseInvalid = 0x4,
                k_EGCMsgResponseNoMatch = 0x5,
                k_EGCMsgResponseUnknownError = 0x6,
                k_EGCMsgResponseNotLoggedOn = 0x7,
                k_EGCMsgFailedToCreate = 0x8
            };
            // Alignment: 4
            // Member count: 4
            enum class CITADEL_UNIT_TARGET_FLAGS : uint32_t {
                CITADEL_UNIT_TARGET_FLAG_NONE = 0x0,
                CITADEL_UNIT_TARGET_FLAG_PENETRATE_INVULNERABLE = 0x2,
                CITADEL_UNIT_TARGET_FLAG_NO_INVIS = 0x4,
                CITADEL_UNIT_TARGET_FLAG_NO_DORMANT_NEUTRALS = 0x8
            };
            // Alignment: 1
            // Member count: 6
            enum class MoveCollide_t : uint8_t {
                MOVECOLLIDE_DEFAULT = 0x0,
                MOVECOLLIDE_FLY_BOUNCE = 0x1,
                MOVECOLLIDE_FLY_CUSTOM = 0x2,
                MOVECOLLIDE_FLY_SLIDE = 0x3,
                MOVECOLLIDE_COUNT = 0x4,
                MOVECOLLIDE_MAX_BITS = 0x3
            };
            // Alignment: 4
            // Member count: 7
            enum class IChoreoServices__ChoreoState_t : uint32_t {
                STATE_PRE_SCRIPT = 0x0,
                STATE_WAIT_FOR_SCRIPT = 0x1,
                STATE_WALK_TO_MARK = 0x2,
                STATE_SYNCHRONIZE_SCRIPT = 0x3,
                STATE_PLAY_SCRIPT = 0x4,
                STATE_PLAY_SCRIPT_POST_IDLE = 0x5,
                STATE_PLAY_SCRIPT_POST_IDLE_DONE = 0x6
            };
            // Alignment: 4
            // Member count: 4
            enum class ELockonState : uint32_t {
                ELockingOn = 0x0,
                ELosingLock = 0x1,
                ELockPaused = 0x2,
                ELockNone = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class HudDisplayLocation_t : uint32_t {
                DISPLAY_HUD_LEFT = 0x0,
                DISPLAY_HUD_CENTER = 0x1
            };
            // Alignment: 4
            // Member count: 1
            enum class PrefetchType : uint32_t {
                PFT_SOUND = 0x0
            };
            // Alignment: 4
            // Member count: 8
            enum class ModifierAttribute_t : uint32_t {
                MODIFIER_ATTRIBUTE_NONE = 0x0,
                MODIFIER_ATTRIBUTE_PERMANENT = 0x1,
                MODIFIER_ATTRIBUTE_MULTIPLE = 0x2,
                MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE = 0x4,
                MODIFIER_ATTRIBUTE_AURA_PRIORITY = 0x8,
                MODIFIER_ATTRIBUTE_CANNOT_BE_PURGED = 0x10,
                MODIFIER_ATTRIBUTE_INTRINSIC = 0x20,
                MODIFIER_ATTRIBUTE_TRANSFER_TO_RAGDOLL = 0x40
            };
            // Alignment: 4
            // Member count: 4
            enum class ValueRemapperOutputType_t : uint32_t {
                OutputType_AnimationCycle = 0x0,
                OutputType_RotationX = 0x1,
                OutputType_RotationY = 0x2,
                OutputType_RotationZ = 0x3
            };
            // Alignment: 4
            // Member count: 26
            enum class ETEProtobufIds : uint32_t {
                TE_EffectDispatchId = 0x190,
                TE_ArmorRicochetId = 0x191,
                TE_BeamEntPointId = 0x192,
                TE_BeamEntsId = 0x193,
                TE_BeamPointsId = 0x194,
                TE_BeamRingId = 0x195,
                TE_BSPDecalId = 0x197,
                TE_BubblesId = 0x198,
                TE_BubbleTrailId = 0x199,
                TE_DecalId = 0x19A,
                TE_WorldDecalId = 0x19B,
                TE_EnergySplashId = 0x19C,
                TE_FizzId = 0x19D,
                TE_ShatterSurfaceId = 0x19E,
                TE_GlowSpriteId = 0x19F,
                TE_ImpactId = 0x1A0,
                TE_MuzzleFlashId = 0x1A1,
                TE_BloodStreamId = 0x1A2,
                TE_ExplosionId = 0x1A3,
                TE_DustId = 0x1A4,
                TE_LargeFunnelId = 0x1A5,
                TE_SparksId = 0x1A6,
                TE_PhysicsPropId = 0x1A7,
                TE_PlayerDecalId = 0x1A8,
                TE_ProjectedDecalId = 0x1A9,
                TE_SmokeId = 0x1AA
            };
            // Alignment: 1
            // Member count: 4
            enum class EViscousBowlingBallState_t : uint8_t {
                EViscousBowlingBallState_None = 0x0,
                EViscousBowlingBallState_TransformToBall = 0x1,
                EViscousBowlingBallState_Rolling = 0x2,
                EViscousBowlingBallState_TransformFromBall = 0x3
            };
            // Alignment: 4
            // Member count: 4
            enum class ModifierValueDisplayUnits_t : uint32_t {
                EDisplayUnit_Normal = 0x0,
                EDisplayUnit_Meters = 0x1,
                EDisplayUnit_MetersPerSecond = 0x2,
                EDisplayUnit_Invert = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class PointTemplateOwnerSpawnGroupType_t : uint32_t {
                INSERT_INTO_POINT_TEMPLATE_SPAWN_GROUP = 0x0,
                INSERT_INTO_CURRENTLY_ACTIVE_SPAWN_GROUP = 0x1,
                INSERT_INTO_NEWLY_CREATED_SPAWN_GROUP = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class eSplinePushType : uint32_t {
                k_eSplinePushAlong = 0x0,
                k_eSplinePushAway = 0x1,
                k_eSplinePushTowards = 0x2
            };
            // Alignment: 4
            // Member count: 6
            enum class ECitadelBotDifficulty : uint32_t {
                k_ECitadelBotDifficulty_None = 0x0,
                k_ECitadelBotDifficulty_Easy = 0x1,
                k_ECitadelBotDifficulty_Medium = 0x2,
                k_ECitadelBotDifficulty_Hard = 0x3,
                k_ECitadelBotDifficulty_Nightmare = 0x4,
                k_ECitadelBotDifficulty_Guided = 0x5
            };
            // Alignment: 4
            // Member count: 5
            enum class EQuickCastMode : uint32_t {
                EQuickCast_Default = 0x0,
                EQuickCast_Enabled = 0x1,
                EQuickCast_Disable = 0x2,
                EQuickCast_OnMouseUp = 0x3,
                EQuickMaxValue = 0x3
            };
            // Alignment: 4
            // Member count: 6
            enum class EGCPlatform : uint32_t {
                k_eGCPlatform_None = 0x0,
                k_eGCPlatform_PC = 0x1,
                k_eGCPlatform_Mac = 0x2,
                k_eGCPlatform_Linux = 0x3,
                k_eGCPlatform_Android = 0x4,
                k_eGCPlatform_iOS = 0x5
            };
            // Alignment: 4
            // Member count: 6
            enum class ENextAttackDelayReason_t : uint32_t {
                EDelayReason_Reload = 0x0,
                EDelayReason_BebopSpinUp = 0x1,
                EDelayReason_ViscousChargeShotRecovery = 0x2,
                EDelayReason_WraithSpinUp = 0x3,
                EDelayReason_Disarmed = 0x4,
                EDelayReasonCount = 0x5
            };
            // Alignment: 4
            // Member count: 8
            enum class ModifierVariantType_t : uint32_t {
                Variant_Null = 0x0,
                Variant_Bool = 0x1,
                Variant_Float = 0x2,
                Variant_String = 0x3,
                Variant_Entity = 0x4,
                Variant_Vector = 0x5,
                Variant_Quaternion = 0x6,
                Variant_StructPtr = 0x7
            };
            // Alignment: 4
            // Member count: 3
            enum class EntityDistanceMode_t : uint32_t {
                eOriginToOrigin = 0x0,
                eCenterToCenter = 0x1,
                eAxisToAxis = 0x2
            };
            // Alignment: 1
            // Member count: 3
            enum class ELassoHoldPosition : uint8_t {
                ELassoHoldPosition_Center = 0x0,
                ELassoHoldPosition_Left = 0x1,
                ELassoHoldPosition_Right = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class PointWorldTextJustifyHorizontal_t : uint32_t {
                POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_LEFT = 0x0,
                POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_CENTER = 0x1,
                POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_RIGHT = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class EHapticPulseType : uint32_t {
                VR_HAND_HAPTIC_PULSE_LIGHT = 0x0,
                VR_HAND_HAPTIC_PULSE_MEDIUM = 0x1,
                VR_HAND_HAPTIC_PULSE_STRONG = 0x2
            };
            // Alignment: 4
            // Member count: 4
            enum class ETier3State_t : uint32_t {
                ETier3State_Alive = 0x0,
                ETier3State_Dying = 0x1,
                ETier3State_Falling = 0x2,
                ETier3Staet_Vulnerable = 0x3
            };
            // Alignment: 4
            // Member count: 4
            enum class AI_MotorGroundAnimGraph_Flags_t : uint32_t {
                eNone = 0x0,
                eDelayStop = 0x1,
                eWaitingForFacing = 0x2,
                eDelayIdleTurn = 0x4
            };
            // Alignment: 4
            // Member count: 132
            enum class EGCItemMsg : uint32_t {
                k_EMsgGCBase = 0x3E8,
                k_EMsgGCSetItemPosition = 0x3E9,
                k_EMsgClientToGCPackBundle = 0x3EA,
                k_EMsgClientToGCPackBundleResponse = 0x3EB,
                k_EMsgGCDelete = 0x3EC,
                k_EMsgGCVerifyCacheSubscription = 0x3ED,
                k_EMsgClientToGCNameItem = 0x3EE,
                k_EMsgGCPaintItem = 0x3F1,
                k_EMsgGCPaintItemResponse = 0x3F2,
                k_EMsgGCNameBaseItem = 0x3FB,
                k_EMsgGCNameBaseItemResponse = 0x3FC,
                k_EMsgGCUseItemRequest = 0x401,
                k_EMsgGCUseItemResponse = 0x402,
                k_EMsgGCGiftedItems = 0x403,
                k_EMsgGCUnwrapGiftRequest = 0x40D,
                k_EMsgGCUnwrapGiftResponse = 0x40E,
                k_EMsgGCSortItems = 0x411,
                k_EMsgGCBackpackSortFinished = 0x422,
                k_EMsgGCAdjustItemEquippedState = 0x423,
                k_EMsgGCItemAcknowledged = 0x426,
                k_EMsgClientToGCNameItemResponse = 0x42C,
                k_EMsgGCApplyStrangePart = 0x431,
                k_EMsgGCApplyPennantUpgrade = 0x434,
                k_EMsgGCSetItemPositions = 0x435,
                k_EMsgGCApplyEggEssence = 0x436,
                k_EMsgGCNameEggEssenceResponse = 0x437,
                k_EMsgGCExtractGems = 0x43E,
                k_EMsgGCAddSocket = 0x43F,
                k_EMsgGCAddItemToSocket = 0x440,
                k_EMsgGCAddItemToSocketResponse = 0x441,
                k_EMsgGCAddSocketResponse = 0x442,
                k_EMsgGCResetStrangeGemCount = 0x443,
                k_EMsgGCRequestCrateItems = 0x444,
                k_EMsgGCRequestCrateItemsResponse = 0x445,
                k_EMsgGCExtractGemsResponse = 0x446,
                k_EMsgGCResetStrangeGemCountResponse = 0x447,
                k_EMsgGCServerUseItemRequest = 0x44F,
                k_EMsgGCAddGiftItem = 0x450,
                k_EMsgSQLGCToGCRevokeUntrustedGift = 0x451,
                k_EMsgClientToGCRemoveItemGifterAttributes = 0x455,
                k_EMsgClientToGCRemoveItemName = 0x456,
                k_EMsgClientToGCRemoveItemDescription = 0x457,
                k_EMsgClientToGCRemoveItemAttributeResponse = 0x458,
                k_EMsgGCDev_NewItemRequest = 0x7D1,
                k_EMsgGCDev_NewItemRequestResponse = 0x7D2,
                k_EMsgGCDev_UnlockAllItemStylesRequest = 0x7D3,
                k_EMsgGCDev_UnlockAllItemStylesResponse = 0x7D4,
                k_EMsgGCStorePurchaseFinalize = 0x9C8,
                k_EMsgGCStorePurchaseFinalizeResponse = 0x9C9,
                k_EMsgGCStorePurchaseCancel = 0x9CA,
                k_EMsgGCStorePurchaseCancelResponse = 0x9CB,
                k_EMsgGCStorePurchaseInit = 0x9CE,
                k_EMsgGCStorePurchaseInitResponse = 0x9CF,
                k_EMsgGCToGCBannedWordListUpdated = 0x9D3,
                k_EMsgGCToGCDirtySDOCache = 0x9D4,
                k_EMsgGCToGCUpdateSQLKeyValue = 0x9D6,
                k_EMsgGCToGCBroadcastConsoleCommand = 0x9D9,
                k_EMsgGCServerVersionUpdated = 0x9DA,
                k_EMsgGCApplyAutograph = 0x9DB,
                k_EMsgGCToGCWebAPIAccountChanged = 0x9DC,
                k_EMsgGCClientVersionUpdated = 0x9E0,
                k_EMsgGCToGCUpdateWelcomeMsg = 0x9E1,
                k_EMsgGCToGCPlayerStrangeCountAdjustments = 0x9E7,
                k_EMsgGCRequestStoreSalesData = 0x9E8,
                k_EMsgGCRequestStoreSalesDataResponse = 0x9E9,
                k_EMsgGCRequestStoreSalesDataUpToDateResponse = 0x9EA,
                k_EMsgGCToGCPingRequest = 0x9EB,
                k_EMsgGCToGCPingResponse = 0x9EC,
                k_EMsgGCToGCGetUserSessionServer = 0x9ED,
                k_EMsgGCToGCGetUserSessionServerResponse = 0x9EE,
                k_EMsgGCToGCGetUserServerMembers = 0x9EF,
                k_EMsgGCToGCGetUserServerMembersResponse = 0x9F0,
                k_EMsgGCToGCCanUseDropRateBonus = 0x9F3,
                k_EMsgSQLAddDropRateBonus = 0x9F4,
                k_EMsgGCToGCRefreshSOCache = 0x9F5,
                k_EMsgGCToGCGrantAccountRolledItems = 0x9FA,
                k_EMsgGCToGCGrantSelfMadeItemToAccount = 0x9FB,
                k_EMsgGCStatueCraft = 0xA01,
                k_EMsgGCRedeemCode = 0xA02,
                k_EMsgGCRedeemCodeResponse = 0xA03,
                k_EMsgGCToGCItemConsumptionRollback = 0xA04,
                k_EMsgClientToGCWrapAndDeliverGift = 0xA05,
                k_EMsgClientToGCWrapAndDeliverGiftResponse = 0xA06,
                k_EMsgClientToGCUnpackBundleResponse = 0xA07,
                k_EMsgGCToClientStoreTransactionCompleted = 0xA08,
                k_EMsgClientToGCEquipItems = 0xA09,
                k_EMsgClientToGCEquipItemsResponse = 0xA0A,
                k_EMsgClientToGCUnlockItemStyle = 0xA0B,
                k_EMsgClientToGCUnlockItemStyleResponse = 0xA0C,
                k_EMsgClientToGCSetItemInventoryCategory = 0xA0D,
                k_EMsgClientToGCUnlockCrate = 0xA0E,
                k_EMsgClientToGCUnlockCrateResponse = 0xA0F,
                k_EMsgClientToGCUnpackBundle = 0xA10,
                k_EMsgClientToGCSetItemStyle = 0xA11,
                k_EMsgClientToGCSetItemStyleResponse = 0xA12,
                k_EMsgSQLGCToGCGrantBackpackSlots = 0xA14,
                k_EMsgClientToGCLookupAccountName = 0xA15,
                k_EMsgClientToGCLookupAccountNameResponse = 0xA16,
                k_EMsgClientToGCCreateStaticRecipe = 0xA18,
                k_EMsgClientToGCCreateStaticRecipeResponse = 0xA19,
                k_EMsgGCToGCStoreProcessCDKeyTransaction = 0xA1A,
                k_EMsgGCToGCStoreProcessCDKeyTransactionResponse = 0xA1B,
                k_EMsgGCToGCStoreProcessSettlement = 0xA1C,
                k_EMsgGCToGCStoreProcessSettlementResponse = 0xA1D,
                k_EMsgGCToGCConsoleOutput = 0xA1E,
                k_EMsgGCToClientItemAges = 0xA1F,
                k_EMsgGCToGCInternalTestMsg = 0xA20,
                k_EMsgGCToGCClientServerVersionsUpdated = 0xA21,
                k_EMsgGCUseMultipleItemsRequest = 0xA22,
                k_EMsgGCGetAccountSubscriptionItem = 0xA23,
                k_EMsgGCGetAccountSubscriptionItemResponse = 0xA24,
                k_EMsgGCToGCBroadcastMessageFromSub = 0xA26,
                k_EMsgGCToClientCurrencyPricePoints = 0xA27,
                k_EMsgGCToGCAddSubscriptionTime = 0xA28,
                k_EMsgGCToGCFlushSteamInventoryCache = 0xA29,
                k_EMsgGCRequestCrateEscalationLevel = 0xA2A,
                k_EMsgGCRequestCrateEscalationLevelResponse = 0xA2B,
                k_EMsgGCToGCUpdateSubscriptionItems = 0xA2C,
                k_EMsgGCToGCSelfPing = 0xA2D,
                k_EMsgGCToGCGetInfuxIntervalStats = 0xA2E,
                k_EMsgGCToGCGetInfuxIntervalStatsResponse = 0xA2F,
                k_EMsgGCToGCPurchaseSucceeded = 0xA30,
                k_EMsgClientToGCGetLimitedItemPurchaseQuantity = 0xA31,
                k_EMsgClientToGCGetLimitedItemPurchaseQuantityResponse = 0xA32,
                k_EMsgGCToGCBetaDeleteItems = 0xA33,
                k_EMsgClientToGCGetInFlightItemCharges = 0xA34,
                k_EMsgClientToGCGetInFlightItemChargesResponse = 0xA35,
                k_EMsgGCToClientInFlightChargesUpdated = 0xA36,
                k_EMsgClientToGCPurchaseChargeCostItems = 0xA37,
                k_EMsgClientToGCPurchaseChargeCostItemsResponse = 0xA38,
                k_EMsgClientToGCCancelUnfinalizedTransactions = 0xA39,
                k_EMsgClientToGCCancelUnfinalizedTransactionsResponse = 0xA3A
            };
            // Alignment: 4
            // Member count: 6
            enum class ShakeCommand_t : uint32_t {
                SHAKE_START = 0x0,
                SHAKE_STOP = 0x1,
                SHAKE_AMPLITUDE = 0x2,
                SHAKE_FREQUENCY = 0x3,
                SHAKE_START_RUMBLEONLY = 0x4,
                SHAKE_START_NORUMBLE = 0x5
            };
            // Alignment: 4
            // Member count: 4
            enum class PostProcessingGameStates : uint32_t {
                PostProcState_Killed = 0x0,
                PostProcState_Black = 0x1,
                PostProcState_Blinded = 0x2,
                PostProcState_ShivPossessed = 0x3
            };
            // Alignment: 4
            // Member count: 12
            enum class ET2BossActivity : uint32_t {
                IdleShielded = 0x0,
                Staggered = 0x1,
                Stunned = 0x2,
                Wander = 0x3,
                Shooting = 0x4,
                RocketBarrage = 0x5,
                ElectricBeamWindup = 0x6,
                ElectricBeamShoot = 0x7,
                Stomp = 0x8,
                Stomp_Left = 0x9,
                Stomp_Right = 0xA,
                Dying = 0xB
            };
            // Alignment: 4
            // Member count: 7
            enum class TrooperType_t : uint32_t {
                TROOPER_INVALID = 0x0,
                TROOPER_NORMAL = 0x1,
                TROOPER_MEDIC = 0x2,
                TROOPER_MELEE = 0x3,
                TROOPER_NANO_BASIC = 0x4,
                TROOPER_NANO_SUPER = 0x5,
                TROOPER_ZIPLINE_CONTAINER = 0x6
            };
            // Alignment: 4
            // Member count: 2
            enum class CCitadelModifierResponseRulesFilterType_t : uint32_t {
                MODIFIER_RR_FILTER_BROADCAST = 0x0,
                MODIFIER_RR_FILTER_SINGLE = 0x1
            };
            // Alignment: 4
            // Member count: 3
            enum class TRAIN_CODE : uint32_t {
                TRAIN_SAFE = 0x0,
                TRAIN_BLOCKING = 0x1,
                TRAIN_FOLLOWING = 0x2
            };
            // Alignment: 4
            // Member count: 3
            enum class BrushSolidities_e : uint32_t {
                BRUSHSOLID_TOGGLE = 0x0,
                BRUSHSOLID_NEVER = 0x1,
                BRUSHSOLID_ALWAYS = 0x2
            };
            // Alignment: 4
            // Member count: 5
            enum class PortraitSummonsDisplayMode_t : uint32_t {
                PORTRAIT_SUMMONS_DISPLAY_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PORTRAIT_SUMMONS_DISPLAY_MODE_NONE = 0x0,
                PORTRAIT_SUMMONS_DISPLAY_MODE_ALL = 0x1,
                PORTRAIT_SUMMONS_DISPLAY_MODE_NON_DEFAULT = 0x2,
                PORTRAIT_SUMMONS_DISPLAY_MODE_TYPE_COUNT = 0x3
            };
            // Alignment: 4
            // Member count: 25
            enum class EGCMsgInitiateTradeResponse : uint32_t {
                k_EGCMsgInitiateTradeResponse_Accepted = 0x0,
                k_EGCMsgInitiateTradeResponse_Declined = 0x1,
                k_EGCMsgInitiateTradeResponse_VAC_Banned_Initiator = 0x2,
                k_EGCMsgInitiateTradeResponse_VAC_Banned_Target = 0x3,
                k_EGCMsgInitiateTradeResponse_Target_Already_Trading = 0x4,
                k_EGCMsgInitiateTradeResponse_Disabled = 0x5,
                k_EGCMsgInitiateTradeResponse_NotLoggedIn = 0x6,
                k_EGCMsgInitiateTradeResponse_Cancel = 0x7,
                k_EGCMsgInitiateTradeResponse_TooSoon = 0x8,
                k_EGCMsgInitiateTradeResponse_TooSoonPenalty = 0x9,
                k_EGCMsgInitiateTradeResponse_Trade_Banned_Initiator = 0xA,
                k_EGCMsgInitiateTradeResponse_Trade_Banned_Target = 0xB,
                k_EGCMsgInitiateTradeResponse_Free_Account_Initiator_DEPRECATED = 0xC,
                k_EGCMsgInitiateTradeResponse_Shared_Account_Initiator = 0xD,
                k_EGCMsgInitiateTradeResponse_Service_Unavailable = 0xE,
                k_EGCMsgInitiateTradeResponse_Target_Blocked = 0xF,
                k_EGCMsgInitiateTradeResponse_NeedVerifiedEmail = 0x10,
                k_EGCMsgInitiateTradeResponse_NeedSteamGuard = 0x11,
                k_EGCMsgInitiateTradeResponse_SteamGuardDuration = 0x12,
                k_EGCMsgInitiateTradeResponse_TheyCannotTrade = 0x13,
                k_EGCMsgInitiateTradeResponse_Recent_Password_Reset = 0x14,
                k_EGCMsgInitiateTradeResponse_Using_New_Device = 0x15,
                k_EGCMsgInitiateTradeResponse_Sent_Invalid_Cookie = 0x16,
                k_EGCMsgInitiateTradeResponse_TooRecentFriend = 0x17,
                k_EGCMsgInitiateTradeResponse_WalledFundsNotTrusted = 0x18
            };
            // Alignment: 4
            // Member count: 6
            enum class GCProtoBufMsgSrc : uint32_t {
                GCProtoBufMsgSrc_Unspecified = 0x0,
                GCProtoBufMsgSrc_FromSystem = 0x1,
                GCProtoBufMsgSrc_FromSteamID = 0x2,
                GCProtoBufMsgSrc_FromGC = 0x3,
                GCProtoBufMsgSrc_ReplySystem = 0x4,
                GCProtoBufMsgSrc_SpoofedSteamID = 0x5
            };
            // Alignment: 4
            // Member count: 4
            enum class EMidBossActivity : uint32_t {
                IdleShielded = 0x0,
                Alert = 0x1,
                AlertShooting = 0x2,
                Dying = 0x3
            };
            // Alignment: 4
            // Member count: 2
            enum class ModifyDamageReturn_t : uint32_t {
                CONTINUE_TO_APPLY_DAMAGE = 0x0,
                ABORT_DO_NOT_APPLY_DAMAGE = 0x1
            };
            // Alignment: 4
            // Member count: 6
            enum class ECitadelRegionMode : uint32_t {
                k_ECitadelRegionMode_ROW = 0x0,
                k_ECitadelRegionMode_Europe = 0x1,
                k_ECitadelRegionMode_SEAsia = 0x2,
                k_ECitadelRegionMode_SAmerica = 0x3,
                k_ECitadelRegionMode_Russia = 0x4,
                k_ECitadelRegionMode_Oceania = 0x5
            };
            // Alignment: 4
            // Member count: 4
            enum class TaskStatus_t : uint32_t {
                TASKSTATUS_NEW = 0x0,
                TASKSTATUS_RUN_MOVE_AND_TASK = 0x1,
                TASKSTATUS_RUN_TASK = 0x2,
                TASKSTATUS_COMPLETE = 0x3
            };
            // Alignment: 4
            // Member count: 3
            enum class ECitadelLobbyTeam : uint32_t {
                k_ECitadelLobbyTeam_Team0 = 0x0,
                k_ECitadelLobbyTeam_Team1 = 0x1,
                k_ECitadelLobbyTeam_Spectator = 0x10
            };
            // Alignment: 4
            // Member count: 2
            enum class ShadowType_t : uint32_t {
                SHADOWS_NONE = 0x0,
                SHADOWS_SIMPLE = 0x1
            };
            // Alignment: 4
            // Member count: 2
            enum class EAttachmentSourceType : uint32_t {
                EAttachmentSource_WeaponMuzzles = 0x0,
                EAttachmentSource_Custom = 0x1
            };
            // Alignment: 4
            // Member count: 4
            enum class ScriptedHeldWeaponBehavior_t : uint32_t {
                eInvalid = 0xFFFFFFFFFFFFFFFF,
                eHolster = 0x0,
                eDeploy = 0x1,
                eDrop = 0x2
            };
            // Alignment: 4
            // Member count: 2
            enum class ValueRemapperInputType_t : uint32_t {
                InputType_PlayerShootPosition = 0x0,
                InputType_PlayerShootPositionAroundAxis = 0x1
            };
            // Alignment: 4
            // Member count: 18
            enum class WeaponSound_t : uint32_t {
                WEAPON_SOUND_EMPTY = 0x0,
                WEAPON_SOUND_SECONDARY_EMPTY = 0x1,
                WEAPON_SOUND_SINGLE = 0x2,
                WEAPON_SOUND_SECONDARY_ATTACK = 0x3,
                WEAPON_SOUND_MELEE_MISS = 0x4,
                WEAPON_SOUND_MELEE_HIT = 0x5,
                WEAPON_SOUND_MELEE_HIT_WORLD = 0x6,
                WEAPON_SOUND_MELEE_HIT_PLAYER = 0x7,
                WEAPON_SOUND_MELEE_HIT_NPC = 0x8,
                WEAPON_SOUND_SPECIAL1 = 0x9,
                WEAPON_SOUND_SPECIAL2 = 0xA,
                WEAPON_SOUND_SPECIAL3 = 0xB,
                WEAPON_SOUND_NEARLYEMPTY = 0xC,
                WEAPON_SOUND_IMPACT = 0xD,
                WEAPON_SOUND_REFLECT = 0xE,
                WEAPON_SOUND_SECONDARY_IMPACT = 0xF,
                WEAPON_SOUND_SECONDARY_REFLECT = 0x10,
                WEAPON_SOUND_NUM_TYPES = 0x11
            };
            // Alignment: 8
            // Member count: 44
            enum class TakeDamageFlags_t : uint64_t {
                DFLAG_NONE = 0x0,
                DFLAG_SUPPRESS_HEALTH_CHANGES = 0x1,
                DFLAG_SUPPRESS_PHYSICS_FORCE = 0x2,
                DFLAG_SUPPRESS_EFFECTS = 0x4,
                DFLAG_PREVENT_DEATH = 0x8,
                DFLAG_FORCE_DEATH = 0x10,
                DFLAG_ALWAYS_GIB = 0x20,
                DFLAG_NEVER_GIB = 0x40,
                DFLAG_REMOVE_NO_RAGDOLL = 0x80,
                DFLAG_SUPPRESS_DAMAGE_MODIFICATION = 0x100,
                DFLAG_ALWAYS_FIRE_DAMAGE_EVENTS = 0x200,
                DFLAG_RADIUS_DMG = 0x400,
                DFLAG_FORCEREDUCEARMOR_DMG = 0x800,
                DFLAG_SUPPRESS_INTERRUPT_FLINCH = 0x1000,
                DMG_LASTDFLAG = 0x1000,
                DFLAG_ALLOW_SUICIDE = 0x2000,
                DFLAG_BOUNTY_ALL_DIRECT = 0x4000,
                DFLAG_SUPPRESS_DIRECT_GOLD_BOUNTY = 0x8000,
                DFLAG_SUPPRESS_COINS_GOLD_BOUNTY = 0x10000,
                DFLAG_SUPPRESS_KILL_CREDIT = 0x20000,
                DFLAG_SUPPRESS_DEATH_CREDIT = 0x40000,
                DFLAG_SUPPRESS_AP_BOUNTY = 0x80000,
                DFLAG_SUPPRESS_DAMAGE_RECORD = 0x100000,
                DFLAG_SUPPRESS_DEATH_EVENT = 0x200000,
                DFLAG_MITIGATION_DUE_TO_NO_NEARBY_TROOPERS = 0x400000,
                DFLAG_TRIGGER_FLINCH = 0x800000,
                DFLAG_DO_NOT_BATCH_DAMAGE_NUMBER = 0x1000000,
                DFLAG_SUPPRESS_HIT_INDICATOR_SOUND = 0x2000000,
                DFLAG_DO_NOT_PROC = 0x4000000,
                DFLAG_RICOCHET = 0x8000000,
                DFLAG_PURE_DMG = 0x10000000,
                DFLAG_HEAVY_MELEE = 0x20000000,
                DFLAG_LIGHT_MELEE = 0x40000000,
                DFLAG_BONUS_DAMAGE = 0x80000000,
                DFLAG_KILL_CREATES_RAGDOLL = 0x100000000,
                DFLAG_IS_HEALTH_TRANSFER = 0x200000000,
                DFLAG_DO_NOT_RICOCHET = 0x400000000,
                DFLAG_NOT_IN_MIDBOSS_PIT = 0x800000000,
                DFLAG_NOT_IN_TIER3_PIT = 0x1000000000,
                DFLAG_DO_NOT_TRIGGER_DAMAGE_FLASH = 0x2000000000,
                DFLAG_TOO_FAR = 0x4000000000,
                DFLAG_DO_NOT_DISRUPT_HEALING_RITE = 0x8000000000,
                DFLAG_DO_NOT_CRIT = 0x10000000000,
                DFLAG_TOO_LOW = 0x20000000000
            };
            // Alignment: 4
            // Member count: 3
            enum class CCitadelPlayerPawn_GraphController2_EMovementType : uint32_t {
                EMovementType_NONE = 0x0,
                EMovementType_FORCED = 0x1,
                EMovementType_PLAYER_INPUT = 0x2
            };
            // Alignment: 4
            // Member count: 17
            enum class ECitadelHintFeature : uint32_t {
                CITADEL_HINT_FEATURE_INVALID = 0x0,
                CITADEL_HINT_FEATURE_ZOOM_WEAPON = 0x1,
                CITADEL_HINT_FEATURE_ZIPLINE = 0x2,
                CITADEL_HINT_FEATURE_SPEND_MONEY = 0x3,
                CITADEL_HINT_FEATURE_SLIDE = 0x4,
                CITADEL_HINT_FEATURE_MANTLE = 0x5,
                CITADEL_HINT_FEATURE_MELEE = 0x6,
                CITADEL_HINT_FEATURE_LADDER = 0x7,
                CITADEL_HINT_FEATURE_LEARN_INITIAL_ABILITY = 0x8,
                CITADEL_HINT_FEATURE_LEARN_ABILITY = 0x9,
                CITADEL_HINT_FEATURE_UPGRADE_ABILITY = 0xA,
                CITADEL_HINT_FEATURE_HERO_TESTING_SHOP = 0xB,
                CITADEL_HINT_FEATURE_ACTIVATE_WALL = 0xC,
                CITADEL_HINT_FEATURE_FLAMEDASH_BOOST = 0xD,
                CITADEL_HINT_FEATURE_GUIDEDARROW_BOOST = 0xE,
                CITADEL_HINT_FEATURE_FLYING_STRIKE_EARLY_ACTIVATE = 0xF,
                CITADEL_HINT_FEATURE_LAST = 0x10
            };
            // Alignment: 4
            // Member count: 56
            enum class ECitadelAbilityOrders : uint32_t {
                ECitadelAbilityOrder_Success = 0x0,
                ECitadelAbilityOrder_Invalid_InCastDelay = 0x1,
                ECitadelAbilityOrder_Invalid_InCooldown = 0x2,
                ECitadelAbilityOrder_Invalid_CantCastPassive = 0x3,
                ECitadelAbilityOrder_Invalid_NotLearned = 0x4,
                ECitadelAbilityOrder_Invalid_NotActive = 0x5,
                ECitadelAbilityOrder_Invalid_Hidden = 0x6,
                ECitadelAbilityOrder_Invalid_NoCharges = 0x7,
                ECitadelAbilityOrder_Invalid_InChargeDelay = 0x8,
                ECitadelAbilityOrder_Invalid_OverridenManually = 0x9,
                ECitadelAbilityOrder_Invalid_BusyWithAction = 0xA,
                ECitadelAbilityOrder_Invalid_Prematch = 0xB,
                ECitadelAbilityOrder_Invalid_Muted = 0xC,
                ECitadelAbilityOrder_Invalid_Silenced = 0xD,
                ECitadelAbilityOrder_Invalid_Holding_Idol = 0xE,
                ECitadelAbilityOrder_Invalid_Silence_Movement_Abilities = 0xF,
                ECitadelAbilityOrder_Invalid_Disarmed = 0x10,
                ECitadelAbilityOrder_Invalid_Rooted = 0x11,
                ECitadelAbilityOrder_Invalid_NoTarget = 0x12,
                ECitadelAbilityOrder_Invalid_NoTargetRequiresTrooper = 0x13,
                ECitadelAbilityOrder_Invalid_NoTargetRequiresNPC = 0x14,
                ECitadelAbilityOrder_Invalid_NoTargetRequiresHero = 0x15,
                ECitadelAbilityOrder_Invalid_TargetOutOfRange = 0x16,
                ECitadelAbilityOrder_Invalid_PositionInvalid = 0x17,
                ECitadelAbilityOrder_Invalid_CantBeUsedOffGround = 0x18,
                ECitadelAbilityOrder_Invalid_CantBeUsedOnGround = 0x19,
                ECitadelAbilityOrder_Invalid_NoAbility = 0x1A,
                ECitadelAbilityOrder_Invalid_UsingWeaponScope = 0x1B,
                ECitadelAbilityOrder_Invalid_Asleep = 0x1C,
                ECitadelAbilityOrder_Invalid_Stunned = 0x1D,
                ECitadelAbilityOrder_Invalid_Chained = 0x1E,
                ECitadelAbilityOrder_Invalid_EnemyHealthTooLow = 0x1F,
                ECitadelAbilityOrder_Invalid_HealthTooHigh = 0x20,
                ECitadelAbilityOrder_Invalid_NotEnoughEnergy = 0x21,
                ECitadelAbilityOrder_Invalid_NoZiplineTargeted = 0x22,
                ECitadelAbilityOrder_Invalid_NoUnitsInRadius = 0x23,
                ECitadelAbilityOrder_Invalid_OutOfStamina = 0x24,
                ECitadelAbilityOrder_Invalid_NotInFalseDeath = 0x25,
                ECitadelAbilityOrder_Invalid_NotAlive = 0x26,
                ECitadelAbilityOrder_Invalid_OnlyOneAirJump = 0x27,
                ECitadelAbilityOrder_Invalid_OnlyTwoAirJumps = 0x28,
                ECitadelAbilityOrder_Invalid_OnlyOneAirDash = 0x29,
                ECitadelAbilityOrder_Invalid_OnlyTwoAirDashes = 0x2A,
                ECitadelAbilityOrder_Invalid_OnlyOneDownDash = 0x2B,
                ECitadelAbilityOrder_Invalid_OnlyTwoDownDashes = 0x2C,
                ECitadelAbilityOrder_Invalid_OnlyOneWallJump = 0x2D,
                ECitadelAbilityOrder_Invalid_SlideTakingPriority = 0x2E,
                ECitadelAbilityOrder_Invalid_NothingToRefresh = 0x2F,
                ECitadelAbilityOrder_Invalid_BeetleTarget = 0x30,
                ECitadelAbilityOrder_Invalid_ClipIsFull = 0x31,
                ECitadelAbilityOrder_Invalid_DashJumpFailed = 0x32,
                ECitadelAbilityOrder_DebugCommand_RequiresHeroTarget = 0x33,
                ECitadelAbilityOrder_Invalid_NotEnoughAbilityResource = 0x34,
                ECitadelAbilityOrder_Invalid_NotEnoughHeadRoom = 0x35,
                ECitadelAbilityOrder_Invalid_NoDamageToClear = 0x36,
                ECitadelAbilityOrder_Max = 0x37
            };
            // Alignment: 4
            // Member count: 9
            enum class ECitadelDisconnectReason : uint32_t {
                k_ECitadelDisconnectReason_UserLeaveMatch = 0x3E9,
                k_ECitadelDisconnectReason_UserQuitApp = 0x3EA,
                k_ECitadelDisconnectReason_UserCancel = 0x3EB,
                k_ECitadelDisconnectReason_Goodbye = 0x3EC,
                k_ECitadelDisconnectReason_BadMessage = 0x7D1,
                k_ECitadelDisconnectReason_GameDestroyedUnexpectedly = 0x7D2,
                k_ECitadelDisconnectReason_ChangingServer = 0x7D3,
                k_ECitadelDisconnectReason_OldConnection = 0x7D4,
                k_ECitadelDisconnectReason_GoodbyeUnrecognizedGame = 0x7D5
            };
            // Alignment: 4
            // Member count: 2
            enum class ERejuvenatorRespawnMechanic : uint32_t {
                RejuvenatorRespawnMechanic_FixedDelay = 0x0,
                RejuvenatorRespawnMechanic_PercentOfNormal = 0x1
            };
            // Alignment: 4
            // Member count: 2
            enum class ValueRemapperHapticsType_t : uint32_t {
                HaticsType_Default = 0x0,
                HaticsType_None = 0x1
            };
            // Alignment: 4
            // Member count: 10
            enum class Disposition_t : uint32_t {
                D_ER = 0x0,
                D_HT = 0x1,
                D_FR = 0x2,
                D_LI = 0x3,
                D_NU = 0x4,
                D_ERROR = 0x0,
                D_HATE = 0x1,
                D_FEAR = 0x2,
                D_LIKE = 0x3,
                D_NEUTRAL = 0x4
            };
            // Alignment: 4
            // Member count: 7
            enum class GCConnectionStatus : uint32_t {
                GCConnectionStatus_HAVE_SESSION = 0x0,
                GCConnectionStatus_GC_GOING_DOWN = 0x1,
                GCConnectionStatus_NO_SESSION = 0x2,
                GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE = 0x3,
                GCConnectionStatus_NO_STEAM = 0x4,
                GCConnectionStatus_SUSPENDED = 0x5,
                GCConnectionStatus_STEAM_GOING_DOWN = 0x6
            };
            // Alignment: 4
            // Member count: 3
            enum class CanPlaySequence_t : uint32_t {
                CANNOT_PLAY = 0x0,
                CAN_PLAY_NOW = 0x1,
                CAN_PLAY_ENQUEUED = 0x2
            };
            // Alignment: 1
            // Member count: 5
            enum class EAbilityUpgradeTier : uint8_t {
                EAbilityUpgradeTier_Invalid = 0x0,
                EAbilityUpgradeTier_1 = 0x1,
                EAbilityUpgradeTier_2 = 0x2,
                EAbilityUpgradeTier_3 = 0x3,
                EMaxAbilityUpgradeTier = 0x4
            };
            // Alignment: 4
            // Member count: 3
            enum class UnreachableTargetType_t : uint32_t {
                UTT_ENTITY = 0x0,
                UTT_WORLDPOS = 0x1,
                UTT_GLOBALSYMBOL = 0x2
            };
            // Alignment: 4
            // Member count: 8
            enum class EBaseClientMessages : uint32_t {
                CM_CustomGameEvent = 0x118,
                CM_CustomGameEventBounce = 0x119,
                CM_ClientUIEvent = 0x11A,
                CM_DevPaletteVisibilityChanged = 0x11B,
                CM_WorldUIControllerHasPanelChanged = 0x11C,
                CM_RotateAnchor = 0x11D,
                CM_ListenForResponseFound = 0x11E,
                CM_MAX_BASE = 0x12C
            };
            // Alignment: 4
            // Member count: 7
            enum class ObserverMode_t : uint32_t {
                OBS_MODE_NONE = 0x0,
                OBS_MODE_FIXED = 0x1,
                OBS_MODE_IN_EYE = 0x2,
                OBS_MODE_CHASE = 0x3,
                OBS_MODE_ROAMING = 0x4,
                OBS_MODE_DIRECTED = 0x5,
                NUM_OBSERVER_MODES = 0x6
            };
            // Alignment: 4
            // Member count: 3
            enum class NPCStatusEffectType_t : uint32_t {
                STATUS_EFFECT_NONE = 0x0,
                STATUS_EFFECT_LAST = 0x1,
                STATUS_EFFECT_COUNT = 0x0
            };
            // Alignment: 4
            // Member count: 2
            enum class FuncDoorSpawnPos_t : uint32_t {
                FUNC_DOOR_SPAWN_CLOSED = 0x0,
                FUNC_DOOR_SPAWN_OPEN = 0x1
            };
            // Alignment: 4
            // Member count: 3
            enum class EOverrideBlockLOS_t : uint32_t {
                BLOCK_LOS_DEFAULT = 0x0,
                BLOCK_LOS_FORCE_FALSE = 0x1,
                BLOCK_LOS_FORCE_TRUE = 0x2
            };
            // Alignment: 4
            // Member count: 2
            enum class EGCCitadelCommonMessages : uint32_t {
                k_EMsgAnyToGCReportAsserts = 0x1B58,
                k_EMsgAnyToGCReportAssertsResponse = 0x1B59
            };
            // Alignment: 4
            // Member count: 2
            enum class EModifierScriptedEvent : uint32_t {
                MODIFIER_SCRIPTED_EVENT_INVALID = 0x0,
                MODIFIER_SCRIPTED_EVENT_COUNT = 0x1
            };
            // Alignment: 4
            // Member count: 3
            enum class DevTriggerType_t : uint32_t {
                Invalid = 0x0,
                SpawnIdol = 0x1,
                SpawnNeutrals = 0x2
            };
            // Alignment: 4
            // Member count: 9
            enum class EGameState : uint32_t {
                EGameState_Invalid = 0x0,
                EGameState_Init = 0x1,
                EGameState_WaitingForPlayersToJoin = 0x2,
                EGameState_HeroSelection = 0x3,
                EGameState_PreGameWait = 0x4,
                EGameState_GameInProgress = 0x5,
                EGameState_PostGame = 0x6,
                EGameState_Abandoned = 0x7,
                EGameState_End = 0x8
            };
            // Alignment: 1
            // Member count: 15
            enum class MoveType_t : uint8_t {
                MOVETYPE_NONE = 0x0,
                MOVETYPE_OBSOLETE = 0x1,
                MOVETYPE_WALK = 0x2,
                MOVETYPE_FLY = 0x3,
                MOVETYPE_FLYGRAVITY = 0x4,
                MOVETYPE_VPHYSICS = 0x5,
                MOVETYPE_PUSH = 0x6,
                MOVETYPE_NOCLIP = 0x7,
                MOVETYPE_OBSERVER = 0x8,
                MOVETYPE_STEP = 0x9,
                MOVETYPE_SYNC = 0xA,
                MOVETYPE_CUSTOM = 0xB,
                MOVETYPE_LAST = 0xC,
                MOVETYPE_INVALID = 0xC,
                MOVETYPE_MAX_BITS = 0x5
            };
            // Alignment: 4
            // Member count: 7
            enum class ECitadelDamageType : uint32_t {
                CITADEL_DAMAGETYPE_NONE = 0x0,
                CITADEL_DAMAGETYPE_BULLET = 0x1,
                CITADEL_DAMAGETYPE_ABILITY = 0x2,
                CITADEL_DAMAGETYPE_MELEE = 0x3,
                CITADEL_DAMAGETYPE_ENVIRONMENTAL = 0x4,
                CITADEL_DAMAGETYPE_POISON = 0x5,
                CITADEL_DAMAGETYPE_WEAKPOINT_BONUS = 0x6
            };
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_Synth_Grasp_BulletShield {
                constexpr std::ptrdiff_t m_fBulletShield = 0xC0; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_RadianceVData {
                constexpr std::ptrdiff_t m_RadianceFxParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RadianceDamageParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ClientsideDamageParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDamageRecievedSound = 0x8A8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Warden_RiotProtocol_CastDelay {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_StatStealBase {
            }
            // Parent: CBaseTrigger
            // Field count: 3
            namespace CTriggerSoundscape {
                constexpr std::ptrdiff_t m_hSoundscape = 0x990; // CHandle<CEnvSoundscapeTriggerable>
                constexpr std::ptrdiff_t m_SoundscapeName = 0x998; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_spectators = 0x9A0; // CUtlVector<CHandle<CBasePlayerPawn>>
            }
            // Parent: CCitadelModifierAura
            // Field count: 1
            namespace CCitadel_Modifier_TimeWall_Aura {
                constexpr std::ptrdiff_t m_vecTimeWarps = 0x1C0; // CUtlVector<CHandle<CCitadelBulletTimeWarp>>
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_Rutger_ForceField_PushOut {
                constexpr std::ptrdiff_t m_vStart = 0xC0; // Vector
                constexpr std::ptrdiff_t m_vDest = 0xCC; // Vector
                constexpr std::ptrdiff_t m_vCenter = 0xD8; // Vector
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_SiphonBullets_VData {
                constexpr std::ptrdiff_t m_StealWatcherModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HealModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TracerParticle = 0x658; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x738; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x818; // CSoundEventName
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_SpellShieldVData {
                constexpr std::ptrdiff_t m_SpellShieldBuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_LingeringAssist {
            }
            // Parent: CAI_CitadelNPC
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_iLane (int)
            // NetworkVarNames: m_hTargetedEnemy (EHANDLE)
            // NetworkVarNames: m_flFadeOutStart (GameTime_t)
            // NetworkVarNames: m_flFadeOutEnd (GameTime_t)
            // NetworkVarNames: m_vecElectricBeamLookTarget (Vector)
            // NetworkVarNames: m_nElectricBeamCasts (int)
            namespace CNPC_Boss_Tier2 {
                constexpr std::ptrdiff_t m_vecStartingPosition = 0x17F8; // Vector
                constexpr std::ptrdiff_t m_iLane = 0x1804; // int32
                constexpr std::ptrdiff_t m_hTargetedEnemy = 0x1810; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flFadeOutStart = 0x1814; // GameTime_t
                constexpr std::ptrdiff_t m_flFadeOutEnd = 0x1818; // GameTime_t
                constexpr std::ptrdiff_t m_vecElectricBeamLookTarget = 0x1840; // Vector
                constexpr std::ptrdiff_t m_nElectricBeamCasts = 0x184C; // int32
                constexpr std::ptrdiff_t m_eventOnBossKilled = 0x1878; // CEntityIOOutput
            }
            // Parent: CBreakableProp
            // Field count: 22
            //
            // Metadata:
            // NetworkVarNames: m_bUseHitboxesForRenderBox (bool)
            // NetworkVarNames: m_bUseAnimGraph (bool)
            namespace CDynamicProp {
                constexpr std::ptrdiff_t m_bCreateNavObstacle = 0xC00; // bool
                constexpr std::ptrdiff_t m_bNavObstacleUpdatesOverridden = 0xC01; // bool
                constexpr std::ptrdiff_t m_bUseHitboxesForRenderBox = 0xC02; // bool
                constexpr std::ptrdiff_t m_bUseAnimGraph = 0xC03; // bool
                constexpr std::ptrdiff_t m_pOutputAnimBegun = 0xC08; // CEntityIOOutput
                constexpr std::ptrdiff_t m_pOutputAnimOver = 0xC30; // CEntityIOOutput
                constexpr std::ptrdiff_t m_pOutputAnimLoopCycleOver = 0xC58; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAnimReachedStart = 0xC80; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAnimReachedEnd = 0xCA8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iszIdleAnim = 0xCD0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nIdleAnimLoopMode = 0xCD8; // AnimLoopMode_t
                constexpr std::ptrdiff_t m_bRandomizeCycle = 0xCDC; // bool
                constexpr std::ptrdiff_t m_bStartDisabled = 0xCDD; // bool
                constexpr std::ptrdiff_t m_bFiredStartEndOutput = 0xCDE; // bool
                constexpr std::ptrdiff_t m_bForceNpcExclude = 0xCDF; // bool
                constexpr std::ptrdiff_t m_bCreateNonSolid = 0xCE0; // bool
                constexpr std::ptrdiff_t m_bIsOverrideProp = 0xCE1; // bool
                constexpr std::ptrdiff_t m_iInitialGlowState = 0xCE4; // int32
                constexpr std::ptrdiff_t m_nGlowRange = 0xCE8; // int32
                constexpr std::ptrdiff_t m_nGlowRangeMin = 0xCEC; // int32
                constexpr std::ptrdiff_t m_glowColor = 0xCF0; // Color
                constexpr std::ptrdiff_t m_nGlowTeam = 0xCF4; // int32
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CFuncIllusionary {
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Rutger_ForceField_VData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_VictimPushModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x1580; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_strDomeCreated = 0x1590; // CSoundEventName
                constexpr std::ptrdiff_t m_strChargeUpSound = 0x15A0; // CSoundEventName
                constexpr std::ptrdiff_t m_strPushAndDamage = 0x15B0; // CSoundEventName
                constexpr std::ptrdiff_t m_ChronoSphereChargeParticle = 0x15C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Tokamak_CrimsonCannonVData {
                constexpr std::ptrdiff_t m_LaserShot = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChargeParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CasterOnlyTargetParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyTargetedParticle = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strEnemyBeenTargetedSound = 0x18E0; // CSoundEventName
                constexpr std::ptrdiff_t m_strCasterTargetSelectedSound = 0x18F0; // CSoundEventName
                constexpr std::ptrdiff_t m_strFireSound = 0x1900; // CSoundEventName
                constexpr std::ptrdiff_t m_strImpactSound = 0x1910; // CSoundEventName
                constexpr std::ptrdiff_t m_strBlockedSound = 0x1920; // CSoundEventName
            }
            // Parent: CCitadel_Modifier_Base
            // Field count: 0
            namespace CCitadel_Modifier_MagicCarpet_Shields {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_HollowPoint_Proc {
                constexpr std::ptrdiff_t m_nStacksPerBullet = 0xC0; // int32
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TechOverflowProcWatcherVData {
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x638; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_ProcModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildupSuccessEffect = 0x658; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: None
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: scale (int16)
            // NetworkVarNames: origin (Vector)
            // NetworkVarNames: bClip3DSkyBoxNearToWorldFar (bool)
            // NetworkVarNames: flClip3DSkyBoxNearToWorldFarOffset (float32)
            // NetworkVarNames: fog (fogparams_t)
            // NetworkVarNames: m_nWorldGroupID (WorldGroupId_t)
            namespace sky3dparams_t {
                constexpr std::ptrdiff_t scale = 0x8; // int16
                constexpr std::ptrdiff_t origin = 0xC; // Vector
                constexpr std::ptrdiff_t bClip3DSkyBoxNearToWorldFar = 0x18; // bool
                constexpr std::ptrdiff_t flClip3DSkyBoxNearToWorldFarOffset = 0x1C; // float32
                constexpr std::ptrdiff_t fog = 0x20; // fogparams_t
                constexpr std::ptrdiff_t m_nWorldGroupID = 0x88; // WorldGroupId_t
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CTriggerRemove {
                constexpr std::ptrdiff_t m_OnRemove = 0x990; // CEntityIOOutput
            }
            // Parent: CCitadelProjectile
            // Field count: 1
            namespace CCitadel_Projectile_WreckingBall {
                constexpr std::ptrdiff_t m_bBroken = 0x880; // bool
            }
            // Parent: CBaseModelEntity
            // Field count: 6
            //
            // Metadata:
            // MNetworkExcludeByName
            // NetworkVarNames: m_ShardDesc (ice_path_shard_model_desc_t)
            // NetworkVarNames: m_qForward (QAngle)
            // NetworkVarNames: m_flStartTime (GameTime_t)
            // NetworkVarNames: m_flEndTime (GameTime_t)
            namespace CCitadel_Ice_Path_Shard_Physics {
                constexpr std::ptrdiff_t m_ShardDesc = 0x7C0; // ice_path_shard_model_desc_t
                constexpr std::ptrdiff_t m_qForward = 0x7F8; // QAngle
                constexpr std::ptrdiff_t m_flStartTime = 0x804; // GameTime_t
                constexpr std::ptrdiff_t m_flEndTime = 0x808; // GameTime_t
                constexpr std::ptrdiff_t m_bIsBase = 0x80C; // bool
                constexpr std::ptrdiff_t m_hTrooperTrigger = 0x810; // CHandle<CTriggerIcePathVolume>
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CCitadelZiplineCaptureTrigger {
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterName {
                constexpr std::ptrdiff_t m_iFilterName = 0x540; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CProjectedDecal {
                constexpr std::ptrdiff_t m_nTexture = 0x4E8; // int32
                constexpr std::ptrdiff_t m_flDistance = 0x4EC; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Kobun {
                constexpr std::ptrdiff_t m_bFlipOffset = 0xB00; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Disruptive_Charge {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Vandal_Pillar {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Viper_DebuffDaggerVData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_CloakingDevice_Active_Ambush_VData {
                constexpr std::ptrdiff_t m_InvisRevealedParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AmbushParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strActivateAmbushSound = 0x7C8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Tech_Defender_Shredders_Debuff {
            }
            // Parent: CFuncTrackChange
            // Field count: 0
            namespace CFuncTrackAuto {
            }
            // Parent: CBreakable
            // Field count: 0
            namespace CPushable {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Mirage_SandPhantom_ProcReady_VData {
                constexpr std::ptrdiff_t m_ProcReadyParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strProcReadySound = 0x6E8; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Synth_Blitz_VData {
                constexpr std::ptrdiff_t m_BlitzModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TechAmpModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strProcSound = 0x1660; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Dust_Storm {
                constexpr std::ptrdiff_t m_hSpinningBladeAbility = 0xB00; // CHandle<CCitadel_Ability_Spinning_Blade>
                constexpr std::ptrdiff_t m_vTargets = 0xB08; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ImmobilizeTrap {
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ChainLightningVData {
                constexpr std::ptrdiff_t m_TracerParticle = 0x738; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChainModifier = 0x818; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_MagicShield_SpiritBuff {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityMedicHealVData {
                constexpr std::ptrdiff_t m_HealBeamParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealTargetParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strHealCastSound = 0x1720; // CSoundEventName
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CCitadelSpectateNode {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ItemPickupAuraVData {
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CInfoRemarkable {
                constexpr std::ptrdiff_t m_iTimesRemarkedUpon = 0x4E8; // int32
                constexpr std::ptrdiff_t m_szRemarkContext = 0x4F0; // CUtlSymbolLarge
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CTriggerMultiple {
                constexpr std::ptrdiff_t m_OnTrigger = 0x990; // CEntityIOOutput
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Thumper_BulletWatcherVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x6E8; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Protection_RacketVData {
                constexpr std::ptrdiff_t m_CastOtherParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ArmorModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CServerOnlyEntity
            // Field count: 2
            namespace CCitadelTeleportLocation {
                constexpr std::ptrdiff_t m_iLane = 0x4E8; // int32
                constexpr std::ptrdiff_t m_iObjective = 0x4EC; // int32
            }
            // Parent: CBaseEntity
            // Field count: 13
            namespace CAI_Relationship {
                constexpr std::ptrdiff_t m_iszSubject = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSubjectClass = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nSubjectClassifyAs = 0x500; // Class_T
                constexpr std::ptrdiff_t m_iszTargetClass = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nTargetClassifyAs = 0x510; // Class_T
                constexpr std::ptrdiff_t m_iDisposition = 0x514; // int32
                constexpr std::ptrdiff_t m_iRank = 0x518; // int32
                constexpr std::ptrdiff_t m_fStartActive = 0x51C; // bool
                constexpr std::ptrdiff_t m_bIsActive = 0x51D; // bool
                constexpr std::ptrdiff_t m_iPreviousDisposition = 0x520; // int32
                constexpr std::ptrdiff_t m_flRadius = 0x524; // float32
                constexpr std::ptrdiff_t m_iPreviousRank = 0x528; // int32
                constexpr std::ptrdiff_t m_bReciprocal = 0x52C; // bool
            }
            // Parent: CBodyComponent
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_skeletonInstance (CSkeletonInstance)
            namespace CBodyComponentSkeletonInstance {
                constexpr std::ptrdiff_t m_skeletonInstance = 0x80; // CSkeletonInstance
            }
            // Parent: CAI_CitadelNPC
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_iLane (int)
            // NetworkVarNames: m_angTargeting1 (QAngle)
            // NetworkVarNames: m_angTargeting2 (QAngle)
            // NetworkVarNames: m_nElectricBeamCasts (int)
            // NetworkVarNames: m_eAliveState (ETier3State_t)
            // NetworkVarNames: m_ePhase (ETier3Phase_t)
            namespace CNPC_Boss_Tier3 {
                constexpr std::ptrdiff_t m_iLane = 0x17F0; // int32
                constexpr std::ptrdiff_t m_angTargeting1 = 0x1824; // QAngle
                constexpr std::ptrdiff_t m_angTargeting2 = 0x1830; // QAngle
                constexpr std::ptrdiff_t m_nElectricBeamCasts = 0x183C; // int32
                constexpr std::ptrdiff_t m_eventOnBossKilled = 0x1860; // CEntityIOOutput
                constexpr std::ptrdiff_t m_backdoorProtectionTrigger = 0x1888; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_eAliveState = 0x1894; // ETier3State_t
                constexpr std::ptrdiff_t m_ePhase = 0x189C; // ETier3Phase_t
            }
            // Parent: CBaseTrigger
            // Field count: 7
            namespace CTriggerPush {
                constexpr std::ptrdiff_t m_angPushEntitySpace = 0x990; // QAngle
                constexpr std::ptrdiff_t m_vecPushDirEntitySpace = 0x99C; // Vector
                constexpr std::ptrdiff_t m_bTriggerOnStartTouch = 0x9A8; // bool
                constexpr std::ptrdiff_t m_bUsePathSimple = 0x9A9; // bool
                constexpr std::ptrdiff_t m_iszPathSimpleName = 0x9B0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_PathSimple = 0x9B8; // CPathSimple*
                constexpr std::ptrdiff_t m_splinePushType = 0x9C0; // uint32
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CCitadel_Projectile_Bebop_Hook {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_hAbilityToTrigger (CHandle<CCitadelBaseAbility>)
            // NetworkVarNames: m_SwappedToTime (GameTime_t)
            namespace CCitadelBaseTriggerAbility {
                constexpr std::ptrdiff_t m_hAbilityToTrigger = 0xB00; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_SwappedToTime = 0xB04; // GameTime_t
            }
            // Parent: CBaseFilter
            // Field count: 3
            namespace FilterHealth {
                constexpr std::ptrdiff_t m_bAdrenalineActive = 0x540; // bool
                constexpr std::ptrdiff_t m_iHealthMin = 0x544; // int32
                constexpr std::ptrdiff_t m_iHealthMax = 0x548; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Bull_Leap_Boosting_Crash {
                constexpr std::ptrdiff_t m_vecHitEntities = 0xC0; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityPowerSurgeVData {
                constexpr std::ptrdiff_t m_ChainParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastHitParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ChainModifier = 0x1730; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_AfterburnWatcherVData {
                constexpr std::ptrdiff_t m_AfterburnDotModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x648; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x658; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Item_Bleeding_Bullets_DamageOverTime {
                constexpr std::ptrdiff_t m_flLastTickTime = 0xC0; // GameTime_t
            }
            // Parent: CBaseTrigger
            // Field count: 5
            namespace CTriggerProximity {
                constexpr std::ptrdiff_t m_hMeasureTarget = 0x990; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iszMeasureTarget = 0x998; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_fRadius = 0x9A0; // float32
                constexpr std::ptrdiff_t m_nTouchers = 0x9A4; // int32
                constexpr std::ptrdiff_t m_NearestEntityDistance = 0x9A8; // CEntityOutputTemplate<float32>
            }
            // Parent: CFuncBrush
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_EffectName (string_t)
            namespace CFuncElectrifiedVolume {
                constexpr std::ptrdiff_t m_EffectName = 0x7E0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_EffectInterpenetrateName = 0x7E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_EffectZapName = 0x7F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszEffectSource = 0x7F8; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Field count: 1
            namespace CBaseDMStart {
                constexpr std::ptrdiff_t m_Master = 0x4E8; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_AirDamping {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ShieldGuy_Ability03 {
            }
            // Parent: CCitadel_Modifier_InvisVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierShadowStepVData {
                constexpr std::ptrdiff_t m_SilenceModifier = 0x8D0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ArmorDebuff = 0x8E0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_InvisChangedEffect = 0x8F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShadowRevealedEffect = 0x9D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flMinInvisDuration = 0xAB0; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PowerSurge {
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PowerSurgeVData {
                constexpr std::ptrdiff_t m_TracerParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WeaponFxParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strWeaponShootSound = 0x7C8; // CSoundEventName
                constexpr std::ptrdiff_t m_strBulletWhizSound = 0x7D8; // CSoundEventName
                constexpr std::ptrdiff_t m_DebuffModifier = 0x7E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 19
            //
            // Metadata:
            // NetworkVarNames: m_flTimeStartZipping (GameTime_t)
            // NetworkVarNames: m_flTimeForKnockdownProtection (GameTime_t)
            // NetworkVarNames: m_flTimeStopZipping (GameTime_t)
            // NetworkVarNames: m_flCasterSpeed (float)
            // NetworkVarNames: m_vecInitialVel (CNetworkVelocityVector)
            // NetworkVarNames: m_vecAttachPoint (Vector)
            // NetworkVarNames: m_pPrevNode (EHANDLE)
            // NetworkVarNames: m_pNextNode (EHANDLE)
            // NetworkVarNames: m_flTimeEnterState (GameTime_t)
            // NetworkVarNames: m_flLatchTime (GameTime_t)
            // NetworkVarNames: m_flDamagedTime (GameTime_t)
            // NetworkVarNames: m_eAttachState (EAttachState_t)
            // NetworkVarNames: m_iAttachedZipLineLane (int)
            // NetworkVarNames: m_bDroppedFromZipline (bool)
            // NetworkVarNames: m_vAttachZipLineOffset (Vector)
            namespace CCitadel_Ability_ZipLine {
                constexpr std::ptrdiff_t m_flActivatePressTime = 0xEF0; // GameTime_t
                constexpr std::ptrdiff_t m_bThinking = 0xEF4; // bool
                constexpr std::ptrdiff_t m_bMoveCollidedPushUp = 0xEF5; // bool
                constexpr std::ptrdiff_t m_flTimeStartZipping = 0xEFC; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeForKnockdownProtection = 0xF00; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeStopZipping = 0xF04; // GameTime_t
                constexpr std::ptrdiff_t m_flCasterSpeed = 0xF08; // float32
                constexpr std::ptrdiff_t m_vecInitialVel = 0xF0C; // CNetworkVelocityVector
                constexpr std::ptrdiff_t m_vecAttachPoint = 0xF40; // Vector
                constexpr std::ptrdiff_t m_pPrevNode = 0xF4C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_pNextNode = 0xF50; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flTimeEnterState = 0xF54; // GameTime_t
                constexpr std::ptrdiff_t m_flLatchTime = 0xF58; // GameTime_t
                constexpr std::ptrdiff_t m_flDamagedTime = 0xF5C; // GameTime_t
                constexpr std::ptrdiff_t m_eAttachState = 0xF60; // EAttachState_t
                constexpr std::ptrdiff_t m_iAttachedZipLineLane = 0xF64; // int32
                constexpr std::ptrdiff_t m_bDroppedFromZipline = 0xF68; // bool
                constexpr std::ptrdiff_t m_hAttachZipLine = 0xF69; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_vAttachZipLineOffset = 0xF6C; // Vector
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 0
            namespace CCitadel_Ability_SuperNeutralIncendiary {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TeamRelativeParticleVData {
                constexpr std::ptrdiff_t m_ParentViewParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_OtherPlayerViewParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CNPC_SimpleAnimatingAI
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelAbilityComponent (CCitadelAbilityComponent::Storage_t)
            namespace CNPC_TeslaCoil {
                constexpr std::ptrdiff_t m_CCitadelAbilityComponent = 0xBE0; // CCitadelAbilityComponent
                constexpr std::ptrdiff_t m_flDeployTime = 0xDEC; // float32
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FrenzyAuraVData {
                constexpr std::ptrdiff_t m_KillModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_Silenced
            // Field count: 0
            namespace CCitadel_Modifier_Targeted_Silence_Debuff {
            }
            // Parent: CCitadel_Modifier_PowerUp
            // Field count: 0
            namespace CCitadel_Modifier_BreakablePropCooldownReduction {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CGameModifier_PlayEffectOnDeath {
                constexpr std::ptrdiff_t m_sEffect = 0xC0; // CUtlString
            }
            // Parent: CLogicalEntity
            // Field count: 6
            namespace CPhysicsNPCSolver {
                constexpr std::ptrdiff_t m_pNext = 0x4F0; // CPhysicsNPCSolver*
                constexpr std::ptrdiff_t m_hNPC = 0x4F8; // CHandle<CAI_BaseNPC>
                constexpr std::ptrdiff_t m_hEntity = 0x4FC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_separationDuration = 0x508; // float32
                constexpr std::ptrdiff_t m_cancelTime = 0x50C; // GameTime_t
                constexpr std::ptrdiff_t m_allowIntersection = 0x510; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierRapidFireChannelVData {
                constexpr std::ptrdiff_t m_flAirDrag = 0x608; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_BulletFlurryVData {
                constexpr std::ptrdiff_t m_ChannelParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BulletFlurryModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CBaseTrigger
            // Field count: 2
            namespace CTriggerModifier {
                constexpr std::ptrdiff_t m_iszModifierName = 0x990; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_tModifier = 0x998; // CUtlStringToken
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CGameModifier_SetModelScale {
                constexpr std::ptrdiff_t m_flOldModelScale = 0xC0; // float32
            }
            // Parent: CBaseModelEntity
            // Field count: 5
            namespace CTriggerBrush {
                constexpr std::ptrdiff_t m_OnStartTouch = 0x7C0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEndTouch = 0x7E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUse = 0x810; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iInputFilter = 0x838; // int32
                constexpr std::ptrdiff_t m_iDontMessageParent = 0x83C; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_Blitz_TechAmp_VData {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_WreckingBall_Debuff {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Puddle {
            }
            // Parent: CitadelItemVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_TechDamagePulseVData {
                constexpr std::ptrdiff_t m_PulseParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetParticle = 0x1688; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strPulseTickSound = 0x1768; // CSoundEventName
                constexpr std::ptrdiff_t m_iMaxTargets = 0x1778; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BulletArmorReduction {
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityProperty_TechRange {
            }
            // Parent: CBeam
            // Field count: 19
            namespace CEnvBeam {
                constexpr std::ptrdiff_t m_active = 0x860; // int32
                constexpr std::ptrdiff_t m_spriteTexture = 0x868; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_iszStartEntity = 0x870; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszEndEntity = 0x878; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_life = 0x880; // float32
                constexpr std::ptrdiff_t m_boltWidth = 0x884; // float32
                constexpr std::ptrdiff_t m_noiseAmplitude = 0x888; // float32
                constexpr std::ptrdiff_t m_speed = 0x88C; // int32
                constexpr std::ptrdiff_t m_restrike = 0x890; // float32
                constexpr std::ptrdiff_t m_iszSpriteName = 0x898; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_frameStart = 0x8A0; // int32
                constexpr std::ptrdiff_t m_vEndPointWorld = 0x8A4; // Vector
                constexpr std::ptrdiff_t m_vEndPointRelative = 0x8B0; // Vector
                constexpr std::ptrdiff_t m_radius = 0x8BC; // float32
                constexpr std::ptrdiff_t m_TouchType = 0x8C0; // Touch_t
                constexpr std::ptrdiff_t m_iFilterName = 0x8C8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hFilter = 0x8D0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iszDecal = 0x8D8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnTouchedByEntity = 0x8E0; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Field count: 2
            namespace CTonemapTrigger {
                constexpr std::ptrdiff_t m_tonemapControllerName = 0x990; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hTonemapController = 0x998; // CEntityHandle
            }
            // Parent: CNodeEnt
            // Field count: 0
            namespace CNodeEnt_InfoNodeAirHint {
            }
            // Parent: None
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_iAttributeDefinitionIndex (attrib_definition_index_t)
            // NetworkVarNames: m_flValue (float)
            namespace CEconItemAttribute {
                constexpr std::ptrdiff_t m_iAttributeDefinitionIndex = 0x30; // attrib_definition_index_t
                constexpr std::ptrdiff_t m_flValue = 0x34; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Bolo_Leech {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_flFlurryEndTime (CCitadelAutoScaledTime)
            namespace CCitadel_Ability_BulletFlurry {
                constexpr std::ptrdiff_t m_flFlurryEndTime = 0xB00; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_vecShootTargets = 0xC30; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nNumPlayersKilled = 0xC48; // int32
                constexpr std::ptrdiff_t m_nShootIndex = 0xC4C; // int32
                constexpr std::ptrdiff_t m_nShootIndexNPC = 0xC50; // int32
                constexpr std::ptrdiff_t m_nBurstShots = 0xC54; // int32
                constexpr std::ptrdiff_t m_flNextAttackTime = 0xC58; // GameTime_t
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CFogTrigger {
                constexpr std::ptrdiff_t m_fog = 0x990; // fogparams_t
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierAirLiftExplodeAuraVData {
                constexpr std::ptrdiff_t m_empWaveParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BreakablePropExtraGoldPickup {
            }
            // Parent: CLogicalEntity
            // Field count: 5
            namespace CLogicCollisionPair {
                constexpr std::ptrdiff_t m_nameAttach1 = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nameAttach2 = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_supportMultipleEntitiesWithSameName = 0x4F8; // bool
                constexpr std::ptrdiff_t m_disabled = 0x4F9; // bool
                constexpr std::ptrdiff_t m_succeeded = 0x4FA; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Rutger_Pulse {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierAerialAssaultWatcherVData {
                constexpr std::ptrdiff_t m_AssaultModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_ColdFrontVData {
                constexpr std::ptrdiff_t m_AOEModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PreventHealing {
            }
            // Parent: CAI_CitadelNPC
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_iLane (int)
            // NetworkVarNames: m_hTargetedEnemy (EHANDLE)
            // NetworkVarNames: m_flHealingChargeParticlePct (float)
            namespace CNPC_Trooper {
                constexpr std::ptrdiff_t m_iLane = 0x17F8; // int32
                constexpr std::ptrdiff_t m_iLaneSlot = 0x17FC; // int32
                constexpr std::ptrdiff_t m_hSpawnWaveController = 0x1820; // CHandle<CInfoTrooperBossSpawn>
                constexpr std::ptrdiff_t m_hTrooperSpawnPoint = 0x1824; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hNearDeathModifier = 0x1848; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_hTargetedEnemy = 0x1868; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flHealingChargeParticlePct = 0x186C; // float32
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CConditionalCollidable {
            }
            // Parent: CBaseTrigger
            // Field count: 2
            namespace CTriggerObscuredVolume {
                constexpr std::ptrdiff_t m_iszModifierName = 0x990; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_tModifier = 0x998; // CUtlStringToken
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CProjectile_Synth_PlasmaFlux {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_WeaponUpgrade_HeadshotBooster {
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 4
            namespace CPointTeleport {
                constexpr std::ptrdiff_t m_vSaveOrigin = 0x4E8; // Vector
                constexpr std::ptrdiff_t m_vSaveAngles = 0x4F4; // QAngle
                constexpr std::ptrdiff_t m_bTeleportParentedEntities = 0x500; // bool
                constexpr std::ptrdiff_t m_bTeleportUseCurrentAngle = 0x501; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_Crescendo_PostAOE_VData {
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierRapidFireAirJuggleVData {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCrowdControlVData {
                constexpr std::ptrdiff_t m_CastParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SlowModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 19
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ProximityRitual_VData {
                constexpr std::ptrdiff_t m_PredatoryStatueModel = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_CatReappearParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CatDisappearParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CatEyesParticle = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CatSummonParticle = 0x18E0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CatRecallParticle = 0x19C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RecallLineParticle = 0x1AA0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strRecallSound = 0x1B80; // CSoundEventName
                constexpr std::ptrdiff_t m_strKilledSound = 0x1B90; // CSoundEventName
                constexpr std::ptrdiff_t m_PredatoryStatueModifier = 0x1BA0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_RecentDamageModifier = 0x1BB0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flHeavyMeleeDmg = 0x1BC0; // float32
                constexpr std::ptrdiff_t m_flLightMeleeDmg = 0x1BC4; // float32
                constexpr std::ptrdiff_t m_flAbilityDamageScale = 0x1BC8; // float32
                constexpr std::ptrdiff_t m_flNPCDamageScale = 0x1BCC; // float32
                constexpr std::ptrdiff_t m_flCastDelayMin = 0x1BD0; // float32
                constexpr std::ptrdiff_t m_flCastDelayMax = 0x1BD4; // float32
                constexpr std::ptrdiff_t m_flCastDelayMaxDist = 0x1BD8; // float32
                constexpr std::ptrdiff_t m_flPostCastCooldown = 0x1BDC; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_bAirRaiding (bool)
            namespace CCitadel_Ability_PowerJump {
                constexpr std::ptrdiff_t m_nTargetingParticleIndex = 0xB00; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bAirRaiding = 0xB04; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierTier3BossLaserBeamVData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_vTop (CNetworkOriginQuantizedVector)
            // NetworkVarNames: m_vBottom (CNetworkOriginQuantizedVector)
            // NetworkVarNames: m_bRequestStopClimbing (bool)
            // NetworkVarNames: m_bRequestJumpToRoof (bool)
            // NetworkVarNames: m_flLastMoveTime (GameTime_t)
            // NetworkVarNames: m_flMoveDownStartTime (GameTime_t)
            // NetworkVarNames: m_eClimbState (EClimbRopeState_t)
            namespace CCitadel_Ability_Climb_Rope {
                constexpr std::ptrdiff_t m_vTop = 0xB00; // CNetworkOriginQuantizedVector
                constexpr std::ptrdiff_t m_vBottom = 0xB30; // CNetworkOriginQuantizedVector
                constexpr std::ptrdiff_t m_flActivatePressTime = 0xB60; // GameTime_t
                constexpr std::ptrdiff_t m_flDisconnectTime = 0xB64; // GameTime_t
                constexpr std::ptrdiff_t m_flClimbStartTime = 0xB68; // GameTime_t
                constexpr std::ptrdiff_t m_vLastPos = 0xB6C; // Vector
                constexpr std::ptrdiff_t m_bRequestStopClimbing = 0xB80; // bool
                constexpr std::ptrdiff_t m_bRequestJumpToRoof = 0xB81; // bool
                constexpr std::ptrdiff_t m_flLastMoveTime = 0xB84; // GameTime_t
                constexpr std::ptrdiff_t m_flMoveDownStartTime = 0xB88; // GameTime_t
                constexpr std::ptrdiff_t m_eClimbState = 0xB8C; // EClimbRopeState_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_hDummyForCamera (EHANDLE)
            namespace CCitadel_Ability_Mirage_Teleport {
                constexpr std::ptrdiff_t m_hDummyForCamera = 0xB08; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vCastStartPosition = 0xB0C; // Vector
                constexpr std::ptrdiff_t m_vTargetPosition = 0xB18; // Vector
                constexpr std::ptrdiff_t m_vTargetAngles = 0xB24; // QAngle
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_Warden_RiotProtocol {
                constexpr std::ptrdiff_t m_mapEntToTimeHit = 0xC0; // CUtlOrderedMap<CHandle<CBaseEntity>,GameTime_t>
                constexpr std::ptrdiff_t m_nNumPlayersAffected = 0xE8; // int32
                constexpr std::ptrdiff_t m_nNumPlayersKilled = 0xEC; // int32
                constexpr std::ptrdiff_t m_playerAngles = 0xF0; // QAngle
                constexpr std::ptrdiff_t m_ConeParticle = 0xFC; // ParticleIndex_t
            }
            // Parent: CAbilityMeleeVData
            // Field count: 14
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHoldMelee_VData {
                constexpr std::ptrdiff_t m_mapAttacks = 0x1580; // CUtlOrderedMap<EMeleeHold_AttackType,AttackData_t>
                constexpr std::ptrdiff_t m_flNextAttackOnParry = 0x15A8; // float32
                constexpr std::ptrdiff_t m_flParryWindow = 0x15AC; // float32
                constexpr std::ptrdiff_t m_flParryStunTime = 0x15B0; // float32
                constexpr std::ptrdiff_t m_flParryCooldown = 0x15B4; // float32
                constexpr std::ptrdiff_t m_AirMeleeUpScale = 0x15B8; // CRemapFloat
                constexpr std::ptrdiff_t m_HoldBeginEffect = 0x15C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SuccessfulParryParticle = 0x16A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ParryActivateParticle = 0x1788; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_cameraSequenceHoldStart = 0x1868; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceHitImpact = 0x18F0; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_strHoldBegin = 0x1978; // CSoundEventName
                constexpr std::ptrdiff_t m_strSuccessfulParrySound = 0x1988; // CSoundEventName
                constexpr std::ptrdiff_t m_ParryVictimModifier = 0x1998; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_Intrinsic_BaseVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ReinforcingCasingsVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_SlowImmunity {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_VisibleDuration {
            }
            // Parent: CAI_CitadelNPCVData
            // Field count: 40
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAI_NPC_TrooperVData {
                constexpr std::ptrdiff_t m_TrooperType = 0xFB0; // TrooperType_t
                constexpr std::ptrdiff_t m_flTrooperDamageResistPct = 0xFB4; // float32
                constexpr std::ptrdiff_t m_flT1BossDamageResistPct = 0xFB8; // float32
                constexpr std::ptrdiff_t m_flT2BossDamageResistPct = 0xFBC; // float32
                constexpr std::ptrdiff_t m_flBarrackGuardianDamageResistPct = 0xFC0; // float32
                constexpr std::ptrdiff_t m_flNearDeathDuration = 0xFC4; // float32
                constexpr std::ptrdiff_t m_flFlySpeed = 0xFC8; // float32
                constexpr std::ptrdiff_t m_flFlyHeight = 0xFCC; // float32
                constexpr std::ptrdiff_t m_flMeleeDamage = 0xFD0; // float32
                constexpr std::ptrdiff_t m_flMeleeDuration = 0xFD4; // float32
                constexpr std::ptrdiff_t m_flMeleeChargeRange = 0xFD8; // float32
                constexpr std::ptrdiff_t m_flAttackT1BossMaxRange = 0xFDC; // float32
                constexpr std::ptrdiff_t m_flAttackTrooperMaxRange = 0xFE0; // float32
                constexpr std::ptrdiff_t m_flShieldDamageResistPct = 0xFE4; // float32
                constexpr std::ptrdiff_t m_flHealthBarOffsetDucking = 0xFE8; // float32
                constexpr std::ptrdiff_t m_flTrooperDPS = 0xFEC; // float32
                constexpr std::ptrdiff_t m_flPlayerDPS = 0xFF0; // float32
                constexpr std::ptrdiff_t m_flT1BossDPS = 0xFF4; // float32
                constexpr std::ptrdiff_t m_flT1BossDPSBaseResist = 0xFF8; // float32
                constexpr std::ptrdiff_t m_flT1BossDPSMaxResist = 0xFFC; // float32
                constexpr std::ptrdiff_t m_flT1BossDPSMaxResistTimeInSeconds = 0x1000; // float32
                constexpr std::ptrdiff_t m_flT2BossDPS = 0x1004; // float32
                constexpr std::ptrdiff_t m_flT2BossDPSBaseResist = 0x1008; // float32
                constexpr std::ptrdiff_t m_flT2BossDPSMaxResist = 0x100C; // float32
                constexpr std::ptrdiff_t m_flT2BossDPSMaxResistTimeInSeconds = 0x1010; // float32
                constexpr std::ptrdiff_t m_flT3BossDPS = 0x1014; // float32
                constexpr std::ptrdiff_t m_flBarrackBossDPS = 0x1018; // float32
                constexpr std::ptrdiff_t m_flGeneratorBossDPS = 0x101C; // float32
                constexpr std::ptrdiff_t m_BossAttackParticle = 0x1020; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LastHitParticle = 0x1100; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetingLaserParticle = 0x11E0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetingEyeFlashParticle = 0x12C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sZiplineContainerBreakFromDamageParticle = 0x13A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sZiplineContainerBreakFromLandingParticle = 0x1480; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_MedicHealActiveParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sPlayerLastHitSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_sCelebrationSound = 0x1650; // CSoundEventName
                constexpr std::ptrdiff_t m_sZiplineContainerBreakSound = 0x1660; // CSoundEventName
                constexpr std::ptrdiff_t m_NearDeathModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TrooperBossInvulnModifier = 0x1680; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CParticleSystem
            // Field count: 4
            //
            // Metadata:
            // MNetworkExcludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_iFriendlyEffectIndex (HParticleSystemDefinitionStrong)
            // NetworkVarNames: m_iEnemyEffectIndex (HParticleSystemDefinitionStrong)
            namespace CTeamRelativeParticleSystem {
                constexpr std::ptrdiff_t m_iszFriendlyEffectName = 0xD38; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszEnemyEffectName = 0xD40; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iFriendlyEffectIndex = 0xD48; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                constexpr std::ptrdiff_t m_iEnemyEffectIndex = 0xD50; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Fathom_ReefdwellerHarpoon_VData {
                constexpr std::ptrdiff_t m_DetachBuff = 0x1560; // CEmbeddedSubclass<CCitadel_Modifier_ReefdwellerHarpoon_DetachBuff>
                constexpr std::ptrdiff_t m_strSwapStarted = 0x1570; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSequenceFlying = 0x1580; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_flAirSpeedMax = 0x1608; // float32
                constexpr std::ptrdiff_t m_flFallSpeedMax = 0x160C; // float32
                constexpr std::ptrdiff_t m_flAirDrag = 0x1610; // float32
                constexpr std::ptrdiff_t m_flInitialSlowSpeed = 0x1614; // float32
                constexpr std::ptrdiff_t m_flInitialSpeedBias = 0x1618; // float32
                constexpr std::ptrdiff_t m_flMaxSurfacePitch = 0x161C; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_SandPhantom_WhirlwindEvasion {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_LifeDrain {
                constexpr std::ptrdiff_t m_nFXIndex = 0xC0; // ParticleIndex_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_StaticChargeVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZapParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemRefresherVData {
                constexpr std::ptrdiff_t m_RefreshParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Hero_Testing_Damage_AuraDebuff {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PowerUp {
            }
            // Parent: CAI_Component
            // Field count: 38
            namespace CAI_Navigator {
                constexpr std::ptrdiff_t m_flGoalStoppingDistance = 0x48; // float32
                constexpr std::ptrdiff_t m_navType = 0x4C; // Navigation_t
                constexpr std::ptrdiff_t m_bNavComplete = 0x50; // bool
                constexpr std::ptrdiff_t m_pPath = 0x70; // CAI_Path*
                constexpr std::ptrdiff_t m_hLosTarget = 0x78; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vThreatPos = 0x7C; // Vector
                constexpr std::ptrdiff_t m_interruptPathWaypoints = 0x88; // CAI_WaypointList
                constexpr std::ptrdiff_t m_flLastSuccessfulSimplifyTime = 0x90; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeLastAvoidanceTriangulate = 0x94; // GameTime_t
                constexpr std::ptrdiff_t m_flLastMoveTime = 0x98; // GameTime_t
                constexpr std::ptrdiff_t m_flStartWaitingForFacingTime = 0x9C; // GameTime_t
                constexpr std::ptrdiff_t m_bPeerMoveWait = 0xA0; // bool
                constexpr std::ptrdiff_t m_hPeerWaitingOn = 0xA4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_PeerWaitMoveTimer = 0xA8; // CSimTimer
                constexpr std::ptrdiff_t m_PeerWaitClearTimer = 0xB4; // CSimTimer
                constexpr std::ptrdiff_t m_NextSidestepTimer = 0xC0; // CSimTimer
                constexpr std::ptrdiff_t m_hBigStepGroundEnt = 0xCC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hLastBlockingEnt = 0xD0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vPosBeginFailedSteer = 0xD4; // Vector
                constexpr std::ptrdiff_t m_timeBeginFailedSteer = 0xE0; // GameTime_t
                constexpr std::ptrdiff_t m_nNavFailCounter = 0xE4; // int32
                constexpr std::ptrdiff_t m_flLastNavFailTime = 0xE8; // GameTime_t
                constexpr std::ptrdiff_t m_bShouldBruteForceFailedNav = 0xEC; // bool
                constexpr std::ptrdiff_t m_bNavChangedAlongPath = 0xED; // bool
                constexpr std::ptrdiff_t m_nPreviousCollisionGroup = 0xF0; // int32
                constexpr std::ptrdiff_t m_flLastNpcOverlapTime = 0xF4; // GameTime_t
                constexpr std::ptrdiff_t m_flGoalTolerance = 0xF8; // float32
                constexpr std::ptrdiff_t m_flWaypointTolerance = 0xFC; // float32
                constexpr std::ptrdiff_t m_vGoalDirection = 0x100; // Vector
                constexpr std::ptrdiff_t m_hGoalDirectionTarget = 0x10C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flGoalDirectionToleranceDot = 0x110; // float32
                constexpr std::ptrdiff_t m_flPathEndGoalRange = 0x114; // float32
                constexpr std::ptrdiff_t m_flPathEndGoalRange_Repathing = 0x118; // float32
                constexpr std::ptrdiff_t m_bGoalRequiresCrouch = 0x11C; // bool
                constexpr std::ptrdiff_t m_flGoalMaxPathLength = 0x120; // float32
                constexpr std::ptrdiff_t m_flGoalMaxTravelDist = 0x124; // float32
                constexpr std::ptrdiff_t m_pathRestrictionTag = 0x128; // CUtlString
                constexpr std::ptrdiff_t m_smartGoalHelper = 0x148; // CNavSmartGoalHelper
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_AirLift_LandBuff {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ChargingGun {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemSmokeBombPreCastModifierVData {
                constexpr std::ptrdiff_t m_SmokeAreaParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CasterParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_TechBurst_Proc {
            }
            // Parent: CAI_CitadelNPC
            // Field count: 0
            namespace CNPC_MidBoss {
            }
            // Parent: CCitadelBaseTriggerAbility
            // Field count: 1
            namespace CCitadel_Ability_WreckingBallThrow {
                constexpr std::ptrdiff_t m_hWreckingBallAbility = 0xB10; // CHandle<CCitadel_Ability_WreckingBall>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BreakablePropFireRatePickupVData {
                constexpr std::ptrdiff_t m_flFireRate = 0x608; // float32
            }
            // Parent: CPointEntity
            // Field count: 8
            namespace CMoverPathNode {
                constexpr std::ptrdiff_t m_vInTangentLocal = 0x4E8; // Vector
                constexpr std::ptrdiff_t m_vOutTangentLocal = 0x4F4; // Vector
                constexpr std::ptrdiff_t m_szParentPathUniqueID = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_szPathNodeParameter = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnPassThrough = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPassThroughForward = 0x538; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPassThroughReverse = 0x560; // CEntityIOOutput
                constexpr std::ptrdiff_t m_hMover = 0x588; // CHandle<CPathMover>
            }
            // Parent: CEnvSoundscape
            // Field count: 0
            namespace CEnvSoundscapeTriggerable {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Cadence_Crescendo {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_SpilledBloodThinker {
                constexpr std::ptrdiff_t m_flRadius = 0xC0; // float32
                constexpr std::ptrdiff_t m_flDPS = 0xC4; // float32
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Upgrade_StabilizingTripodVData {
                constexpr std::ptrdiff_t m_SelfDebuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelBulletTimeWarpVData {
                constexpr std::ptrdiff_t m_TimeWallHitParticle = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TimeWallHitTimerParticle = 0x108; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierItemPickupAuraTargetVData {
                constexpr std::ptrdiff_t m_PickupTimer = 0x608; // float32
                constexpr std::ptrdiff_t m_PickupTimerModifier = 0x610; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Trapper_Fear {
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Tokamak_DyingStarVData {
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlameAuraParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strInFlightAnimGraphParam = 0x1720; // CGlobalSymbol
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1728; // CSoundEventName
                constexpr std::ptrdiff_t m_InFlightModifier = 0x1738; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Ability_PrimaryWeaponVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_PrimaryWeapon_BebopVData {
                constexpr std::ptrdiff_t m_strWindupSound = 0x15B0; // CSoundEventName
                constexpr std::ptrdiff_t m_strBeamStartSound = 0x15C0; // CSoundEventName
                constexpr std::ptrdiff_t m_strBeamLoopSound1 = 0x15D0; // CSoundEventName
                constexpr std::ptrdiff_t m_strBeamLoopSound2 = 0x15E0; // CSoundEventName
                constexpr std::ptrdiff_t m_strBeamStopSound = 0x15F0; // CSoundEventName
                constexpr std::ptrdiff_t m_szWeaponBeamParticle = 0x1600; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flWindupRepeatCycle = 0x16E0; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ProjectMindVData {
                constexpr std::ptrdiff_t m_TeleportStartParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportEndParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportTrailParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportModelParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShieldModifier = 0x988; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CModifier_SiphonBullets {
            }
            // Parent: CCitadel_Item_BubbleVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_Stasis_BombVData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x16A8; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CPlayerPawnComponent
            // Field count: 12
            //
            // Metadata:
            // NetworkVarNames: m_vecPunchAngle (QAngle)
            // NetworkVarNames: m_vecPunchAngleVel (QAngle)
            // NetworkVarNames: m_nPunchAngleJoltTick (GameTick_t)
            // NetworkVarNames: m_PlayerFog (fogplayerparams_t)
            // NetworkVarNames: m_hColorCorrectionCtrl (CHandle<CColorCorrection>)
            // NetworkVarNames: m_hViewEntity (CHandle<CBaseEntity>)
            // NetworkVarNames: m_hTonemapController (CHandle<CTonemapController2>)
            // NetworkVarNames: m_audio (audioparams_t)
            // NetworkVarNames: m_PostProcessingVolumes (CHandle<CPostProcessingVolume>)
            namespace CPlayer_CameraServices {
                constexpr std::ptrdiff_t m_vecPunchAngle = 0x40; // QAngle
                constexpr std::ptrdiff_t m_vecPunchAngleVel = 0x4C; // QAngle
                constexpr std::ptrdiff_t m_nPunchAngleJoltTick = 0x58; // GameTick_t
                constexpr std::ptrdiff_t m_PlayerFog = 0x60; // fogplayerparams_t
                constexpr std::ptrdiff_t m_hColorCorrectionCtrl = 0xA0; // CHandle<CColorCorrection>
                constexpr std::ptrdiff_t m_hViewEntity = 0xA4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTonemapController = 0xA8; // CHandle<CTonemapController2>
                constexpr std::ptrdiff_t m_audio = 0xB0; // audioparams_t
                constexpr std::ptrdiff_t m_PostProcessingVolumes = 0x128; // CNetworkUtlVectorBase<CHandle<CPostProcessingVolume>>
                constexpr std::ptrdiff_t m_flOldPlayerZ = 0x140; // float32
                constexpr std::ptrdiff_t m_flOldPlayerViewOffsetZ = 0x144; // float32
                constexpr std::ptrdiff_t m_hTriggerSoundscapeList = 0x160; // CUtlVector<CHandle<CEnvSoundscapeTriggerable>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PowerGenerator {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Chrono_PulseGrenade_VData {
                constexpr std::ptrdiff_t m_PulseAreaModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strHitSound = 0x1570; // CSoundEventName
                constexpr std::ptrdiff_t m_strDebuffStatName = 0x1580; // CUtlString
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 0
            namespace CCitadel_Ability_Tier2Boss_Stomp {
            }
            // Parent: CBaseProp
            // Field count: 0
            namespace CInfoTrooperNeutralMovementNode {
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVData_BaseAura {
                constexpr std::ptrdiff_t m_eAuraShapeType = 0x608; // eAuraShapeType
                constexpr std::ptrdiff_t m_flAuraRadius = 0x60C; // CModifierLevelFloat
                constexpr std::ptrdiff_t m_flAuraEntityBoundsScale = 0x61C; // CModifierLevelFloat
                constexpr std::ptrdiff_t m_nAmbientParticleRadiusControlPoint = 0x62C; // int32
                constexpr std::ptrdiff_t m_modifierProvidedByAura = 0x630; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CBaseEntity
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_fog (fogparams_t)
            namespace CFogController {
                constexpr std::ptrdiff_t m_fog = 0x4E8; // fogparams_t
                constexpr std::ptrdiff_t m_bUseAngles = 0x550; // bool
                constexpr std::ptrdiff_t m_iChangedVariables = 0x554; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_Pulse_Escape_VData {
                constexpr std::ptrdiff_t m_SatchelParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelAbilityTangoTetherVData {
                constexpr std::ptrdiff_t m_TetherModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_GrappleTargetModifier = 0x1570; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_BulletGrappleTracerParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyGrappleParticle = 0x1660; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDamageTarget = 0x1740; // CSoundEventName
                constexpr std::ptrdiff_t m_strGrappleHitTarget = 0x1750; // CSoundEventName
                constexpr std::ptrdiff_t m_strGrappleHitWorld = 0x1760; // CSoundEventName
                constexpr std::ptrdiff_t m_strGrappleHitNothing = 0x1770; // CSoundEventName
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_BansheeSlugs_VData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TechDefenderShreddersProcVData {
                constexpr std::ptrdiff_t m_TechDebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_DivinersKevlarBuff_VData {
                constexpr std::ptrdiff_t m_KevlarChannelParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseShield
            // Field count: 0
            namespace CCitadel_Modifier_RegeneratingTechShield {
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItem_Infuser_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CastParticle = 0x15B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CEntityComponent
            // Field count: 2
            namespace CBodyComponent {
                constexpr std::ptrdiff_t m_pSceneNode = 0x8; // CGameSceneNode*
                constexpr std::ptrdiff_t __m_pChainEntity = 0x48; // CNetworkVarChainer
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Upgrade_OverdriveClip {
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_CCitadelRegenComponent (CCitadelRegenComponent::Storage_t)
            namespace CCitadelModelEntity {
                constexpr std::ptrdiff_t m_CCitadelRegenComponent = 0x7C0; // CCitadelRegenComponent
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CEnableMotionFixup {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_VoidSphere_Buff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_StunnedVData {
                constexpr std::ptrdiff_t m_StunnedParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_EscalatingExposure {
            }
            // Parent: CDynamicProp
            // Field count: 0
            //
            // Metadata:
            // MNetworkIncludeByName
            namespace CAnimGraph2TestProp {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ItemPickupAuraTarget {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_BreakablePropClipSizePickup {
                constexpr std::ptrdiff_t nClipRemaining = 0xC0; // int32
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 5
            namespace CInfoTrooperBossSpawn {
                constexpr std::ptrdiff_t m_strBossEntityName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iLane = 0x500; // int32
                constexpr std::ptrdiff_t m_iCoverGroupID = 0x504; // int32
                constexpr std::ptrdiff_t m_bReinforcementsOnly = 0x510; // bool
                constexpr std::ptrdiff_t m_eventOnTrooperKilled = 0x528; // CEntityIOOutput
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Wrecker_Salvage {
                constexpr std::ptrdiff_t m_vecTargets = 0xB00; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCrackshotVData {
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplosionVictimParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CrackshotImmuneModifier = 0x1730; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HeadShotVictimSound = 0x1740; // CSoundEventName
                constexpr std::ptrdiff_t m_HeadShotConfirmationSound = 0x1750; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Charged_Bomb {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SlowingTech_ProcVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 1
            namespace CCitadel_Modifier_CharmedWraps {
                constexpr std::ptrdiff_t m_fLastPrimingLightAttackTime = 0x168; // GameTime_t
            }
            // Parent: CitadelItemVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemPhantomStrike_VData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PullDownModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CasterModifier = 0x15C8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x15D8; // CSoundEventName
                constexpr std::ptrdiff_t m_CastParticle = 0x15E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x16C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffParticle = 0x17A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flTeleportDistance = 0x1888; // float32
                constexpr std::ptrdiff_t m_flVelocityScale = 0x188C; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityMantleVData {
                constexpr std::ptrdiff_t m_vecMantleTypes = 0x1560; // CUtlVector<MantleType_t>
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_Basic_RangedArmorBonus {
                constexpr std::ptrdiff_t m_flBulletResistancePctMin = 0xC0; // float32
                constexpr std::ptrdiff_t m_flBulletResistancePctMax = 0xC4; // float32
                constexpr std::ptrdiff_t m_flRangeMin = 0xC8; // float32
                constexpr std::ptrdiff_t m_flRangeMax = 0xCC; // float32
                constexpr std::ptrdiff_t m_flInvulnRange = 0xD0; // float32
            }
            // Parent: None
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_duration (float32)
            // NetworkVarNames: m_timestamp (GameTime_t)
            // NetworkVarNames: m_timescale (float32)
            // NetworkVarNames: m_nWorldGroupId (WorldGroupId_t)
            namespace CountdownTimer {
                constexpr std::ptrdiff_t m_duration = 0x8; // float32
                constexpr std::ptrdiff_t m_timestamp = 0xC; // GameTime_t
                constexpr std::ptrdiff_t m_timescale = 0x10; // float32
                constexpr std::ptrdiff_t m_nWorldGroupId = 0x14; // WorldGroupId_t
            }
            // Parent: None
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_hOwner (CEntityHandle)
            // NetworkVarNames: m_name (CUtlStringToken)
            namespace CGameSceneNodeHandle {
                constexpr std::ptrdiff_t m_hOwner = 0x8; // CEntityHandle
                constexpr std::ptrdiff_t m_name = 0xC; // CUtlStringToken
            }
            // Parent: CLogicalEntity
            // Field count: 4
            namespace CPhysicsEntitySolver {
                constexpr std::ptrdiff_t m_hMovingEntity = 0x4F0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hPhysicsBlocker = 0x4F4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_separationDuration = 0x4F8; // float32
                constexpr std::ptrdiff_t m_cancelTime = 0x4FC; // GameTime_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            namespace CCitadel_Ability_Thumper_1 {
                constexpr std::ptrdiff_t m_vecHitEntities = 0xB00; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vecAimPos = 0xB18; // Vector
                constexpr std::ptrdiff_t m_vecAimNormal = 0xB24; // Vector
                constexpr std::ptrdiff_t m_flPushForce = 0xB30; // float32
            }
            // Parent: CCitadel_Modifier_Sleep
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_Sleeping {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_SnakeDash {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Running_Decoy {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_PoisonBullet_ShotWatcher {
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_PuddleVData {
                constexpr std::ptrdiff_t m_PuddleModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_IceDome_AuraModifierBase
            // Field count: 0
            namespace CCitadel_Modifier_IceDomeFriendly {
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 3
            namespace CCitadel_Modifier_NapalmProjectile {
                constexpr std::ptrdiff_t m_vecHitEntities = 0xC0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vInitialCastPosition = 0x228; // Vector
                constexpr std::ptrdiff_t m_flProjectileSpeed = 0x234; // float32
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_DPS_Aura_VData {
                constexpr std::ptrdiff_t m_AOECastParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ActiveModifier = 0x1688; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Upgrade_OverdriveClip {
                constexpr std::ptrdiff_t m_nBonusMaxClipSize = 0xC0; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Berserker {
                constexpr std::ptrdiff_t m_flDamageTaken = 0xC0; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BerserkerDamageStackVData {
                constexpr std::ptrdiff_t m_BuffStatusParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffStatusParticleEnemy = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 3
            namespace CNodeEnt {
                constexpr std::ptrdiff_t m_bDontDropNode = 0x4E8; // bool
                constexpr std::ptrdiff_t m_HullForceFlags = 0x4E9; // HullFlags_t
                constexpr std::ptrdiff_t m_NodeData = 0x4F8; // HintNodeData
            }
            // Parent: CCitadel_Item_TrackingProjectileApplyModifier
            // Field count: 0
            namespace CCitadel_Item_Containment {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_flDomeStartTime (GameTime_t)
            // NetworkVarNames: m_flDomeEndTime (GameTime_t)
            namespace CCitadel_Ability_IceDome {
                constexpr std::ptrdiff_t m_flDomeStartTime = 0xB38; // GameTime_t
                constexpr std::ptrdiff_t m_flDomeEndTime = 0xB3C; // GameTime_t
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 1
            namespace CCitadel_Modifier_DetentionAmmo {
                constexpr std::ptrdiff_t m_flBuildupPerBullet = 0x168; // float32
            }
            // Parent: CGameSceneNode
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_modelState (CModelState)
            // NetworkVarNames: m_bIsAnimationEnabled (bool)
            // NetworkVarNames: m_bUseParentRenderBounds (bool)
            // NetworkVarNames: m_materialGroup (CUtlStringToken)
            // NetworkVarNames: m_nHitboxSet (uint8)
            namespace CSkeletonInstance {
                constexpr std::ptrdiff_t m_modelState = 0x170; // CModelState
                constexpr std::ptrdiff_t m_bIsAnimationEnabled = 0x3F0; // bool
                constexpr std::ptrdiff_t m_bUseParentRenderBounds = 0x3F1; // bool
                constexpr std::ptrdiff_t m_bDisableSolidCollisionsForHierarchy = 0x3F2; // bool
                constexpr std::ptrdiff_t m_bDirtyMotionType = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_bIsGeneratingLatchedParentSpaceState = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_materialGroup = 0x3F4; // CUtlStringToken
                constexpr std::ptrdiff_t m_nHitboxSet = 0x3F8; // uint8
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_WeaponUpgrade_Ricochet {
                constexpr std::ptrdiff_t m_hRicochetModifier = 0xB20; // CModifierHandleTyped<CCitadel_Modifier_Ricochet_Proc>
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoLandmark {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_SpiderAnimatingVData {
                constexpr std::ptrdiff_t m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_flModelScale = 0x108; // float32
                constexpr std::ptrdiff_t m_cGlowColor = 0x10C; // Color
            }
            // Parent: CCitadel_Modifier_Invis
            // Field count: 2
            namespace CCitadel_Modifier_LurkersAmbush_Invis {
                constexpr std::ptrdiff_t m_mapStartLookTime = 0x260; // CUtlOrderedMap<CCitadelPlayerPawn*,GameTime_t>
                constexpr std::ptrdiff_t m_flStartSpotted = 0x288; // GameTime_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityKobunVData {
                constexpr std::ptrdiff_t m_vSummonFollowOffset = 0x1560; // Vector
                constexpr std::ptrdiff_t m_CloneModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Tengu_UrnVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AuraModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x1650; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ThrowSandVData {
                constexpr std::ptrdiff_t m_SandDebuff = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SilenceDebuff = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_RescueBeamVData {
                constexpr std::ptrdiff_t m_DispelAndHealModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PullModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_bInFlight (bool)
            namespace CCitadel_Ability_Fathom_Breach {
                constexpr std::ptrdiff_t m_nRollFXIndex = 0xB00; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bInFlight = 0xB04; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_RapidFire_AirJuggle {
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 1
            namespace CCitadel_Modifier_Pillar {
                constexpr std::ptrdiff_t flAccumulatedDamage = 0xC8; // float32
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItem_FleetfootBoots_VData {
                constexpr std::ptrdiff_t m_FleetfootBootsModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_FleetfootBootsBonusClipModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Item_TrackingProjectileApplyModifier
            // Field count: 0
            namespace CItem_WitheringWhip {
            }
            // Parent: CCitadel_Modifier_PowerUp
            // Field count: 1
            namespace CCitadel_Modifier_BreakablePropExtraStamina {
                constexpr std::ptrdiff_t m_bFilled = 0xC8; // bool
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CAI_NetworkManager {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Haze_StackingDamage {
                constexpr std::ptrdiff_t m_nTotalProcs = 0x168; // int32
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_ModDisruptorVData {
                constexpr std::ptrdiff_t m_DetonateParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DisruptModifier = 0x1688; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flWaveSpeed = 0x1698; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_UnstoppableVData {
                constexpr std::ptrdiff_t m_ShieldParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PlayerShieldParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_PreMatchWait {
                constexpr std::ptrdiff_t m_vSpawnPoint = 0xC0; // Vector
            }
            // Parent: CBodyComponentSkeletonInstance
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_animationController (CBaseAnimGraphController)
            namespace CBodyComponentBaseAnimGraph {
                constexpr std::ptrdiff_t m_animationController = 0x510; // CBaseAnimGraphController
            }
            // Parent: CBodyComponent
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_sceneNode (CGameSceneNode)
            namespace CBodyComponentPoint {
                constexpr std::ptrdiff_t m_sceneNode = 0x80; // CGameSceneNode
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Ability_Shield {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_Savior {
            }
            // Parent: CBaseEntity
            // Field count: 8
            namespace CEnvFireSensor {
                constexpr std::ptrdiff_t m_bEnabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_bHeatAtLevel = 0x4E9; // bool
                constexpr std::ptrdiff_t m_radius = 0x4EC; // float32
                constexpr std::ptrdiff_t m_targetLevel = 0x4F0; // float32
                constexpr std::ptrdiff_t m_targetTime = 0x4F4; // float32
                constexpr std::ptrdiff_t m_levelTime = 0x4F8; // float32
                constexpr std::ptrdiff_t m_OnHeatLevelStart = 0x500; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnHeatLevelEnd = 0x528; // CEntityIOOutput
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BossInvuln {
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_SnakeDashVData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Intimidate {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_eState (ECatStatueState_t)
            // NetworkVarNames: m_hStatue (EHANDLE)
            namespace CCitadel_Ability_ProximityRitual {
                constexpr std::ptrdiff_t m_eState = 0xB00; // ECatStatueState_t
                constexpr std::ptrdiff_t m_hStatue = 0xB04; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_tCatRecallTime = 0xB08; // GameTime_t
                constexpr std::ptrdiff_t m_iCatRecallHealth = 0xB0C; // int32
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB10; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB1C; // QAngle
            }
            // Parent: CCitadel_Modifier_ChainLightning
            // Field count: 0
            namespace CCitadel_Modifier_Galvanic_Storm {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_GalvanicStormTechShieldVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x608; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flExplodeSpeed = 0x6F8; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PullDownToGround {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 26
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVData {
                constexpr std::ptrdiff_t m_flDuration = 0x28; // CModifierLevelFloat
                constexpr std::ptrdiff_t m_bKeepMaximumDurationOnRefresh = 0x38; // bool
                constexpr std::ptrdiff_t m_strParticleEffect = 0x40; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strParticleEffectConfig = 0x120; // CUtlString
                constexpr std::ptrdiff_t m_strParticleStatusEffect = 0x128; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strParticleStatusEffectConfig = 0x208; // CUtlString
                constexpr std::ptrdiff_t m_strScreenParticleEffect = 0x210; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strScreenParticleEffectConfig = 0x2F0; // CUtlString
                constexpr std::ptrdiff_t m_nStatusEffectPriority = 0x2F8; // int32
                constexpr std::ptrdiff_t m_vecRenderAttributes = 0x300; // CUtlVector<ModifierRenderAttribute_t>
                constexpr std::ptrdiff_t m_sStartSound = 0x318; // CSoundEventName
                constexpr std::ptrdiff_t m_sAmbientLoopingSound = 0x328; // CSoundEventName
                constexpr std::ptrdiff_t m_nAmbientLoopingSoundRecipients = 0x338; // ModifierSoundRecipients_t
                constexpr std::ptrdiff_t m_sEndSound = 0x340; // CSoundEventName
                constexpr std::ptrdiff_t m_nEnabledStateMask = 0x350; // CBitVecEnum<EModifierState>
                constexpr std::ptrdiff_t m_nDisabledStateMask = 0x368; // CBitVecEnum<EModifierState>
                constexpr std::ptrdiff_t m_nAttributes = 0x380; // ModifierAttribute_t
                constexpr std::ptrdiff_t m_vecScriptValues = 0x388; // CUtlVector<ModifierScriptValue_t>
                constexpr std::ptrdiff_t m_vecScriptEventHandlers = 0x3A0; // CUtlVector<ModifierScriptedEventHandler_t>
                constexpr std::ptrdiff_t m_nDisableGroupsMask = 0x3B8; // ModifierDisableGroup_t
                constexpr std::ptrdiff_t m_bPrivateAccess = 0x3BC; // bool
                constexpr std::ptrdiff_t m_bIsHidden = 0x3BD; // bool
                constexpr std::ptrdiff_t m_eHiddenType = 0x3C0; // ModifierHiddenType_t
                constexpr std::ptrdiff_t m_sLocalizationName = 0x3C8; // CUtlString
                constexpr std::ptrdiff_t m_eDebuffType = 0x3D0; // ModifierDebuffType_t
                constexpr std::ptrdiff_t m_bAutomaticallyDecayStacks = 0x3D4; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Yamato_InfinitySlash_BuffTimer {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_LockDown {
                constexpr std::ptrdiff_t m_CastParticle = 0xB00; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_Uppercutted {
                constexpr std::ptrdiff_t m_vecFromBebop = 0xC0; // Vector
                constexpr std::ptrdiff_t m_flDamage = 0xCC; // float32
                constexpr std::ptrdiff_t m_bExplodeOnLand = 0xD0; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_angFacing (QAngle)
            namespace CCitadel_Ability_Bounce_Pad {
                constexpr std::ptrdiff_t m_vForward = 0xB00; // Vector
                constexpr std::ptrdiff_t m_bShouldDeploy = 0xB0C; // bool
                constexpr std::ptrdiff_t m_bAnglesSet = 0xB0D; // bool
                constexpr std::ptrdiff_t m_bCanCancel = 0xB0E; // bool
                constexpr std::ptrdiff_t m_angFacing = 0xC28; // QAngle
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemPowerShardVData {
                constexpr std::ptrdiff_t m_RefreshParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Tier2Boss_RocketBarrageVData {
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplosionSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_RocketFireSound = 0x1650; // CSoundEventName
                constexpr std::ptrdiff_t m_AuraModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: None
            // Field count: 2
            namespace CEnvWindShared__WindAveEvent_t {
                constexpr std::ptrdiff_t m_flStartWindSpeed = 0x0; // float32
                constexpr std::ptrdiff_t m_flAveWindSpeed = 0x4; // float32
            }
            // Parent: CAI_CitadelNPC
            // Field count: 0
            namespace CNPC_YakuzaGangster {
            }
            // Parent: CDynamicProp
            // Field count: 0
            namespace CDynamicPropAlias_cable_dynamic {
            }
            // Parent: CPointEntity
            // Field count: 10
            namespace CEnvShake {
                constexpr std::ptrdiff_t m_limitToEntity = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_Amplitude = 0x4F0; // float32
                constexpr std::ptrdiff_t m_Frequency = 0x4F4; // float32
                constexpr std::ptrdiff_t m_Duration = 0x4F8; // float32
                constexpr std::ptrdiff_t m_Radius = 0x4FC; // float32
                constexpr std::ptrdiff_t m_stopTime = 0x500; // GameTime_t
                constexpr std::ptrdiff_t m_nextShake = 0x504; // GameTime_t
                constexpr std::ptrdiff_t m_currentAmp = 0x508; // float32
                constexpr std::ptrdiff_t m_maxForce = 0x50C; // Vector
                constexpr std::ptrdiff_t m_shakeCallback = 0x520; // CPhysicsShake
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CPrecipitationBlocker {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CAbility_Mirage_SandPhantom {
                constexpr std::ptrdiff_t m_vecVictimModifiers = 0xB00; // CUtlVector<CModifierHandleTyped<CCitadelModifier>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ThrowSandDebuffVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBasePlayerPawn
            // Field count: 0
            namespace CCitadelPlayerPawnBase {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_ReturnFire {
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 6
            namespace CCitadel_Modifier_Knockdown {
                constexpr std::ptrdiff_t m_angStunAngles = 0xC8; // QAngle
                constexpr std::ptrdiff_t m_ePreferredKnockdownType = 0xD4; // EKnockDownTypes
                constexpr std::ptrdiff_t m_bForceTakePreferred = 0xD8; // bool
                constexpr std::ptrdiff_t m_flGetUpAnimTime = 0xDC; // GameTime_t
                constexpr std::ptrdiff_t m_bGetUpCamSeqStarted = 0xE0; // bool
                constexpr std::ptrdiff_t m_bOnGroundDuration = 0xE1; // bool
            }
            // Parent: CPathKeyFrame
            // Field count: 11
            namespace CBaseMoveBehavior {
                constexpr std::ptrdiff_t m_iPositionInterpolator = 0x540; // int32
                constexpr std::ptrdiff_t m_iRotationInterpolator = 0x544; // int32
                constexpr std::ptrdiff_t m_flAnimStartTime = 0x548; // float32
                constexpr std::ptrdiff_t m_flAnimEndTime = 0x54C; // float32
                constexpr std::ptrdiff_t m_flAverageSpeedAcrossFrame = 0x550; // float32
                constexpr std::ptrdiff_t m_pCurrentKeyFrame = 0x558; // CPathKeyFrame*
                constexpr std::ptrdiff_t m_pTargetKeyFrame = 0x560; // CPathKeyFrame*
                constexpr std::ptrdiff_t m_pPreKeyFrame = 0x568; // CPathKeyFrame*
                constexpr std::ptrdiff_t m_pPostKeyFrame = 0x570; // CPathKeyFrame*
                constexpr std::ptrdiff_t m_flTimeIntoFrame = 0x578; // float32
                constexpr std::ptrdiff_t m_iDirection = 0x57C; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityLashVData {
                constexpr std::ptrdiff_t m_LashParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strVictimCastSound = 0x1650; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ChargedBombVData {
                constexpr std::ptrdiff_t m_ChargeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strBeepSound = 0x6E8; // CSoundEventName
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CFuncMoverAPI {
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            namespace CFuncNavObstruction {
                constexpr std::ptrdiff_t m_bDisabled = 0x7C8; // bool
            }
            // Parent: CPointEntity
            // Field count: 4
            namespace CEnvTilt {
                constexpr std::ptrdiff_t m_Duration = 0x4E8; // float32
                constexpr std::ptrdiff_t m_Radius = 0x4EC; // float32
                constexpr std::ptrdiff_t m_TiltTime = 0x4F0; // float32
                constexpr std::ptrdiff_t m_stopTime = 0x4F4; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Trapper_Immobilize {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Thumper_EnemyPulled {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_RapidFire {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_CatAnimatingVData {
                constexpr std::ptrdiff_t m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_cGlowColor = 0x108; // Color
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flSelfCastEndTime (GameTime_t)
            namespace CCitadel_Ability_RestorativeGoo {
                constexpr std::ptrdiff_t m_flSelfCastEndTime = 0xB00; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Idol_Return {
            }
            // Parent: CBaseEntity
            // Field count: 8
            namespace CAI_GoalEntity {
                constexpr std::ptrdiff_t m_iszActor = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszGoal = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_fStartActive = 0x500; // bool
                constexpr std::ptrdiff_t m_SearchType = 0x504; // CAI_GoalEntity::SearchType_t
                constexpr std::ptrdiff_t m_iszConceptModifiers = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_actors = 0x510; // CUtlVector<CHandle<CAI_BaseNPC>>
                constexpr std::ptrdiff_t m_hGoalEntity = 0x528; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flags = 0x52C; // uint32
            }
            // Parent: CNPC_SimpleAnimatingAI
            // Field count: 6
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_vecUnitStatusOffset (Vector)
            namespace CNPC_BaseDefenseSentry {
                constexpr std::ptrdiff_t m_vecUnitStatusOffset = 0xBE8; // Vector
                constexpr std::ptrdiff_t m_flAttackCone = 0xC1C; // float32
                constexpr std::ptrdiff_t m_flAttackDelay = 0xC20; // float32
                constexpr std::ptrdiff_t m_flLastAlertSound = 0xC24; // GameTime_t
                constexpr std::ptrdiff_t m_nSentryLevel = 0xC2C; // int16
                constexpr std::ptrdiff_t m_vecForward = 0xC30; // Vector
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            namespace CItemGenericTriggerHelper {
                constexpr std::ptrdiff_t m_hParentItem = 0x7C0; // CHandle<CItemGeneric>
            }
            // Parent: CLogicalEntity
            // Field count: 6
            namespace CLogicBranchList {
                constexpr std::ptrdiff_t m_nLogicBranchNames = 0x4E8; // CUtlSymbolLarge[16]
                constexpr std::ptrdiff_t m_LogicBranchList = 0x568; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_eLastState = 0x580; // CLogicBranchList::LogicBranchListenerLastState_t
                constexpr std::ptrdiff_t m_OnAllTrue = 0x588; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAllFalse = 0x5B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMixed = 0x5D8; // CEntityIOOutput
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHighAlertVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ZiplineBoost {
            }
            // Parent: None
            // Field count: 14
            //
            // Metadata:
            // NetworkVarNames: m_hCtrl (CHandle<CFogController>)
            namespace fogplayerparams_t {
                constexpr std::ptrdiff_t m_hCtrl = 0x8; // CHandle<CFogController>
                constexpr std::ptrdiff_t m_flTransitionTime = 0xC; // float32
                constexpr std::ptrdiff_t m_OldColor = 0x10; // Color
                constexpr std::ptrdiff_t m_flOldStart = 0x14; // float32
                constexpr std::ptrdiff_t m_flOldEnd = 0x18; // float32
                constexpr std::ptrdiff_t m_flOldMaxDensity = 0x1C; // float32
                constexpr std::ptrdiff_t m_flOldHDRColorScale = 0x20; // float32
                constexpr std::ptrdiff_t m_flOldFarZ = 0x24; // float32
                constexpr std::ptrdiff_t m_NewColor = 0x28; // Color
                constexpr std::ptrdiff_t m_flNewStart = 0x2C; // float32
                constexpr std::ptrdiff_t m_flNewEnd = 0x30; // float32
                constexpr std::ptrdiff_t m_flNewMaxDensity = 0x34; // float32
                constexpr std::ptrdiff_t m_flNewHDRColorScale = 0x38; // float32
                constexpr std::ptrdiff_t m_flNewFarZ = 0x3C; // float32
            }
            // Parent: CPointEntity
            // Field count: 6
            namespace CCitadelPayload_PathMarker {
                constexpr std::ptrdiff_t m_iLane = 0x4E8; // int32
                constexpr std::ptrdiff_t m_bStart = 0x4EC; // bool
                constexpr std::ptrdiff_t m_bRollBackToHere = 0x4ED; // bool
                constexpr std::ptrdiff_t m_flDistFromPrev = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flProgressAlongTotalPath = 0x4F4; // float32
                constexpr std::ptrdiff_t m_pPrevious = 0x4F8; // CCitadelPayload_PathMarker*
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BreakablePropSpeedPickupVData {
                constexpr std::ptrdiff_t m_flSpeedBoost = 0x608; // float32
                constexpr std::ptrdiff_t m_flSprintBoost = 0x60C; // float32
            }
            // Parent: CModelPointEntity
            // Field count: 3
            namespace CRevertSaved {
                constexpr std::ptrdiff_t m_loadTime = 0x7C0; // float32
                constexpr std::ptrdiff_t m_Duration = 0x7C4; // float32
                constexpr std::ptrdiff_t m_HoldTime = 0x7C8; // float32
            }
            // Parent: CLogicalEntity
            // Field count: 8
            namespace CMultiLightProxy {
                constexpr std::ptrdiff_t m_iszLightNameFilter = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszLightClassFilter = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flLightRadiusFilter = 0x4F8; // float32
                constexpr std::ptrdiff_t m_flBrightnessDelta = 0x4FC; // float32
                constexpr std::ptrdiff_t m_bPerformScreenFade = 0x500; // bool
                constexpr std::ptrdiff_t m_flTargetBrightnessMultiplier = 0x504; // float32
                constexpr std::ptrdiff_t m_flCurrentBrightnessMultiplier = 0x508; // float32
                constexpr std::ptrdiff_t m_vecLights = 0x510; // CUtlVector<CHandle<CLightEntity>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BoloVData {
                constexpr std::ptrdiff_t m_TrapModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ReverseLeechModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_bWantsSlow (bool)
            // NetworkVarNames: m_flLatchedTimeScaleFracChangeTime (GameTime_t)
            // NetworkVarNames: m_flLatchedTimeScaleFrac (float)
            // NetworkVarNames: m_flSpeedBoostEndTime (GameTime_t)
            // NetworkVarNames: m_flShotTimeScaleEndTime (GameTime_t)
            namespace CCitadel_Ability_Chrono_KineticCarbine {
                constexpr std::ptrdiff_t m_bWantsSlow = 0xB00; // bool
                constexpr std::ptrdiff_t m_flLatchedTimeScaleFracChangeTime = 0xB04; // GameTime_t
                constexpr std::ptrdiff_t m_flLatchedTimeScaleFrac = 0xB08; // float32
                constexpr std::ptrdiff_t m_flSpeedBoostEndTime = 0xB0C; // GameTime_t
                constexpr std::ptrdiff_t m_flShotTimeScaleEndTime = 0xB10; // GameTime_t
                constexpr std::ptrdiff_t m_flStoredPowerPct = 0xB18; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_DeathTaxTechAmp {
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_BaseProjectileAOEModifierVData {
                constexpr std::ptrdiff_t m_AOEModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ColossusActive {
                constexpr std::ptrdiff_t m_flOriginalModelScale = 0xC0; // float32
            }
            // Parent: CCitadel_Item
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_iCurrentResistValue (int)
            namespace CCitadel_ArmorUpgrade_AblativeCoat {
                constexpr std::ptrdiff_t m_flLastDamageTime = 0xB20; // GameTime_t
                constexpr std::ptrdiff_t m_iCurrentResistValue = 0xB24; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PermanentPickupVData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Magician_ShadowClone {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Mirage_SandPhantom_VData {
                constexpr std::ptrdiff_t m_WhirlwindEvasionModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SandPhantomModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Cadence_GrandFinale {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_LockDown_Debuff {
                constexpr std::ptrdiff_t m_vEscapeTarget = 0x1D8; // Vector
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_bAirCast (bool)
            // NetworkVarNames: m_vBeamAimPos (Vector)
            // NetworkVarNames: m_angBeamAngles (QAngle)
            namespace CCitadel_Ability_Bebop_LaserBeam {
                constexpr std::ptrdiff_t m_bZoomed = 0xC50; // bool
                constexpr std::ptrdiff_t m_bAirCast = 0xC51; // bool
                constexpr std::ptrdiff_t m_vBeamAimPos = 0xC54; // Vector
                constexpr std::ptrdiff_t m_angBeamAngles = 0xC64; // QAngle
            }
            // Parent: CCitadel_Modifier_Base_Buildup
            // Field count: 1
            namespace CCitadel_Modifier_IceBeam_Stacking_Slow {
                constexpr std::ptrdiff_t m_flCurrBuildup = 0x220; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Shield {
                constexpr std::ptrdiff_t m_hShieldEntity = 0xC0; // CHandle<CCitadel_Shield>
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_BurstFireVData {
                constexpr std::ptrdiff_t m_ActivationSound = 0x15A8; // CSoundEventName
                constexpr std::ptrdiff_t m_BuffModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Basic_HealthRegen {
                constexpr std::ptrdiff_t m_flHealthRegen = 0xC0; // float32
            }
            // Parent: None
            // Field count: 21
            //
            // Metadata:
            // NetworkVarNames: m_vOrigin (Vector)
            // NetworkVarNames: m_vStart (Vector)
            // NetworkVarNames: m_vNormal (Vector)
            // NetworkVarNames: m_vAngles (QAngle)
            // NetworkVarNames: m_hEntity (CEntityHandle)
            // NetworkVarNames: m_hOtherEntity (CEntityHandle)
            // NetworkVarNames: m_flScale (float32)
            // NetworkVarNames: m_flMagnitude (float32)
            // NetworkVarNames: m_flRadius (float32)
            // NetworkVarNames: m_nSurfaceProp (CUtlStringToken)
            // NetworkVarNames: m_nEffectIndex (HParticleSystemDefinition)
            // NetworkVarNames: m_nDamageType (uint32)
            // NetworkVarNames: m_nPenetrate (uint8)
            // NetworkVarNames: m_nMaterial (uint16)
            // NetworkVarNames: m_nHitBox (uint16)
            // NetworkVarNames: m_nColor (uint8)
            // NetworkVarNames: m_fFlags (uint8)
            // NetworkVarNames: m_nAttachmentIndex (AttachmentHandle_t)
            // NetworkVarNames: m_nAttachmentName (CUtlStringToken)
            // NetworkVarNames: m_iEffectName (uint16)
            // NetworkVarNames: m_nExplosionType (uint8)
            namespace CEffectData {
                constexpr std::ptrdiff_t m_vOrigin = 0x8; // Vector
                constexpr std::ptrdiff_t m_vStart = 0x14; // Vector
                constexpr std::ptrdiff_t m_vNormal = 0x20; // Vector
                constexpr std::ptrdiff_t m_vAngles = 0x2C; // QAngle
                constexpr std::ptrdiff_t m_hEntity = 0x38; // CEntityHandle
                constexpr std::ptrdiff_t m_hOtherEntity = 0x3C; // CEntityHandle
                constexpr std::ptrdiff_t m_flScale = 0x40; // float32
                constexpr std::ptrdiff_t m_flMagnitude = 0x44; // float32
                constexpr std::ptrdiff_t m_flRadius = 0x48; // float32
                constexpr std::ptrdiff_t m_nSurfaceProp = 0x4C; // CUtlStringToken
                constexpr std::ptrdiff_t m_nEffectIndex = 0x50; // CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>
                constexpr std::ptrdiff_t m_nDamageType = 0x58; // uint32
                constexpr std::ptrdiff_t m_nPenetrate = 0x5C; // uint8
                constexpr std::ptrdiff_t m_nMaterial = 0x5E; // uint16
                constexpr std::ptrdiff_t m_nHitBox = 0x60; // uint16
                constexpr std::ptrdiff_t m_nColor = 0x62; // uint8
                constexpr std::ptrdiff_t m_fFlags = 0x63; // uint8
                constexpr std::ptrdiff_t m_nAttachmentIndex = 0x64; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_nAttachmentName = 0x68; // CUtlStringToken
                constexpr std::ptrdiff_t m_iEffectName = 0x6C; // uint16
                constexpr std::ptrdiff_t m_nExplosionType = 0x6E; // uint8
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierSleepBombAuraVData {
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CEntityBlocker {
            }
            // Parent: CCitadel_Modifier_Burning
            // Field count: 2
            namespace CCitadel_Modifier_Tokamak_HeatSinks_DOT {
                constexpr std::ptrdiff_t m_flLastBurnTime = 0xC0; // GameTime_t
                constexpr std::ptrdiff_t m_flScaledDPS = 0xC4; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilitySummonGangsterVData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ViperVenom {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MagicCarpet_SummonVData {
                constexpr std::ptrdiff_t m_SummonParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 0
            namespace CCitadel_Ability_SuperNeutralShield {
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CCitadel_Projectile_SettingSun {
            }
            // Parent: CBaseTrigger
            // Field count: 3
            namespace CTriggerAddModifier {
                constexpr std::ptrdiff_t m_strModifier = 0x990; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flDuration = 0x998; // float32
                constexpr std::ptrdiff_t m_bMomentary = 0x99C; // bool
            }
            // Parent: CLogicalEntity
            // Field count: 6
            namespace CLogicCase {
                constexpr std::ptrdiff_t m_nCase = 0x4E8; // CUtlSymbolLarge[32]
                constexpr std::ptrdiff_t m_nShuffleCases = 0x5E8; // int32
                constexpr std::ptrdiff_t m_nLastShuffleCase = 0x5EC; // int32
                constexpr std::ptrdiff_t m_uchShuffleCaseMap = 0x5F0; // uint8[32]
                constexpr std::ptrdiff_t m_OnCase = 0x610; // CEntityIOOutput[32]
                constexpr std::ptrdiff_t m_OnDefault = 0xB10; // CEntityOutputTemplate<CVariantBase<CVariantDefaultAllocator>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_SpiderShield {
            }
            // Parent: CitadelAbilityVData
            // Field count: 25
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ZipLine_VData {
                constexpr std::ptrdiff_t m_flMinButtonHoldTimeToActivate = 0x1560; // float32
                constexpr std::ptrdiff_t m_flCrouchDropSpeedFraction = 0x1564; // float32
                constexpr std::ptrdiff_t m_flCrouchDropAirDragSuppressDuration = 0x1568; // float32
                constexpr std::ptrdiff_t m_flDetachDisallowedTime = 0x156C; // float32
                constexpr std::ptrdiff_t m_flCameraWobbleIntensity = 0x1570; // float32
                constexpr std::ptrdiff_t m_DOFWhileZiplining = 0x1574; // DOFDesc_t
                constexpr std::ptrdiff_t m_ZipLinePreviewParticle = 0x1588; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineSpeedParticle = 0x1668; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineTetherParticle = 0x1748; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineTetherAttachParticle = 0x1828; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineEnemyKnockdownProtectionParticle = 0x1908; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineSelfKnockdownProtectionParticle = 0x19E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineKnockdownProtectionStatusParticle = 0x1AC8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strZipLineSummonSound = 0x1BA8; // CSoundEventName
                constexpr std::ptrdiff_t m_strZipLineLatchedSound = 0x1BB8; // CSoundEventName
                constexpr std::ptrdiff_t m_strZipLineStartSound = 0x1BC8; // CSoundEventName
                constexpr std::ptrdiff_t m_RidingZipLineModifier = 0x1BD8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_KnockedOffSlowModifier = 0x1BE8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ZipLineIntroModifier = 0x1BF8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ZipLineKnockdownImmuneModifier = 0x1C08; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ZipLineSlowModifier = 0x1C18; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_cameraSequenceAwaitingTether = 0x1C28; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceLatched = 0x1CB0; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceAttached = 0x1D38; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceClear = 0x1DC0; // CitadelCameraOperationsSequence_t
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_Colossus_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Out_Of_Combat_Health_Regen {
                constexpr std::ptrdiff_t m_LastDamageTaken = 0xC0; // GameTime_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierGlitchVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CItemExplosiveBarrel {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            namespace CCitadel_Ability_Trapper_SpiderJar {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB0C; // QAngle
                constexpr std::ptrdiff_t m_bHasMadeSpiders = 0xB18; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ViperVenomVData {
                constexpr std::ptrdiff_t m_VenomModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CastVenomParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            namespace CCitadel_Ability_Stomp {
                constexpr std::ptrdiff_t m_vStompPos = 0xB00; // Vector
                constexpr std::ptrdiff_t m_vStompDir = 0xB0C; // Vector
                constexpr std::ptrdiff_t m_vecStompedEnemies = 0xB18; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FissureWallVData {
                constexpr std::ptrdiff_t m_DebrisParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SpikeParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WallSpawnSound = 0x7C8; // CSoundEventName
                constexpr std::ptrdiff_t m_DebuffModifier = 0x7D8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_EnemyVisionModifier = 0x7E8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x7F8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Guiding_Arrow_KillCheck {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Stunned {
                constexpr std::ptrdiff_t m_bEnabled = 0xC0; // bool
                constexpr std::ptrdiff_t m_nParticleIndex = 0xC4; // ParticleIndex_t
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_EscalatingExposureProcWatcherVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 5
            namespace CCitadel_Ability_Tier2Boss_LaserBeam {
                constexpr std::ptrdiff_t m_pBeamModifier = 0xB00; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_hAttackPosHigh = 0xB50; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_hAttackPosLow = 0xB51; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_hAttackPosLeft = 0xB52; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_hAttackPosRight = 0xB53; // AttachmentHandle_t
            }
            // Parent: CRuleEntity
            // Field count: 0
            namespace CRuleBrushEntity {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_Item_PowerShard {
                constexpr std::ptrdiff_t m_hLastSignatureToActivate = 0xB20; // CHandle<CCitadelBaseAbility>
            }
            // Parent: CBaseEntity
            // Field count: 14
            namespace CSoundEventEntity {
                constexpr std::ptrdiff_t m_bStartOnSpawn = 0x4E8; // bool
                constexpr std::ptrdiff_t m_bToLocalPlayer = 0x4E9; // bool
                constexpr std::ptrdiff_t m_bStopOnNew = 0x4EA; // bool
                constexpr std::ptrdiff_t m_bSaveRestore = 0x4EB; // bool
                constexpr std::ptrdiff_t m_bSavedIsPlaying = 0x4EC; // bool
                constexpr std::ptrdiff_t m_flSavedElapsedTime = 0x4F0; // float32
                constexpr std::ptrdiff_t m_iszSourceEntityName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszAttachmentName = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_onGUIDChanged = 0x508; // CEntityOutputTemplate<uint64>
                constexpr std::ptrdiff_t m_onSoundFinished = 0x530; // CEntityIOOutput
                constexpr std::ptrdiff_t m_flClientCullRadius = 0x558; // float32
                constexpr std::ptrdiff_t m_iszSoundName = 0x588; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hSource = 0x598; // CEntityHandle
                constexpr std::ptrdiff_t m_nEntityIndexSelection = 0x59C; // int32
            }
            // Parent: CCitadel_Modifier_StatStealBase
            // Field count: 0
            namespace CCitadel_Modifier_Mirage_FireScarabs_Watcher {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_Synth_Pulse_BulletShield {
                constexpr std::ptrdiff_t m_fBulletShield = 0xC0; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_bAirCast (bool)
            namespace CCitadel_Ability_Tokamak_CrimsonCannon {
                constexpr std::ptrdiff_t m_TargetPreviews = 0xB20; // CUtlVector<ParticleIndex_t>
                constexpr std::ptrdiff_t m_bAirCast = 0xB38; // bool
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_GrandFinaleAOE {
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoParticleTarget {
            }
            // Parent: CBaseEntity
            // Field count: 37
            //
            // Metadata:
            // NetworkVarNames: m_flScattering (float)
            // NetworkVarNames: m_TintColor (Color)
            // NetworkVarNames: m_flAnisotropy (float)
            // NetworkVarNames: m_flFadeSpeed (float)
            // NetworkVarNames: m_flDrawDistance (float)
            // NetworkVarNames: m_flFadeInStart (float)
            // NetworkVarNames: m_flFadeInEnd (float)
            // NetworkVarNames: m_flIndirectStrength (float)
            // NetworkVarNames: m_nVolumeDepth (int)
            // NetworkVarNames: m_fFirstVolumeSliceThickness (float)
            // NetworkVarNames: m_nIndirectTextureDimX (int)
            // NetworkVarNames: m_nIndirectTextureDimY (int)
            // NetworkVarNames: m_nIndirectTextureDimZ (int)
            // NetworkVarNames: m_vBoxMins (Vector)
            // NetworkVarNames: m_vBoxMaxs (Vector)
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_flStartAnisoTime (GameTime_t)
            // NetworkVarNames: m_flStartScatterTime (GameTime_t)
            // NetworkVarNames: m_flStartDrawDistanceTime (GameTime_t)
            // NetworkVarNames: m_flStartAnisotropy (float)
            // NetworkVarNames: m_flStartScattering (float)
            // NetworkVarNames: m_flStartDrawDistance (float)
            // NetworkVarNames: m_flDefaultAnisotropy (float)
            // NetworkVarNames: m_flDefaultScattering (float)
            // NetworkVarNames: m_flDefaultDrawDistance (float)
            // NetworkVarNames: m_bStartDisabled (bool)
            // NetworkVarNames: m_bEnableIndirect (bool)
            // NetworkVarNames: m_bIndirectUseLPVs (bool)
            // NetworkVarNames: m_bIsMaster (bool)
            // NetworkVarNames: m_hFogIndirectTexture (HRenderTextureStrong)
            // NetworkVarNames: m_nForceRefreshCount (int)
            // NetworkVarNames: m_fNoiseSpeed (float)
            // NetworkVarNames: m_fNoiseStrength (float)
            // NetworkVarNames: m_vNoiseScale (Vector)
            // NetworkVarNames: m_fWindSpeed (float)
            // NetworkVarNames: m_vWindDirection (Vector)
            namespace CEnvVolumetricFogController {
                constexpr std::ptrdiff_t m_flScattering = 0x4E8; // float32
                constexpr std::ptrdiff_t m_TintColor = 0x4EC; // Color
                constexpr std::ptrdiff_t m_flAnisotropy = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flFadeSpeed = 0x4F4; // float32
                constexpr std::ptrdiff_t m_flDrawDistance = 0x4F8; // float32
                constexpr std::ptrdiff_t m_flFadeInStart = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flFadeInEnd = 0x500; // float32
                constexpr std::ptrdiff_t m_flIndirectStrength = 0x504; // float32
                constexpr std::ptrdiff_t m_nVolumeDepth = 0x508; // int32
                constexpr std::ptrdiff_t m_fFirstVolumeSliceThickness = 0x50C; // float32
                constexpr std::ptrdiff_t m_nIndirectTextureDimX = 0x510; // int32
                constexpr std::ptrdiff_t m_nIndirectTextureDimY = 0x514; // int32
                constexpr std::ptrdiff_t m_nIndirectTextureDimZ = 0x518; // int32
                constexpr std::ptrdiff_t m_vBoxMins = 0x51C; // Vector
                constexpr std::ptrdiff_t m_vBoxMaxs = 0x528; // Vector
                constexpr std::ptrdiff_t m_bActive = 0x534; // bool
                constexpr std::ptrdiff_t m_flStartAnisoTime = 0x538; // GameTime_t
                constexpr std::ptrdiff_t m_flStartScatterTime = 0x53C; // GameTime_t
                constexpr std::ptrdiff_t m_flStartDrawDistanceTime = 0x540; // GameTime_t
                constexpr std::ptrdiff_t m_flStartAnisotropy = 0x544; // float32
                constexpr std::ptrdiff_t m_flStartScattering = 0x548; // float32
                constexpr std::ptrdiff_t m_flStartDrawDistance = 0x54C; // float32
                constexpr std::ptrdiff_t m_flDefaultAnisotropy = 0x550; // float32
                constexpr std::ptrdiff_t m_flDefaultScattering = 0x554; // float32
                constexpr std::ptrdiff_t m_flDefaultDrawDistance = 0x558; // float32
                constexpr std::ptrdiff_t m_bStartDisabled = 0x55C; // bool
                constexpr std::ptrdiff_t m_bEnableIndirect = 0x55D; // bool
                constexpr std::ptrdiff_t m_bIndirectUseLPVs = 0x55E; // bool
                constexpr std::ptrdiff_t m_bIsMaster = 0x55F; // bool
                constexpr std::ptrdiff_t m_hFogIndirectTexture = 0x560; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_nForceRefreshCount = 0x568; // int32
                constexpr std::ptrdiff_t m_fNoiseSpeed = 0x56C; // float32
                constexpr std::ptrdiff_t m_fNoiseStrength = 0x570; // float32
                constexpr std::ptrdiff_t m_vNoiseScale = 0x574; // Vector
                constexpr std::ptrdiff_t m_fWindSpeed = 0x580; // float32
                constexpr std::ptrdiff_t m_vWindDirection = 0x584; // Vector
                constexpr std::ptrdiff_t m_bFirstTime = 0x590; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_flCastStartTime (GameTime_t)
            namespace CCitadel_Ability_Mirage_FireBeetles {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB0C; // QAngle
                constexpr std::ptrdiff_t m_flCastStartTime = 0xB18; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_LightningBall {
                constexpr std::ptrdiff_t m_hProjectile = 0x168; // CHandle<CBaseEntity>
            }
            // Parent: CPlayer_MovementServices
            // Field count: 15
            //
            // Metadata:
            // NetworkVarNames: m_flFallVelocity (float32)
            // NetworkVarNames: m_bInCrouch (bool)
            // NetworkVarNames: m_nCrouchState (uint32)
            // NetworkVarNames: m_flCrouchTransitionStartTime (GameTime_t)
            // NetworkVarNames: m_bDucked (bool)
            // NetworkVarNames: m_bDucking (bool)
            // NetworkVarNames: m_bInDuckJump (bool)
            namespace CPlayer_MovementServices_Humanoid {
                constexpr std::ptrdiff_t m_flStepSoundTime = 0x1D8; // float32
                constexpr std::ptrdiff_t m_flFallVelocity = 0x1DC; // float32
                constexpr std::ptrdiff_t m_bInCrouch = 0x1E0; // bool
                constexpr std::ptrdiff_t m_nCrouchState = 0x1E4; // uint32
                constexpr std::ptrdiff_t m_flCrouchTransitionStartTime = 0x1E8; // GameTime_t
                constexpr std::ptrdiff_t m_bDucked = 0x1EC; // bool
                constexpr std::ptrdiff_t m_bDucking = 0x1ED; // bool
                constexpr std::ptrdiff_t m_bInDuckJump = 0x1EE; // bool
                constexpr std::ptrdiff_t m_groundNormal = 0x1F0; // Vector
                constexpr std::ptrdiff_t m_flSurfaceFriction = 0x1FC; // float32
                constexpr std::ptrdiff_t m_surfaceProps = 0x200; // CUtlStringToken
                constexpr std::ptrdiff_t m_nStepside = 0x210; // int32
                constexpr std::ptrdiff_t m_iTargetVolume = 0x214; // int32
                constexpr std::ptrdiff_t m_bDisableMovementSounds = 0x218; // bool
                constexpr std::ptrdiff_t m_vecSmoothedVelocity = 0x21C; // Vector
            }
            // Parent: CPhysicsProp
            // Field count: 5
            namespace CPhysicsPropRespawnable {
                constexpr std::ptrdiff_t m_vOriginalSpawnOrigin = 0xDA0; // Vector
                constexpr std::ptrdiff_t m_vOriginalSpawnAngles = 0xDAC; // QAngle
                constexpr std::ptrdiff_t m_vOriginalMins = 0xDB8; // Vector
                constexpr std::ptrdiff_t m_vOriginalMaxs = 0xDC4; // Vector
                constexpr std::ptrdiff_t m_flRespawnDuration = 0xDD0; // float32
            }
            // Parent: CEnvSoundscapeProxy
            // Field count: 0
            namespace CEnvSoundscapeProxyAlias_snd_soundscape_proxy {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_ColdFront {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_BaseHeldItem {
                constexpr std::ptrdiff_t m_hProjectile = 0xB38; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_tFirstPickupTime = 0xB3C; // GameTime_t
            }
            // Parent: CNodeEnt
            // Field count: 0
            namespace CNodeEnt_InfoNodeHint {
            }
            // Parent: CPhysConstraint
            // Field count: 6
            namespace CPhysBallSocket {
                constexpr std::ptrdiff_t m_flJointFriction = 0x560; // float32
                constexpr std::ptrdiff_t m_bEnableSwingLimit = 0x564; // bool
                constexpr std::ptrdiff_t m_flSwingLimit = 0x568; // float32
                constexpr std::ptrdiff_t m_bEnableTwistLimit = 0x56C; // bool
                constexpr std::ptrdiff_t m_flMinTwistAngle = 0x570; // float32
                constexpr std::ptrdiff_t m_flMaxTwistAngle = 0x574; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Trapper_PoisonJar {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB0C; // QAngle
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PoisonJar_Debuff {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Fathom_ScaldingSpray_Target {
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Synth_PlasmaFlux_VData {
                constexpr std::ptrdiff_t m_WeaponDamageBonusModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_TeleportTrailParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strCasterLoopingSound = 0x1730; // CSoundEventName
                constexpr std::ptrdiff_t m_strProjectileExpireSound = 0x1740; // CSoundEventName
                constexpr std::ptrdiff_t m_strImpactSound = 0x1750; // CSoundEventName
                constexpr std::ptrdiff_t m_strTimerSound = 0x1760; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSequenceTeleport = 0x1770; // CitadelCameraOperationsSequence_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_bIsRolling (bool)
            // NetworkVarNames: m_hBall (CHandle<CCitadelViscousBall>)
            // NetworkVarNames: m_eRollingState (EViscousBowlingBallState_t)
            // NetworkVarNames: m_flNextStateTime (GameTime_t)
            // NetworkVarNames: m_flNextWallCheck (GameTime_t)
            // NetworkVarNames: m_flRollStartTime (GameTime_t)
            // NetworkVarNames: m_flWallExitTime (GameTime_t)
            // NetworkVarNames: m_vecWallExitVelocity (Vector)
            namespace CCitadel_Ability_GooBowlingBall {
                constexpr std::ptrdiff_t m_nAirJumpsLeft = 0xE48; // int32
                constexpr std::ptrdiff_t m_bIsRolling = 0xE4C; // bool
                constexpr std::ptrdiff_t m_hBall = 0xE50; // CHandle<CCitadelViscousBall>
                constexpr std::ptrdiff_t m_eRollingState = 0xE54; // EViscousBowlingBallState_t
                constexpr std::ptrdiff_t m_flNextStateTime = 0xE58; // GameTime_t
                constexpr std::ptrdiff_t m_flNextWallCheck = 0xE5C; // GameTime_t
                constexpr std::ptrdiff_t m_flRollStartTime = 0xE60; // GameTime_t
                constexpr std::ptrdiff_t m_flWallExitTime = 0xE64; // GameTime_t
                constexpr std::ptrdiff_t m_vecWallExitVelocity = 0xE68; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierAerialAssaultVData {
                constexpr std::ptrdiff_t m_FireRateModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TracerParticle = 0x6F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x7D8; // CSoundEventName
                constexpr std::ptrdiff_t m_flAirDrag = 0x7E8; // float32
                constexpr std::ptrdiff_t m_flAirSpeed = 0x7EC; // float32
                constexpr std::ptrdiff_t m_flFallSpeed = 0x7F0; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SlowingBullets_ProcVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ActiveDisarm_SpiritSteal_VData {
                constexpr std::ptrdiff_t m_SpiritStealParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ClimbRopeSpeed {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierProjectilePitchingLoopSoundThinkerVData {
                constexpr std::ptrdiff_t m_speedToPitchRemap = 0x608; // CRemapFloat
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_ComboBreaker {
            }
            // Parent: CPointEntity
            // Field count: 3
            namespace CInfoPlayerStart {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_bIsMaster = 0x4E9; // bool
                constexpr std::ptrdiff_t m_pPawnSubclass = 0x4F0; // CGlobalSymbol
            }
            // Parent: CCitadelModifierVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Mirage_SandPhantom_Passive_Victim_VData {
                constexpr std::ptrdiff_t m_SlowModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffStatusPlayerParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffStatusVictimParticle = 0x6F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffStatusNPCParticle = 0x7D8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StackDamageParticle = 0x8B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StackReadyParticle = 0x998; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StackAppliedParticle = 0xA78; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ConsumeMaxStacksSound = 0xB58; // CSoundEventName
                constexpr std::ptrdiff_t m_ConsumeMaxStacksNonHeroSound = 0xB68; // CSoundEventName
                constexpr std::ptrdiff_t m_ApplyStackSound = 0xB78; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Astro_Shotgun_Toggle {
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 0
            namespace CCitadel_Modifier_WeaponEaterStack {
            }
            // Parent: CSoundOpvarSetPointBase
            // Field count: 8
            namespace CSoundOpvarSetOBBWindEntity {
                constexpr std::ptrdiff_t m_vMins = 0x580; // Vector
                constexpr std::ptrdiff_t m_vMaxs = 0x58C; // Vector
                constexpr std::ptrdiff_t m_vDistanceMins = 0x598; // Vector
                constexpr std::ptrdiff_t m_vDistanceMaxs = 0x5A4; // Vector
                constexpr std::ptrdiff_t m_flWindMin = 0x5B0; // float32
                constexpr std::ptrdiff_t m_flWindMax = 0x5B4; // float32
                constexpr std::ptrdiff_t m_flWindMapMin = 0x5B8; // float32
                constexpr std::ptrdiff_t m_flWindMapMax = 0x5BC; // float32
            }
            // Parent: CTriggerModifier
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            namespace CCitadelIdolReturnTrigger {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x9A8; // CCitadelMinimapComponent
            }
            // Parent: CCitadelProjectile
            // Field count: 6
            namespace CCitadel_Projectile_WebWall {
                constexpr std::ptrdiff_t bHasDetonatedOnTarget = 0x870; // bool
                constexpr std::ptrdiff_t m_nWebWallFxIndex = 0x874; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecCastPosition = 0x878; // Vector
                constexpr std::ptrdiff_t m_vecCastPositionNormal = 0x884; // Vector
                constexpr std::ptrdiff_t m_vecEndPosition = 0x890; // Vector
                constexpr std::ptrdiff_t m_vecEndPositionNormal = 0x89C; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BigBoltVData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x608; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ShieldParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flModelScale = 0x6F8; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_bPreparing (bool)
            // NetworkVarNames: m_bTackling (bool)
            // NetworkVarNames: m_flTackleStartTime (GameTime_t)
            // NetworkVarNames: m_flPrepareStartTime (GameTime_t)
            // NetworkVarNames: m_vecTackleDir (Vector)
            namespace CCitadel_Ability_ChargedTackle {
                constexpr std::ptrdiff_t m_bPreparing = 0xCF8; // bool
                constexpr std::ptrdiff_t m_bTackling = 0xCF9; // bool
                constexpr std::ptrdiff_t m_flTackleStartTime = 0xCFC; // GameTime_t
                constexpr std::ptrdiff_t m_flPrepareStartTime = 0xD00; // GameTime_t
                constexpr std::ptrdiff_t m_vecTackleDir = 0xD04; // Vector
                constexpr std::ptrdiff_t m_vecLastPosition = 0xD10; // Vector
                constexpr std::ptrdiff_t m_nStuckFramesCount = 0xD1C; // int32
                constexpr std::ptrdiff_t m_vecHitEnemies = 0xD20; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nDistancePreview = 0xD38; // ParticleIndex_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelAbilityChargedBombVData {
                constexpr std::ptrdiff_t m_ChargeBombModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1650; // CSoundEventName
                constexpr std::ptrdiff_t m_flChargeForMaxDamage = 0x1660; // float32
                constexpr std::ptrdiff_t m_flMinDamagePercent = 0x1664; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Aerial_Assault_Watcher {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_GlowToTeammates {
            }
            // Parent: CRagdollProp
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_boneIndexAttached (uint32)
            // NetworkVarNames: m_ragdollAttachedObjectIndex (uint32)
            // NetworkVarNames: m_attachmentPointBoneSpace (Vector)
            // NetworkVarNames: m_attachmentPointRagdollSpace (Vector)
            namespace CRagdollPropAttached {
                constexpr std::ptrdiff_t m_boneIndexAttached = 0xBE8; // uint32
                constexpr std::ptrdiff_t m_ragdollAttachedObjectIndex = 0xBEC; // uint32
                constexpr std::ptrdiff_t m_attachmentPointBoneSpace = 0xBF0; // Vector
                constexpr std::ptrdiff_t m_attachmentPointRagdollSpace = 0xBFC; // Vector
                constexpr std::ptrdiff_t m_bShouldDetach = 0xC08; // bool
                constexpr std::ptrdiff_t m_bShouldDeleteAttachedActivationRecord = 0xC18; // bool
            }
            // Parent: CCitadelModifierAura
            // Field count: 3
            namespace CCitadel_Modifier_AirLift_ExplodeAura {
                constexpr std::ptrdiff_t m_flStartRadius = 0xE0; // float32
                constexpr std::ptrdiff_t m_flEndRadius = 0xE4; // float32
                constexpr std::ptrdiff_t m_flSpreadDuration = 0xE8; // float32
            }
            // Parent: CAI_CitadelNPCVData
            // Field count: 26
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_Boss_Tier2VData {
                constexpr std::ptrdiff_t m_flPlayerInitialSightRange = 0xFB0; // float32
                constexpr std::ptrdiff_t m_strWIPModelName = 0xFB8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_vecWeakPoints = 0x1098; // CUtlVector<WeakPointParams_t>
                constexpr std::ptrdiff_t m_BeamChargingEffect = 0x10B0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BeamPreviewEffect = 0x1190; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BeamActiveEffect = 0x1270; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StompImpactEffect = 0x1350; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StompWarningEffect = 0x1430; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flTossSpeed = 0x1510; // float32
                constexpr std::ptrdiff_t m_flStompDamage = 0x1514; // float32
                constexpr std::ptrdiff_t m_flStompTossUpMagnitude = 0x1518; // float32
                constexpr std::ptrdiff_t m_flStunDuration = 0x151C; // float32
                constexpr std::ptrdiff_t m_flStompImpactRadius = 0x1520; // float32
                constexpr std::ptrdiff_t m_flStompImpactHeight = 0x1524; // float32
                constexpr std::ptrdiff_t m_flSweepRadius = 0x1528; // float32
                constexpr std::ptrdiff_t m_flSweepSpeed = 0x152C; // float32
                constexpr std::ptrdiff_t m_flSweepZScale = 0x1530; // float32
                constexpr std::ptrdiff_t m_flSweepMaxAngle = 0x1534; // float32
                constexpr std::ptrdiff_t m_flSweepMaxRange = 0x1538; // float32
                constexpr std::ptrdiff_t m_flSweepAdjustSpeed = 0x153C; // float32
                constexpr std::ptrdiff_t m_flBurstDuration = 0x1540; // float32
                constexpr std::ptrdiff_t m_flBurstCooldown = 0x1544; // float32
                constexpr std::ptrdiff_t m_BackdoorProtectionModifier = 0x1548; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flBackDoorProtectionRange = 0x1558; // float32
                constexpr std::ptrdiff_t m_InvulModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flInvulModifierRange = 0x1570; // float32
            }
            // Parent: CCitadel_Ability_PrimaryWeapon_BeamWeapon
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_flStartWindUpTime (GameTime_t)
            // NetworkVarNames: m_flStartFiringTime (GameTime_t)
            // NetworkVarNames: m_bFiring (bool)
            namespace CCitadel_Ability_PrimaryWeapon_Bebop {
                constexpr std::ptrdiff_t m_flStartWindUpTime = 0xE68; // GameTime_t
                constexpr std::ptrdiff_t m_flStartFiringTime = 0xE6C; // GameTime_t
                constexpr std::ptrdiff_t m_bFiring = 0xE70; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_SiphonBullets_HealthLoss {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_LongRangeSlowingTech_ProcVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierDelayedStunVData {
                constexpr std::ptrdiff_t m_HitParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 0
            namespace CItemCrateSpawn {
            }
            // Parent: CTriggerModifier
            // Field count: 0
            namespace CCitadelSpeedBoostTrigger {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_IdolReturnTimer {
                constexpr std::ptrdiff_t m_vGroundOrigin = 0xC0; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ShadowClone {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Targetdummy_2 {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierRiotProtocolBuffVData {
                constexpr std::ptrdiff_t m_LaserParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PulseHitEnemyParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyDebuffModifier = 0x7C8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierCrowdControlDebuffVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_AirRaid {
            }
            // Parent: None
            // Field count: 3
            namespace CItemXP__AssignedEarner_t {
                constexpr std::ptrdiff_t m_eSource = 0x0; // ECurrencySource
                constexpr std::ptrdiff_t m_iBounty = 0x4; // int32
                constexpr std::ptrdiff_t m_eDenyType = 0x8; // EDenyDistributionType
            }
            // Parent: CItem
            // Field count: 32
            namespace CItemGeneric {
                constexpr std::ptrdiff_t m_bHasTriggerRadius = 0xB28; // bool
                constexpr std::ptrdiff_t m_bHasPickupRadius = 0xB29; // bool
                constexpr std::ptrdiff_t m_flPickupRadiusSqr = 0xB2C; // float32
                constexpr std::ptrdiff_t m_flTriggerRadiusSqr = 0xB30; // float32
                constexpr std::ptrdiff_t m_flLastPickupCheck = 0xB34; // GameTime_t
                constexpr std::ptrdiff_t m_bPlayerCounterListenerAdded = 0xB38; // bool
                constexpr std::ptrdiff_t m_bPlayerInTriggerRadius = 0xB39; // bool
                constexpr std::ptrdiff_t m_hSpawnParticleEffect = 0xB40; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                constexpr std::ptrdiff_t m_pAmbientSoundEffect = 0xB48; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bAutoStartAmbientSound = 0xB50; // bool
                constexpr std::ptrdiff_t m_pSpawnScriptFunction = 0xB58; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hPickupParticleEffect = 0xB60; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                constexpr std::ptrdiff_t m_pPickupSoundEffect = 0xB68; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_pPickupScriptFunction = 0xB70; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hTimeoutParticleEffect = 0xB78; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                constexpr std::ptrdiff_t m_pTimeoutSoundEffect = 0xB80; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_pTimeoutScriptFunction = 0xB88; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_pPickupFilterName = 0xB90; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hPickupFilter = 0xB98; // CHandle<CBaseFilter>
                constexpr std::ptrdiff_t m_OnPickup = 0xBA0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTimeout = 0xBC8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTriggerStartTouch = 0xBF0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTriggerTouch = 0xC18; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTriggerEndTouch = 0xC40; // CEntityIOOutput
                constexpr std::ptrdiff_t m_pAllowPickupScriptFunction = 0xC68; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flPickupRadius = 0xC70; // float32
                constexpr std::ptrdiff_t m_flTriggerRadius = 0xC74; // float32
                constexpr std::ptrdiff_t m_pTriggerSoundEffect = 0xC78; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bGlowWhenInTrigger = 0xC80; // bool
                constexpr std::ptrdiff_t m_glowColor = 0xC81; // Color
                constexpr std::ptrdiff_t m_bUseable = 0xC85; // bool
                constexpr std::ptrdiff_t m_hTriggerHelper = 0xC88; // CHandle<CItemGenericTriggerHelper>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierIdolReturnTimerVData {
                constexpr std::ptrdiff_t m_ChannelParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_IcePath_TechPowerLinger {
                constexpr std::ptrdiff_t m_nBonusSpirit = 0xC0; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_VeilWalkerWatcherVData {
                constexpr std::ptrdiff_t m_InvisModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_VeilWalkerTriggeredModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_VeilWalkerMovespeed = 0x628; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flTraceLengthMin = 0x638; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_MeleeTarget {
            }
            // Parent: CNPC_TrooperNeutralVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_TrooperNeutralNodeMoverVData {
                constexpr std::ptrdiff_t m_bEnableMovementToNodes = 0x1318; // bool
                constexpr std::ptrdiff_t m_flExposedDuration = 0x131C; // CRangeFloat
                constexpr std::ptrdiff_t m_flHideDuration = 0x1324; // CRangeFloat
                constexpr std::ptrdiff_t m_HidingModifier = 0x1330; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CLightEntity
            // Field count: 0
            namespace CLightSpotEntity {
            }
            // Parent: CCitadel_Modifier_PowerUp
            // Field count: 0
            namespace CCitadel_Modifier_PermanentPickup {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 16
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_BreakablePropPickupVData {
                constexpr std::ptrdiff_t m_spawnParticle = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_gainedParticle = 0x108; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_Color = 0x1E8; // Color
                constexpr std::ptrdiff_t m_hModel = 0x1F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_sDefaultMaterialGroupName = 0x2D0; // CUtlString
                constexpr std::ptrdiff_t m_sNameLocString = 0x2D8; // CUtlString
                constexpr std::ptrdiff_t m_nNameOffset = 0x2E0; // int32
                constexpr std::ptrdiff_t m_bShowOnMinimap = 0x2E4; // bool
                constexpr std::ptrdiff_t m_bIsPermanentPickup = 0x2E5; // bool
                constexpr std::ptrdiff_t m_iTempParticleSheetIndex = 0x2E8; // int32
                constexpr std::ptrdiff_t m_flParticleRadius = 0x2EC; // float32
                constexpr std::ptrdiff_t m_sPickupSound = 0x2F0; // CSoundEventName
                constexpr std::ptrdiff_t m_sSpawnSound = 0x300; // CSoundEventName
                constexpr std::ptrdiff_t m_flPickupRadius = 0x310; // float32
                constexpr std::ptrdiff_t m_sAmbientSound = 0x318; // CSoundEventName
                constexpr std::ptrdiff_t m_flPickupExpirationDuration = 0x328; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Mirage_Tornado_Aura_Apply_VData {
                constexpr std::ptrdiff_t m_TossModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_LiftModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strHitConfirmSound = 0x628; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityThumper3VData {
                constexpr std::ptrdiff_t m_DroneModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ShakedownPulseVData {
                constexpr std::ptrdiff_t m_strFireSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_ShakeParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChainParticle = 0x6F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_WreckerScrapBlastDebuff {
                constexpr std::ptrdiff_t m_flEnemyMoveSlow = 0xF8; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_HealingPulse_Tracker {
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_TechCleaveVData {
                constexpr std::ptrdiff_t m_TechCleaveModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_sCleaveProcSound = 0x15B8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_RescueBeam {
                constexpr std::ptrdiff_t m_flHealthPerTick = 0x1A0; // float32
                constexpr std::ptrdiff_t m_nBeamIndex = 0x1A4; // ParticleIndex_t
            }
            // Parent: CCitadelItemPickupRejuvVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelItemPickupRejuvHeroTestVData {
            }
            // Parent: CBaseEntity
            // Field count: 2
            namespace CSkyboxReference {
                constexpr std::ptrdiff_t m_worldGroupId = 0x4E8; // WorldGroupId_t
                constexpr std::ptrdiff_t m_hSkyCamera = 0x4EC; // CHandle<CSkyCamera>
            }
            // Parent: CBasePropDoor
            // Field count: 17
            namespace CPropDoorRotating {
                constexpr std::ptrdiff_t m_vecAxis = 0xF88; // Vector
                constexpr std::ptrdiff_t m_flDistance = 0xF94; // float32
                constexpr std::ptrdiff_t m_eSpawnPosition = 0xF98; // PropDoorRotatingSpawnPos_t
                constexpr std::ptrdiff_t m_eOpenDirection = 0xF9C; // PropDoorRotatingOpenDirection_e
                constexpr std::ptrdiff_t m_eCurrentOpenDirection = 0xFA0; // PropDoorRotatingOpenDirection_e
                constexpr std::ptrdiff_t m_flAjarAngle = 0xFA4; // float32
                constexpr std::ptrdiff_t m_angRotationAjarDeprecated = 0xFA8; // QAngle
                constexpr std::ptrdiff_t m_angRotationClosed = 0xFB4; // QAngle
                constexpr std::ptrdiff_t m_angRotationOpenForward = 0xFC0; // QAngle
                constexpr std::ptrdiff_t m_angRotationOpenBack = 0xFCC; // QAngle
                constexpr std::ptrdiff_t m_angGoal = 0xFD8; // QAngle
                constexpr std::ptrdiff_t m_vecForwardBoundsMin = 0xFE4; // Vector
                constexpr std::ptrdiff_t m_vecForwardBoundsMax = 0xFF0; // Vector
                constexpr std::ptrdiff_t m_vecBackBoundsMin = 0xFFC; // Vector
                constexpr std::ptrdiff_t m_vecBackBoundsMax = 0x1008; // Vector
                constexpr std::ptrdiff_t m_bAjarDoorShouldntAlwaysOpen = 0x1014; // bool
                constexpr std::ptrdiff_t m_hEntityBlocker = 0x1018; // CHandle<CEntityBlocker>
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierAura_ConeVData {
                constexpr std::ptrdiff_t m_flAuraTargetingConeHalfWidth = 0x648; // float32
                constexpr std::ptrdiff_t m_flAuraTargetingConeAngle = 0x64C; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ControlPointCapturerAuraTarget {
            }
            // Parent: CBaseModelEntity
            // Field count: 21
            //
            // Metadata:
            // MNetworkIncludeByUserGroup
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_RopeFlags (uint16)
            // NetworkVarNames: m_Slack (int16)
            // NetworkVarNames: m_Width (float32)
            // NetworkVarNames: m_TextureScale (float32)
            // NetworkVarNames: m_nSegments (uint8)
            // NetworkVarNames: m_bConstrainBetweenEndpoints (bool)
            // NetworkVarNames: m_iRopeMaterialModelIndex (HMaterialStrong)
            // NetworkVarNames: m_Subdiv (uint8)
            // NetworkVarNames: m_nChangeCount (uint8)
            // NetworkVarNames: m_RopeLength (int16)
            // NetworkVarNames: m_fLockedPoints (uint8)
            // NetworkVarNames: m_flScrollSpeed (float32)
            // NetworkVarNames: m_hStartPoint (CHandle<CBaseEntity>)
            // NetworkVarNames: m_hEndPoint (CHandle<CBaseEntity>)
            // NetworkVarNames: m_iStartAttachment (AttachmentHandle_t)
            // NetworkVarNames: m_iEndAttachment (AttachmentHandle_t)
            namespace CRopeKeyframe {
                constexpr std::ptrdiff_t m_RopeFlags = 0x7C8; // uint16
                constexpr std::ptrdiff_t m_iNextLinkName = 0x7D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_Slack = 0x7D8; // int16
                constexpr std::ptrdiff_t m_Width = 0x7DC; // float32
                constexpr std::ptrdiff_t m_TextureScale = 0x7E0; // float32
                constexpr std::ptrdiff_t m_nSegments = 0x7E4; // uint8
                constexpr std::ptrdiff_t m_bConstrainBetweenEndpoints = 0x7E5; // bool
                constexpr std::ptrdiff_t m_strRopeMaterialModel = 0x7E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iRopeMaterialModelIndex = 0x7F0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_Subdiv = 0x7F8; // uint8
                constexpr std::ptrdiff_t m_nChangeCount = 0x7F9; // uint8
                constexpr std::ptrdiff_t m_RopeLength = 0x7FA; // int16
                constexpr std::ptrdiff_t m_fLockedPoints = 0x7FC; // uint8
                constexpr std::ptrdiff_t m_bCreatedFromMapFile = 0x7FD; // bool
                constexpr std::ptrdiff_t m_flScrollSpeed = 0x800; // float32
                constexpr std::ptrdiff_t m_bStartPointValid = 0x804; // bool
                constexpr std::ptrdiff_t m_bEndPointValid = 0x805; // bool
                constexpr std::ptrdiff_t m_hStartPoint = 0x808; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hEndPoint = 0x80C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iStartAttachment = 0x810; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_iEndAttachment = 0x811; // AttachmentHandle_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_LifeSteal {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Dust_Storm_Thrown {
            }
            // Parent: CitadelItemVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_PersonalRejuvenatorVData {
                constexpr std::ptrdiff_t m_DeployParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RespawnParticle = 0x1688; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sDeploySound = 0x1768; // CSoundEventName
                constexpr std::ptrdiff_t m_sRespawnSound = 0x1778; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 18
            namespace CCitadel_Modifier_Tier2Boss_LaserBeam {
                constexpr std::ptrdiff_t m_bPreview = 0x130; // bool
                constexpr std::ptrdiff_t m_flSoundStartTime = 0x13C; // GameTime_t
                constexpr std::ptrdiff_t m_vStart = 0x144; // Vector
                constexpr std::ptrdiff_t m_vEnd = 0x150; // Vector
                constexpr std::ptrdiff_t m_vPrevEnd = 0x15C; // Vector
                constexpr std::ptrdiff_t m_flAngleBetweenTrace = 0x168; // float32
                constexpr std::ptrdiff_t m_flDamagePerTick = 0x16C; // float32
                constexpr std::ptrdiff_t m_flCreepDamagePerTick = 0x170; // float32
                constexpr std::ptrdiff_t m_flNextDamageTick = 0x174; // GameTime_t
                constexpr std::ptrdiff_t m_vecEntitiesHit = 0x178; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_flDamageTickRate = 0x190; // float32
                constexpr std::ptrdiff_t m_flLastShakeTime = 0x194; // GameTime_t
                constexpr std::ptrdiff_t m_bSweepRightFirst = 0x198; // bool
                constexpr std::ptrdiff_t m_angBeamAim = 0x19C; // QAngle
                constexpr std::ptrdiff_t m_vecBeamTarget = 0x1A8; // Vector
                constexpr std::ptrdiff_t m_flLastBeamUpdateTime = 0x1B4; // GameTime_t
                constexpr std::ptrdiff_t m_flTargetingTaskStartTime = 0x1D0; // GameTime_t
                constexpr std::ptrdiff_t m_flTrackVel = 0x1D4; // float32
            }
            // Parent: CBaseModelEntity
            // Field count: 73
            //
            // Metadata:
            // NetworkVarNames: m_bEnabled (bool)
            // NetworkVarNames: m_nColorMode (int)
            // NetworkVarNames: m_Color (Color)
            // NetworkVarNames: m_flColorTemperature (float)
            // NetworkVarNames: m_flBrightness (float)
            // NetworkVarNames: m_flBrightnessScale (float)
            // NetworkVarNames: m_nDirectLight (int)
            // NetworkVarNames: m_nBakedShadowIndex (int)
            // NetworkVarNames: m_nLuminaireShape (int)
            // NetworkVarNames: m_flLuminaireSize (float)
            // NetworkVarNames: m_flLuminaireAnisotropy (float)
            // NetworkVarNames: m_LightStyleString (CUtlString)
            // NetworkVarNames: m_flLightStyleStartTime (GameTime_t)
            // NetworkVarNames: m_QueuedLightStyleStrings (CUtlString)
            // NetworkVarNames: m_LightStyleEvents (CUtlString)
            // NetworkVarNames: m_LightStyleTargets (CHandle<CBaseModelEntity>)
            // NetworkVarNames: m_hLightCookie (HRenderTextureStrong)
            // NetworkVarNames: m_flShape (float)
            // NetworkVarNames: m_flSoftX (float)
            // NetworkVarNames: m_flSoftY (float)
            // NetworkVarNames: m_flSkirt (float)
            // NetworkVarNames: m_flSkirtNear (float)
            // NetworkVarNames: m_vSizeParams (Vector)
            // NetworkVarNames: m_flRange (float)
            // NetworkVarNames: m_vShear (Vector)
            // NetworkVarNames: m_nBakeSpecularToCubemaps (int)
            // NetworkVarNames: m_vBakeSpecularToCubemapsSize (Vector)
            // NetworkVarNames: m_nCastShadows (int)
            // NetworkVarNames: m_nShadowMapSize (int)
            // NetworkVarNames: m_nShadowPriority (int)
            // NetworkVarNames: m_bContactShadow (bool)
            // NetworkVarNames: m_nBounceLight (int)
            // NetworkVarNames: m_flBounceScale (float)
            // NetworkVarNames: m_flMinRoughness (float)
            // NetworkVarNames: m_vAlternateColor (Vector)
            // NetworkVarNames: m_fAlternateColorBrightness (float)
            // NetworkVarNames: m_nFog (int)
            // NetworkVarNames: m_flFogStrength (float)
            // NetworkVarNames: m_nFogShadows (int)
            // NetworkVarNames: m_flFogScale (float)
            // NetworkVarNames: m_bFogMixedShadows (bool)
            // NetworkVarNames: m_flFadeSizeStart (float)
            // NetworkVarNames: m_flFadeSizeEnd (float)
            // NetworkVarNames: m_flShadowFadeSizeStart (float)
            // NetworkVarNames: m_flShadowFadeSizeEnd (float)
            // NetworkVarNames: m_bPrecomputedFieldsValid (bool)
            // NetworkVarNames: m_vPrecomputedBoundsMins (Vector)
            // NetworkVarNames: m_vPrecomputedBoundsMaxs (Vector)
            // NetworkVarNames: m_vPrecomputedOBBOrigin (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent (Vector)
            // NetworkVarNames: m_nPrecomputedSubFrusta (int)
            // NetworkVarNames: m_vPrecomputedOBBOrigin0 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles0 (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent0 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBOrigin1 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles1 (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent1 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBOrigin2 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles2 (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent2 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBOrigin3 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles3 (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent3 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBOrigin4 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles4 (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent4 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBOrigin5 (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles5 (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent5 (Vector)
            // NetworkVarNames: m_VisClusters (uint16)
            namespace CBarnLight {
                constexpr std::ptrdiff_t m_bEnabled = 0x7C0; // bool
                constexpr std::ptrdiff_t m_nColorMode = 0x7C4; // int32
                constexpr std::ptrdiff_t m_Color = 0x7C8; // Color
                constexpr std::ptrdiff_t m_flColorTemperature = 0x7CC; // float32
                constexpr std::ptrdiff_t m_flBrightness = 0x7D0; // float32
                constexpr std::ptrdiff_t m_flBrightnessScale = 0x7D4; // float32
                constexpr std::ptrdiff_t m_nDirectLight = 0x7D8; // int32
                constexpr std::ptrdiff_t m_nBakedShadowIndex = 0x7DC; // int32
                constexpr std::ptrdiff_t m_nLuminaireShape = 0x7E0; // int32
                constexpr std::ptrdiff_t m_flLuminaireSize = 0x7E4; // float32
                constexpr std::ptrdiff_t m_flLuminaireAnisotropy = 0x7E8; // float32
                constexpr std::ptrdiff_t m_LightStyleString = 0x7F0; // CUtlString
                constexpr std::ptrdiff_t m_flLightStyleStartTime = 0x7F8; // GameTime_t
                constexpr std::ptrdiff_t m_QueuedLightStyleStrings = 0x800; // CNetworkUtlVectorBase<CUtlString>
                constexpr std::ptrdiff_t m_LightStyleEvents = 0x818; // CNetworkUtlVectorBase<CUtlString>
                constexpr std::ptrdiff_t m_LightStyleTargets = 0x830; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                constexpr std::ptrdiff_t m_StyleEvent = 0x848; // CEntityIOOutput[4]
                constexpr std::ptrdiff_t m_hLightCookie = 0x908; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_flShape = 0x910; // float32
                constexpr std::ptrdiff_t m_flSoftX = 0x914; // float32
                constexpr std::ptrdiff_t m_flSoftY = 0x918; // float32
                constexpr std::ptrdiff_t m_flSkirt = 0x91C; // float32
                constexpr std::ptrdiff_t m_flSkirtNear = 0x920; // float32
                constexpr std::ptrdiff_t m_vSizeParams = 0x924; // Vector
                constexpr std::ptrdiff_t m_flRange = 0x930; // float32
                constexpr std::ptrdiff_t m_vShear = 0x934; // Vector
                constexpr std::ptrdiff_t m_nBakeSpecularToCubemaps = 0x940; // int32
                constexpr std::ptrdiff_t m_vBakeSpecularToCubemapsSize = 0x944; // Vector
                constexpr std::ptrdiff_t m_nCastShadows = 0x950; // int32
                constexpr std::ptrdiff_t m_nShadowMapSize = 0x954; // int32
                constexpr std::ptrdiff_t m_nShadowPriority = 0x958; // int32
                constexpr std::ptrdiff_t m_bContactShadow = 0x95C; // bool
                constexpr std::ptrdiff_t m_nBounceLight = 0x960; // int32
                constexpr std::ptrdiff_t m_flBounceScale = 0x964; // float32
                constexpr std::ptrdiff_t m_flMinRoughness = 0x968; // float32
                constexpr std::ptrdiff_t m_vAlternateColor = 0x96C; // Vector
                constexpr std::ptrdiff_t m_fAlternateColorBrightness = 0x978; // float32
                constexpr std::ptrdiff_t m_nFog = 0x97C; // int32
                constexpr std::ptrdiff_t m_flFogStrength = 0x980; // float32
                constexpr std::ptrdiff_t m_nFogShadows = 0x984; // int32
                constexpr std::ptrdiff_t m_flFogScale = 0x988; // float32
                constexpr std::ptrdiff_t m_bFogMixedShadows = 0x98C; // bool
                constexpr std::ptrdiff_t m_flFadeSizeStart = 0x990; // float32
                constexpr std::ptrdiff_t m_flFadeSizeEnd = 0x994; // float32
                constexpr std::ptrdiff_t m_flShadowFadeSizeStart = 0x998; // float32
                constexpr std::ptrdiff_t m_flShadowFadeSizeEnd = 0x99C; // float32
                constexpr std::ptrdiff_t m_bPrecomputedFieldsValid = 0x9A0; // bool
                constexpr std::ptrdiff_t m_vPrecomputedBoundsMins = 0x9A4; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedBoundsMaxs = 0x9B0; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin = 0x9BC; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles = 0x9C8; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent = 0x9D4; // Vector
                constexpr std::ptrdiff_t m_nPrecomputedSubFrusta = 0x9E0; // int32
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin0 = 0x9E4; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles0 = 0x9F0; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent0 = 0x9FC; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin1 = 0xA08; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles1 = 0xA14; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent1 = 0xA20; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin2 = 0xA2C; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles2 = 0xA38; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent2 = 0xA44; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin3 = 0xA50; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles3 = 0xA5C; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent3 = 0xA68; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin4 = 0xA74; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles4 = 0xA80; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent4 = 0xA8C; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin5 = 0xA98; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles5 = 0xAA4; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent5 = 0xAB0; // Vector
                constexpr std::ptrdiff_t m_bPvsModifyEntity = 0xABC; // bool
                constexpr std::ptrdiff_t m_VisClusters = 0xAC0; // CNetworkUtlVectorBase<uint16>
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_SleepAOE {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_WeaponUpgrade_FireRateAura {
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CEnvViewPunch {
                constexpr std::ptrdiff_t m_flRadius = 0x4E8; // float32
                constexpr std::ptrdiff_t m_angViewPunch = 0x4EC; // QAngle
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_AirLiftExplodingAllyVData {
                constexpr std::ptrdiff_t m_strExplodeEffect = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AOEModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Bebop_LaserBeamVData {
                constexpr std::ptrdiff_t m_LaserModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ChargeParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flCancelCooldown = 0x1650; // float32
            }
            // Parent: CCitadel_Modifier_Invis
            // Field count: 1
            namespace CCitadel_Modifier_Camouflage_Invis {
                constexpr std::ptrdiff_t m_vCastPosition = 0x260; // Vector
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 0
            namespace CCitadel_Ability_TrooperGrenade {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_BaseShield {
                constexpr std::ptrdiff_t m_strToken = 0xC0; // CUtlSymbolLarge
            }
            // Parent: CCitadel_BreakablePropPickup
            // Field count: 0
            namespace CCitadel_BreakablePropHealthPickup {
            }
            // Parent: CPointEntity
            // Field count: 3
            namespace CPathCorner {
                constexpr std::ptrdiff_t m_flWait = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flRadius = 0x4EC; // float32
                constexpr std::ptrdiff_t m_OnPass = 0x4F0; // CEntityIOOutput
            }
            // Parent: CAttributeManager
            // Field count: 1
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_Item (CEconItemView)
            namespace CAttributeContainer {
                constexpr std::ptrdiff_t m_Item = 0x68; // CEconItemView
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_AnimalCurseVData {
                constexpr std::ptrdiff_t m_CursedModel = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_TargetParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flModelScale = 0x7C8; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Lash_Flog_Debuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FlameDashVData {
                constexpr std::ptrdiff_t m_GroundAuraModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ProgressModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_FlameDashParticle = 0x628; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlameAuraParticle = 0x708; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Stabilizing_Tripod {
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_VexBarrierVData {
                constexpr std::ptrdiff_t m_ShieldModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_HollowPoint_Stack {
                constexpr std::ptrdiff_t m_flStackDecayDelayTime = 0xC0; // GameTime_t
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_SlowImmunity {
            }
            // Parent: CLogicalEntity
            // Field count: 5
            namespace CMultiSource {
                constexpr std::ptrdiff_t m_rgEntities = 0x4E8; // CHandle<CBaseEntity>[32]
                constexpr std::ptrdiff_t m_rgTriggered = 0x568; // int32[32]
                constexpr std::ptrdiff_t m_OnTrigger = 0x5E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iTotal = 0x610; // int32
                constexpr std::ptrdiff_t m_globalstate = 0x618; // CUtlSymbolLarge
            }
            // Parent: CLogicalEntity
            // Field count: 2
            namespace CLogicNavigation {
                constexpr std::ptrdiff_t m_isOn = 0x4F0; // bool
                constexpr std::ptrdiff_t m_navProperty = 0x4F4; // navproperties_t
            }
            // Parent: CPointEntity
            // Field count: 12
            namespace CEnvEntityMaker {
                constexpr std::ptrdiff_t m_vecEntityMins = 0x4E8; // Vector
                constexpr std::ptrdiff_t m_vecEntityMaxs = 0x4F4; // Vector
                constexpr std::ptrdiff_t m_hCurrentInstance = 0x500; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hCurrentBlocker = 0x504; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vecBlockerOrigin = 0x508; // Vector
                constexpr std::ptrdiff_t m_angPostSpawnDirection = 0x514; // QAngle
                constexpr std::ptrdiff_t m_flPostSpawnDirectionVariance = 0x520; // float32
                constexpr std::ptrdiff_t m_flPostSpawnSpeed = 0x524; // float32
                constexpr std::ptrdiff_t m_bPostSpawnUseAngles = 0x528; // bool
                constexpr std::ptrdiff_t m_iszTemplate = 0x530; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_pOutputOnSpawned = 0x538; // CEntityIOOutput
                constexpr std::ptrdiff_t m_pOutputOnFailedSpawn = 0x560; // CEntityIOOutput
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CPointEntity {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Fear_VData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            namespace CCitadel_Ability_Magician_BigBolt {
                constexpr std::ptrdiff_t m_flNextShootTime = 0xD00; // GameTime_t
                constexpr std::ptrdiff_t m_iBoltsFired = 0xD04; // int32
                constexpr std::ptrdiff_t m_iRemainingBolts = 0xD08; // int32
                constexpr std::ptrdiff_t m_bPreppingShoot = 0xD0C; // bool
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 0
            namespace CCitadel_Modifier_MagicStormWatcher {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_DiscordVData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_TechRangeClamp {
            }
            // Parent: CBaseFilter
            // Field count: 4
            namespace CFilterMultiple {
                constexpr std::ptrdiff_t m_nFilterType = 0x540; // filter_t
                constexpr std::ptrdiff_t m_iFilterName = 0x548; // CUtlSymbolLarge[10]
                constexpr std::ptrdiff_t m_hFilter = 0x598; // CHandle<CBaseEntity>[10]
                constexpr std::ptrdiff_t m_nFilterCount = 0x5C0; // int32
            }
            // Parent: CPlayerPawnComponent
            // Field count: 0
            namespace CPlayer_UseServices {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_Grasp_Caster_VData {
                constexpr std::ptrdiff_t m_CastParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 1
            namespace CCitadel_Modifier_Petrify {
                constexpr std::ptrdiff_t flAccumulatedDamage = 0xC8; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityRestorativeGooVData {
                constexpr std::ptrdiff_t m_RestorativeGooParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RestorativeGooModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            namespace CCitadel_Ability_Teleport {
                constexpr std::ptrdiff_t m_bTeleportingToTarget = 0xB00; // bool
                constexpr std::ptrdiff_t m_vTargetPosition = 0xB04; // Vector
                constexpr std::ptrdiff_t m_vTargetAngles = 0xB10; // QAngle
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BulletArmorReductionVData {
            }
            // Parent: CEntityComponent
            // Field count: 1
            namespace CScriptComponent {
                constexpr std::ptrdiff_t m_scriptClassName = 0x30; // CUtlSymbolLarge
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CCitadel_Projectile_Archer_ChargedShot {
            }
            // Parent: CBaseEntity
            // Field count: 1
            namespace CPhysicsWire {
                constexpr std::ptrdiff_t m_nDensity = 0x4E8; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGenericPerson4VData {
            }
            // Parent: CCitadel_Modifier_Sleep
            // Field count: 0
            namespace CCitadel_Modifier_SleepDagger_Asleep {
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_Chrono_KineticCarbine {
                constexpr std::ptrdiff_t m_nBulletCount = 0xC0; // int32
                constexpr std::ptrdiff_t m_flElapsedPct = 0xC4; // float32
                constexpr std::ptrdiff_t m_hTimeWarp = 0xC8; // CHandle<CCitadelBulletTimeWarp>
                constexpr std::ptrdiff_t m_nFullyChargedParticle = 0xCC; // ParticleIndex_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HealthSwapPrecastVData {
                constexpr std::ptrdiff_t m_strTargetParticleEffect = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strTargetEnemyParticleEffect = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strTargetScreenParticleEffect = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_LifeDrainVData {
                constexpr std::ptrdiff_t m_SilenceModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DrainParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BeltFed_MagazineVData {
                constexpr std::ptrdiff_t m_SpinUpSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_SpinDownSound = 0x618; // CSoundEventName
                constexpr std::ptrdiff_t m_SpinLoopSound = 0x628; // CSoundEventName
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemStimPakVData {
                constexpr std::ptrdiff_t m_StimPakModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CastParticle = 0x15B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_TriggerPush {
                constexpr std::ptrdiff_t m_vPush = 0xC0; // Vector
            }
            // Parent: None
            // Field count: 12
            //
            // Metadata:
            // NetworkVarNames: m_nEntIndex (CEntityIndex)
            // NetworkVarNames: m_nTeam (int)
            // NetworkVarNames: m_eClass (Class_T)
            // NetworkVarNames: m_iLane (int)
            // NetworkVarNames: m_eHeight (EMinimapHeight)
            // NetworkVarNames: m_bVisibleOnMap (bool)
            // NetworkVarNames: m_bBackdoorProtectionActive (bool)
            // NetworkVarNames: m_nTickHidden (GameTick_t)
            // NetworkVarNames: m_strEntityName (CUtlString)
            // NetworkVarNames: m_nHealthPercent (uint8)
            // NetworkVarNames: m_nPositionX (uint8)
            // NetworkVarNames: m_nPositionY (uint8)
            namespace STeamFOWEntity {
                constexpr std::ptrdiff_t m_nEntIndex = 0x30; // CEntityIndex
                constexpr std::ptrdiff_t m_nTeam = 0x34; // int32
                constexpr std::ptrdiff_t m_eClass = 0x38; // Class_T
                constexpr std::ptrdiff_t m_iLane = 0x3C; // int32
                constexpr std::ptrdiff_t m_eHeight = 0x40; // EMinimapHeight
                constexpr std::ptrdiff_t m_bVisibleOnMap = 0x41; // bool
                constexpr std::ptrdiff_t m_bBackdoorProtectionActive = 0x42; // bool
                constexpr std::ptrdiff_t m_nTickHidden = 0x44; // GameTick_t
                constexpr std::ptrdiff_t m_strEntityName = 0x48; // CUtlString
                constexpr std::ptrdiff_t m_nHealthPercent = 0x50; // uint8
                constexpr std::ptrdiff_t m_nPositionX = 0x51; // uint8
                constexpr std::ptrdiff_t m_nPositionY = 0x52; // uint8
            }
            // Parent: CPropDoorRotating
            // Field count: 4
            namespace CPropDoorRotatingBreakable {
                constexpr std::ptrdiff_t m_bBreakable = 0x1020; // bool
                constexpr std::ptrdiff_t m_isAbleToCloseAreaPortals = 0x1021; // bool
                constexpr std::ptrdiff_t m_currentDamageState = 0x1024; // int32
                constexpr std::ptrdiff_t m_damageStates = 0x1028; // CUtlVector<CUtlSymbolLarge>
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ThermalDetonator_ThinkerVData {
                constexpr std::ptrdiff_t m_GroundParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CNPC_SimpleAnimatingAIVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_BaseDefenseSentryVData {
                constexpr std::ptrdiff_t m_AbilityWeapon = 0x108; // CSubclassName<4>
                constexpr std::ptrdiff_t m_SentryExplosionParticle = 0x118; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flTimeToStartScale = 0x1F8; // float32
                constexpr std::ptrdiff_t m_flTimeToEndScale = 0x1FC; // float32
                constexpr std::ptrdiff_t m_flMaxScale = 0x200; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ViperHookBladeVData {
                constexpr std::ptrdiff_t m_SlowDebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DaggerStuckParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerImpactParticle = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerExplodeParticle = 0x1730; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDaggerHitSound = 0x1810; // CSoundEventName
                constexpr std::ptrdiff_t m_strDaggerExplodeSound = 0x1820; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Hook_Shield {
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_FireBomb {
                constexpr std::ptrdiff_t m_flSideMoveSpeed = 0x130; // float32
                constexpr std::ptrdiff_t m_vReturnPosition = 0x134; // Vector
                constexpr std::ptrdiff_t m_vReturnAngles = 0x140; // QAngle
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Item_AOESilence_Target {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TechBurst_ProcVData {
                constexpr std::ptrdiff_t m_ProcParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_RespawnCredit {
                constexpr std::ptrdiff_t m_bActivated = 0xC0; // bool
                constexpr std::ptrdiff_t m_bSpokeAboutToExpire = 0xC1; // bool
            }
            // Parent: CBaseFire
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_nFlameModelIndex (int32)
            // NetworkVarNames: m_nFlameFromAboveModelIndex (int32)
            namespace CFireSmoke {
                constexpr std::ptrdiff_t m_nFlameModelIndex = 0x4F8; // int32
                constexpr std::ptrdiff_t m_nFlameFromAboveModelIndex = 0x4FC; // int32
            }
            // Parent: CBaseAnimGraph
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_sPickupName (CUtlString)
            // NetworkVarNames: m_nNameOffset (int)
            // NetworkVarNames: m_sAmbientNoise (CUtlString)
            namespace CCitadel_BreakablePropPickup {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0xA48; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_bActive = 0xA60; // bool
                constexpr std::ptrdiff_t m_sPickupName = 0xA68; // CUtlString
                constexpr std::ptrdiff_t m_nNameOffset = 0xA70; // int32
                constexpr std::ptrdiff_t m_sAmbientNoise = 0xA78; // CUtlString
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_HealthRegenAura {
            }
            // Parent: CBaseModelEntity
            // Field count: 7
            //
            // Metadata:
            // MNetworkIncludeByUserGroup
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_nHorizontalSize (uint32)
            // NetworkVarNames: m_nVerticalSize (uint32)
            // NetworkVarNames: m_nMinDist (uint32)
            // NetworkVarNames: m_nMaxDist (uint32)
            // NetworkVarNames: m_nOuterMaxDist (uint32)
            // NetworkVarNames: m_flGlowProxySize (float32)
            // NetworkVarNames: m_flHDRColorScale (float32)
            namespace CLightGlow {
                constexpr std::ptrdiff_t m_nHorizontalSize = 0x7C0; // uint32
                constexpr std::ptrdiff_t m_nVerticalSize = 0x7C4; // uint32
                constexpr std::ptrdiff_t m_nMinDist = 0x7C8; // uint32
                constexpr std::ptrdiff_t m_nMaxDist = 0x7CC; // uint32
                constexpr std::ptrdiff_t m_nOuterMaxDist = 0x7D0; // uint32
                constexpr std::ptrdiff_t m_flGlowProxySize = 0x7D4; // float32
                constexpr std::ptrdiff_t m_flHDRColorScale = 0x7D8; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FearWatcherVData {
                constexpr std::ptrdiff_t m_BuildupProcModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x648; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x658; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_Crescendo_InAOE_VData {
                constexpr std::ptrdiff_t m_PostAOEModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_VeilWalkerMovespeed {
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 1
            namespace CCitadel_Modifier_ReinforcingCasings {
                constexpr std::ptrdiff_t m_LastHitShotID = 0xC0; // ShotID_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Upgrade_OverdriveClip_VData {
                constexpr std::ptrdiff_t m_BuffEffect = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TracerParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_DisarmProcWatcherVData {
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x638; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_DisarmProcModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImmunityModifier = 0x658; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TracerParticle = 0x668; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_DiminishingSlow {
                constexpr std::ptrdiff_t m_flSlowPercent = 0xC0; // float32
            }
            // Parent: CDynamicProp
            // Field count: 38
            //
            // Metadata:
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkIncludeByName
            // NetworkVarNames: m_eDoorState (DoorState_t)
            // NetworkVarNames: m_bLocked (bool)
            // NetworkVarNames: m_bNoNPCs (bool)
            // NetworkVarNames: m_closedPosition (Vector)
            // NetworkVarNames: m_closedAngles (QAngle)
            // NetworkVarNames: m_hMaster (CHandle<CBasePropDoor>)
            namespace CBasePropDoor {
                constexpr std::ptrdiff_t m_flAutoReturnDelay = 0xD08; // float32
                constexpr std::ptrdiff_t m_hDoorList = 0xD10; // CUtlVector<CHandle<CBasePropDoor>>
                constexpr std::ptrdiff_t m_nHardwareType = 0xD28; // int32
                constexpr std::ptrdiff_t m_bNeedsHardware = 0xD2C; // bool
                constexpr std::ptrdiff_t m_eDoorState = 0xD30; // DoorState_t
                constexpr std::ptrdiff_t m_bLocked = 0xD34; // bool
                constexpr std::ptrdiff_t m_bNoNPCs = 0xD35; // bool
                constexpr std::ptrdiff_t m_closedPosition = 0xD38; // Vector
                constexpr std::ptrdiff_t m_closedAngles = 0xD44; // QAngle
                constexpr std::ptrdiff_t m_hBlocker = 0xD50; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bFirstBlocked = 0xD54; // bool
                constexpr std::ptrdiff_t m_ls = 0xD58; // locksound_t
                constexpr std::ptrdiff_t m_bForceClosed = 0xD78; // bool
                constexpr std::ptrdiff_t m_vecLatchWorldPosition = 0xD7C; // Vector
                constexpr std::ptrdiff_t m_hActivator = 0xD88; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_SoundMoving = 0xD98; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundOpen = 0xDA0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundClose = 0xDA8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundLock = 0xDB0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundUnlock = 0xDB8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundLatch = 0xDC0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundPound = 0xDC8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundJiggle = 0xDD0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_SoundLockedAnim = 0xDD8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_numCloseAttempts = 0xDE0; // int32
                constexpr std::ptrdiff_t m_nPhysicsMaterial = 0xDE4; // CUtlStringToken
                constexpr std::ptrdiff_t m_SlaveName = 0xDE8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hMaster = 0xDF0; // CHandle<CBasePropDoor>
                constexpr std::ptrdiff_t m_OnBlockedClosing = 0xDF8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnBlockedOpening = 0xE20; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUnblockedClosing = 0xE48; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUnblockedOpening = 0xE70; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFullyClosed = 0xE98; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFullyOpen = 0xEC0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnClose = 0xEE8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnOpen = 0xF10; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLockedUse = 0xF38; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAjarOpen = 0xF60; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CTriggerTrooperDetector {
                constexpr std::ptrdiff_t m_flRadius = 0x9F0; // float32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_UtilityUpgrade_DebuffImmunity {
            }
            // Parent: CBaseEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_iCurrentMaxRagdollCount (int8)
            namespace CRagdollManager {
                constexpr std::ptrdiff_t m_iCurrentMaxRagdollCount = 0x4E8; // int8
                constexpr std::ptrdiff_t m_iMaxRagdollCount = 0x4EC; // int32
                constexpr std::ptrdiff_t m_bSaveImportant = 0x4F0; // bool
                constexpr std::ptrdiff_t m_bCanTakeDamage = 0x4F1; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Rutger_CheatDeath_VData {
                constexpr std::ptrdiff_t m_ModifierCheatDeathActivated = 0x1560; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierFealtyTargetVData {
                constexpr std::ptrdiff_t m_CastParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_Arcane_Eater_Proc {
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemMetalSkinVData {
                constexpr std::ptrdiff_t m_MetalSkinModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Upgrade_AmmoScavenger_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_StackSound = 0x15B8; // CSoundEventName
                constexpr std::ptrdiff_t m_AmmoSound = 0x15C8; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ShieldTracker_BaseVData {
                constexpr std::ptrdiff_t m_flShieldImpactEffectDuration = 0x608; // float32
                constexpr std::ptrdiff_t m_ShieldImpactParticle = 0x610; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShieldImpactModifier = 0x6F0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t eShieldType = 0x700; // EShieldType_t
                constexpr std::ptrdiff_t flCooldownOnDamage = 0x704; // float32
                constexpr std::ptrdiff_t flCooldownOnBreak = 0x708; // float32
                constexpr std::ptrdiff_t flRegenDuration = 0x70C; // float32
            }
            // Parent: CBaseTrigger
            // Field count: 12
            namespace CTriggerFan {
                constexpr std::ptrdiff_t m_vFanOrigin = 0x990; // Vector
                constexpr std::ptrdiff_t m_vFanEnd = 0x99C; // Vector
                constexpr std::ptrdiff_t m_vNoise = 0x9A8; // Vector
                constexpr std::ptrdiff_t m_flForce = 0x9B4; // float32
                constexpr std::ptrdiff_t m_flRopeForceScale = 0x9B8; // float32
                constexpr std::ptrdiff_t m_flPlayerForce = 0x9BC; // float32
                constexpr std::ptrdiff_t m_flRampTime = 0x9C0; // float32
                constexpr std::ptrdiff_t m_bFalloff = 0x9C4; // bool
                constexpr std::ptrdiff_t m_bPushPlayer = 0x9C5; // bool
                constexpr std::ptrdiff_t m_bRampDown = 0x9C6; // bool
                constexpr std::ptrdiff_t m_bAddNoise = 0x9C7; // bool
                constexpr std::ptrdiff_t m_RampTimer = 0x9C8; // CountdownTimer
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityThumper2VData {
                constexpr std::ptrdiff_t m_StompParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStompExplosionSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_BuffModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BarbedWireAuraModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HauntWatcherVData {
                constexpr std::ptrdiff_t m_HauntDamageModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x648; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x658; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_ExplosiveBarrel {
                constexpr std::ptrdiff_t m_hBarrel = 0xB00; // CHandle<CCitadelProjectile>
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityVacuumVData {
                constexpr std::ptrdiff_t m_VacuumAuraModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flAirSpeedMax = 0x1570; // float32
                constexpr std::ptrdiff_t m_flFallSpeedMax = 0x1574; // float32
                constexpr std::ptrdiff_t m_flAirDrag = 0x1578; // float32
                constexpr std::ptrdiff_t m_flMaxMovespeed = 0x157C; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierBullChargingVData {
                constexpr std::ptrdiff_t m_ChargeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilitySprintVData {
                constexpr std::ptrdiff_t m_SprintParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strSprintSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_flInCombatDuration = 0x1650; // float32
                constexpr std::ptrdiff_t m_flSprintAccMS = 0x1654; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ZiplineSpeed {
                constexpr std::ptrdiff_t m_iLane = 0xC0; // int32
            }
            // Parent: CPathCorner
            // Field count: 0
            namespace CPathCornerCrash {
            }
            // Parent: CCitadelProjectile
            // Field count: 5
            namespace CCitadelHornetStingProjectile {
                constexpr std::ptrdiff_t m_iMaxBounces = 0x870; // int32
                constexpr std::ptrdiff_t m_BounceCount = 0x874; // int32
                constexpr std::ptrdiff_t m_bHitHero = 0x878; // bool
                constexpr std::ptrdiff_t m_vecValidBounceTargets = 0x880; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_flBounceRange = 0x898; // float32
            }
            // Parent: CBaseEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_Handle (CHandle<CBaseEntity>)
            // NetworkVarNames: m_bSendHandle (bool)
            namespace CHandleTest {
                constexpr std::ptrdiff_t m_Handle = 0x4E8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bSendHandle = 0x4EC; // bool
            }
            // Parent: CBaseEntity
            // Field count: 8
            namespace CSoundOpvarSetEntity {
                constexpr std::ptrdiff_t m_iszStackName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOperatorName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOpvarName = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nOpvarType = 0x508; // int32
                constexpr std::ptrdiff_t m_nOpvarIndex = 0x50C; // int32
                constexpr std::ptrdiff_t m_flOpvarValue = 0x510; // float32
                constexpr std::ptrdiff_t m_OpvarValueString = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bSetOnSpawn = 0x520; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CAbility_Synth_Affliction {
                constexpr std::ptrdiff_t m_hAOEParticle = 0xB70; // ParticleIndex_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Tenacity {
            }
            // Parent: CCitadelYamatoBaseVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_InfinitySlashVData {
                constexpr std::ptrdiff_t m_flRiseSpeed = 0x1568; // float32
                constexpr std::ptrdiff_t m_flRiseDuration = 0x156C; // float32
                constexpr std::ptrdiff_t m_flSpeedDecayScale = 0x1570; // float32
                constexpr std::ptrdiff_t m_flExplodeHoldTime = 0x1574; // float32
                constexpr std::ptrdiff_t m_flExplosionShakeAmplitude = 0x1578; // float32
                constexpr std::ptrdiff_t m_flExplosionShakeFrequency = 0x157C; // float32
                constexpr std::ptrdiff_t m_flExplosionShakeDuration = 0x1580; // float32
                constexpr std::ptrdiff_t m_AOERangeEffect = 0x1588; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AnimCastEffect = 0x1668; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_cameraSequenceExplosion = 0x1748; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_BuffModifier = 0x17D0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffTimerModifier = 0x17E0; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierRiotCastDelayVData {
                constexpr std::ptrdiff_t m_UnstoppableModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 17
            //
            // Metadata:
            // NetworkVarNames: m_vecCastStartPos (Vector)
            // NetworkVarNames: m_vecDashStartPos (Vector)
            // NetworkVarNames: m_vecDashEndPos (Vector)
            // NetworkVarNames: m_angDashStartAng (QAngle)
            // NetworkVarNames: m_flDashStartTime (GameTime_t)
            // NetworkVarNames: m_flGrappleStartTime (GameTime_t)
            // NetworkVarNames: m_flGrappleArriveTime (GameTime_t)
            // NetworkVarNames: m_hTarget (EHANDLE)
            // NetworkVarNames: m_flGrappleShotAttackTime (GameTime_t)
            // NetworkVarNames: m_rgTargetPos (Vector)
            // NetworkVarNames: m_rgTargetPosTime (GameTime_t)
            namespace CCitadel_Ability_TangoTether {
                constexpr std::ptrdiff_t m_iTargetPosIndex = 0xB00; // int32
                constexpr std::ptrdiff_t m_hLockOnTarget = 0xB04; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vecCastStartPos = 0xB08; // Vector
                constexpr std::ptrdiff_t m_vecDashStartPos = 0xB14; // Vector
                constexpr std::ptrdiff_t m_vecDashEndPos = 0xB20; // Vector
                constexpr std::ptrdiff_t m_angDashStartAng = 0xB2C; // QAngle
                constexpr std::ptrdiff_t m_flDashStartTime = 0xB38; // GameTime_t
                constexpr std::ptrdiff_t m_flGrappleStartTime = 0xB3C; // GameTime_t
                constexpr std::ptrdiff_t m_flGrappleArriveTime = 0xB40; // GameTime_t
                constexpr std::ptrdiff_t m_hTarget = 0xB44; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flVelSpring = 0xB48; // float32
                constexpr std::ptrdiff_t m_flGrappleShotAttackTime = 0xB4C; // GameTime_t
                constexpr std::ptrdiff_t m_nTicksNotMoving = 0xB50; // int32
                constexpr std::ptrdiff_t m_vecPrevPos = 0xB54; // Vector
                constexpr std::ptrdiff_t m_rgTargetPos = 0xB60; // Vector[20]
                constexpr std::ptrdiff_t m_rgTargetPosTime = 0xC50; // GameTime_t[20]
                constexpr std::ptrdiff_t m_nGrappleTravelEffect = 0xCA0; // ParticleIndex_t
            }
            // Parent: CCitadelBaseShivAbility
            // Field count: 1
            namespace CCitadel_Ability_ShivDagger {
                constexpr std::ptrdiff_t m_bIsInRicochet = 0xB00; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Puddle {
            }
            // Parent: CitadelAbilityVData
            // Field count: 24
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Bull_LeapVData {
                constexpr std::ptrdiff_t m_CrashSpeedScaleCurve = 0x1560; // CPiecewiseCurve
                constexpr std::ptrdiff_t m_BoostModifier = 0x15A0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CrashModifier = 0x15B0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImmunityModifier = 0x15C0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_LandingBonusesModifier = 0x15D0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TakeOffParticle = 0x15E0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x16C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AoEPreviewParticle = 0x17A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_nHoverParticle = 0x1880; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strCrashingSound = 0x1960; // CSoundEventName
                constexpr std::ptrdiff_t m_strImpactSound = 0x1970; // CSoundEventName
                constexpr std::ptrdiff_t m_flStartupTime = 0x1980; // float32
                constexpr std::ptrdiff_t m_flForwardBoostSpeed = 0x1984; // float32
                constexpr std::ptrdiff_t m_flUpBoostSpeed = 0x1988; // float32
                constexpr std::ptrdiff_t m_flBoostTurnRate = 0x198C; // float32
                constexpr std::ptrdiff_t m_flHoverTime = 0x1990; // float32
                constexpr std::ptrdiff_t m_flMinAimAngle = 0x1994; // float32
                constexpr std::ptrdiff_t m_flBoostGain = 0x1998; // float32
                constexpr std::ptrdiff_t m_flBoostTime = 0x199C; // float32
                constexpr std::ptrdiff_t m_flLandingTime = 0x19A0; // float32
                constexpr std::ptrdiff_t m_flCrashSpeed = 0x19A4; // float32
                constexpr std::ptrdiff_t m_flHoverInputSpeedMax = 0x19A8; // float32
                constexpr std::ptrdiff_t m_flHoverInputAcceleration = 0x19AC; // float32
                constexpr std::ptrdiff_t m_flHoverSpeedDecay = 0x19B0; // float32
            }
            // Parent: CNPC_SimpleAnimatingAI
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_flAimPitch (float)
            // NetworkVarNames: m_flAttackRange (float)
            namespace CNPC_FieldSentry {
                constexpr std::ptrdiff_t m_flAimPitch = 0xBEC; // float32
                constexpr std::ptrdiff_t m_flNextAttackTime = 0xBF0; // GameTime_t
                constexpr std::ptrdiff_t m_flAttackCone = 0xBF4; // float32
                constexpr std::ptrdiff_t m_flAttackDelay = 0xBF8; // float32
                constexpr std::ptrdiff_t m_flLastAlertSound = 0xBFC; // GameTime_t
                constexpr std::ptrdiff_t m_flTrackingSpeed = 0xC00; // float32
                constexpr std::ptrdiff_t m_flDeployTime = 0xC04; // float32
                constexpr std::ptrdiff_t m_bHadEnemy = 0xC12; // bool
                constexpr std::ptrdiff_t m_bLockedOn = 0xC13; // bool
                constexpr std::ptrdiff_t m_flAttackRange = 0xC24; // float32
            }
            // Parent: CPointEntity
            // Field count: 1
            namespace CNavSpaceInfo {
                constexpr std::ptrdiff_t m_bCreateFlightSpace = 0x4E8; // bool
            }
            // Parent: CLogicalEntity
            // Field count: 3
            namespace CLogicAchievement {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_iszAchievementEventID = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnFired = 0x4F8; // CEntityIOOutput
            }
            // Parent: CBaseEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_CPathQueryComponent (CPathQueryComponent::Storage_t)
            // NetworkVarNames: m_pathString (CUtlString)
            namespace CPathSimple {
                constexpr std::ptrdiff_t m_CPathQueryComponent = 0x4F0; // CPathQueryComponent
                constexpr std::ptrdiff_t m_pathString = 0x5A0; // CUtlString
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_MageWalkVData {
                constexpr std::ptrdiff_t m_BubbleModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_TurretModifier = 0x1570; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_strCastEffect = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_bIsVisibleOnMinimap (bool)
            // NetworkVarNames: m_flStoppedMovingStartTime (GameTime_t)
            namespace CAbility_Fathom_LurkersAmbush {
                constexpr std::ptrdiff_t m_hRegenModifier = 0xC88; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_hInvisModifier = 0xCA0; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_bIsVisibleOnMinimap = 0xCB8; // bool
                constexpr std::ptrdiff_t m_flStoppedMovingStartTime = 0xCBC; // GameTime_t
                constexpr std::ptrdiff_t m_vLastPos = 0xCC0; // Vector
                constexpr std::ptrdiff_t m_flImmobilizeDuration = 0xCCC; // float32
                constexpr std::ptrdiff_t m_flChannelTimeStarted = 0xCD0; // GameTime_t
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 2
            namespace CCitadel_Modifier_UltCombo_Target {
                constexpr std::ptrdiff_t m_angles = 0xC8; // QAngle
                constexpr std::ptrdiff_t m_pAttachmentModifier = 0xD8; // CCitadelModifier*
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_WreckingBall_AutoThrow {
            }
            // Parent: CCitadelModifier
            // Field count: 8
            namespace CCitadel_Modifier_Bebop_LaserBeam {
                constexpr std::ptrdiff_t m_flSoundStartTime = 0x330; // GameTime_t
                constexpr std::ptrdiff_t m_vStart = 0x338; // Vector
                constexpr std::ptrdiff_t m_vEnd = 0x344; // Vector
                constexpr std::ptrdiff_t m_vPrevEnd = 0x350; // Vector
                constexpr std::ptrdiff_t m_flAngleBetweenTrace = 0x35C; // float32
                constexpr std::ptrdiff_t m_flDamagePerTick = 0x360; // float32
                constexpr std::ptrdiff_t m_flNextDamageTick = 0x364; // GameTime_t
                constexpr std::ptrdiff_t m_nTotalDamage = 0x368; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Astro_Rifle_SelfVData {
                constexpr std::ptrdiff_t m_WeaponFxParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Kelvin_Frozen {
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Chrono_KineticCarbineVData {
                constexpr std::ptrdiff_t m_flShotTimeScaleLingerDuration = 0x1560; // float32
                constexpr std::ptrdiff_t m_ChargingModifier = 0x1568; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1578; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_cameraKineticCarbineShotFired = 0x1588; // CitadelCameraOperationsSequence_t
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_DivinersKevlar_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PrecastSpiritBuffModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CEntityComponent
            // Field count: 0
            namespace CTouchExpansionComponent {
            }
            // Parent: CBaseAnimGraph
            // Field count: 8
            namespace CItem {
                constexpr std::ptrdiff_t m_OnPlayerTouch = 0xA50; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPlayerPickup = 0xA78; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bActivateWhenAtRest = 0xAA0; // bool
                constexpr std::ptrdiff_t m_OnCacheInteraction = 0xAA8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnGlovePulled = 0xAD0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_vOriginalSpawnOrigin = 0xAF8; // Vector
                constexpr std::ptrdiff_t m_vOriginalSpawnAngles = 0xB04; // QAngle
                constexpr std::ptrdiff_t m_bPhysStartAsleep = 0xB10; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_bFlying (bool)
            // NetworkVarNames: m_bSummoning (bool)
            namespace CCitadel_Upgrade_MagicCarpet {
                constexpr std::ptrdiff_t m_flFlyingStartTime = 0xB20; // GameTime_t
                constexpr std::ptrdiff_t m_bFlying = 0xBD0; // bool
                constexpr std::ptrdiff_t m_bSummoning = 0xBD1; // bool
            }
            // Parent: CBaseModelEntity
            // Field count: 14
            //
            // Metadata:
            // NetworkVarNames: m_bEnabled (bool)
            // NetworkVarNames: m_DialogXMLName (string_t)
            // NetworkVarNames: m_PanelClassName (string_t)
            // NetworkVarNames: m_PanelID (string_t)
            namespace CBaseClientUIEntity {
                constexpr std::ptrdiff_t m_bEnabled = 0x7C0; // bool
                constexpr std::ptrdiff_t m_DialogXMLName = 0x7C8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_PanelClassName = 0x7D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_PanelID = 0x7D8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_CustomOutput0 = 0x7E0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput1 = 0x808; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput2 = 0x830; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput3 = 0x858; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput4 = 0x880; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput5 = 0x8A8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput6 = 0x8D0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput7 = 0x8F8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput8 = 0x920; // CEntityIOOutput
                constexpr std::ptrdiff_t m_CustomOutput9 = 0x948; // CEntityIOOutput
            }
            // Parent: CBaseModelEntity
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_hDecalMaterial (HMaterialStrong)
            // NetworkVarNames: m_flWidth (float)
            // NetworkVarNames: m_flHeight (float)
            // NetworkVarNames: m_flDepth (float)
            // NetworkVarNames: m_nRenderOrder (uint32)
            // NetworkVarNames: m_bProjectOnWorld (bool)
            // NetworkVarNames: m_bProjectOnCharacters (bool)
            // NetworkVarNames: m_bProjectOnWater (bool)
            // NetworkVarNames: m_flDepthSortBias (float)
            namespace CEnvDecal {
                constexpr std::ptrdiff_t m_hDecalMaterial = 0x7C0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_flWidth = 0x7C8; // float32
                constexpr std::ptrdiff_t m_flHeight = 0x7CC; // float32
                constexpr std::ptrdiff_t m_flDepth = 0x7D0; // float32
                constexpr std::ptrdiff_t m_nRenderOrder = 0x7D4; // uint32
                constexpr std::ptrdiff_t m_bProjectOnWorld = 0x7D8; // bool
                constexpr std::ptrdiff_t m_bProjectOnCharacters = 0x7D9; // bool
                constexpr std::ptrdiff_t m_bProjectOnWater = 0x7DA; // bool
                constexpr std::ptrdiff_t m_flDepthSortBias = 0x7DC; // float32
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 3
            namespace CInfoTeamSpawn {
                constexpr std::ptrdiff_t m_bIntroSpawn = 0x4E8; // bool
                constexpr std::ptrdiff_t m_iLaneNum = 0x4EC; // int32
                constexpr std::ptrdiff_t m_hAssignedPlayer = 0x4F0; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Shakedown_Target {
                constexpr std::ptrdiff_t m_hShadowdownAbility = 0xB00; // CHandle<CCitadel_Ability_Yakuza_Shakedown>
                constexpr std::ptrdiff_t m_AimPos = 0xB04; // Vector
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Bounce_PadVData {
                constexpr std::ptrdiff_t m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_IdleParticle = 0x108; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BounceParticle = 0x1E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DestroyParticle = 0x2C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strCasterBounceSound = 0x3A8; // CSoundEventName
                constexpr std::ptrdiff_t m_strOtherHeroBounceSound = 0x3B8; // CSoundEventName
                constexpr std::ptrdiff_t m_strBarrelBounceSound = 0x3C8; // CSoundEventName
                constexpr std::ptrdiff_t m_strExpiredSound = 0x3D8; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_SmokeBombVData {
                constexpr std::ptrdiff_t m_InvisModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PurgeParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 12
            namespace CCitadel_Modifier_BurstFire_Actuator {
                constexpr std::ptrdiff_t m_bLastShotInFlight = 0xC0; // bool
                constexpr std::ptrdiff_t m_bBonusTracked = 0xC1; // bool
                constexpr std::ptrdiff_t m_nHitCounter = 0xC4; // int32
                constexpr std::ptrdiff_t m_nTotalBurstFireShots = 0xC8; // int32
                constexpr std::ptrdiff_t m_nInitialzedClipSize = 0xCC; // int32
                constexpr std::ptrdiff_t m_nBonusPitch = 0xD0; // int32
                constexpr std::ptrdiff_t m_bInitialized = 0xD4; // bool
                constexpr std::ptrdiff_t m_nIncreasedBurstShotCount = 0xD8; // int32
                constexpr std::ptrdiff_t m_flIntraBurstCycleTime = 0xDC; // float32
                constexpr std::ptrdiff_t m_flCycleTimePct = 0xE0; // float32
                constexpr std::ptrdiff_t m_flMaxCycleTimeOverride = 0xE4; // float32
                constexpr std::ptrdiff_t m_flMaxBurstFireCooldownOverride = 0xE8; // float32
            }
            // Parent: CCitadel_Modifier_StatStealBaseVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Siphon_Bullets_WatcherVData {
                constexpr std::ptrdiff_t m_HealModifier = 0x628; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Upgrade_Magic_Storm {
            }
            // Parent: CPlayer_MovementServices
            // Field count: 2
            namespace CCitadelObserver_MovementServices {
                constexpr std::ptrdiff_t m_flRoamingSpeed = 0x1D8; // float32
                constexpr std::ptrdiff_t m_bHasFreeCursor = 0x1DC; // bool
            }
            // Parent: CBodyComponentSkeletonInstance
            // Field count: 0
            namespace CBodyComponentBaseModelEntity {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_UnrestrictedMotorMovement {
            }
            // Parent: CBaseEntity
            // Field count: 11
            namespace CLogicAuto {
                constexpr std::ptrdiff_t m_OnMapSpawn = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnDemoMapSpawn = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnNewGame = 0x538; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLoadGame = 0x560; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMapTransition = 0x588; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnBackgroundMap = 0x5B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMultiNewMap = 0x5D8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMultiNewRound = 0x600; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVREnabled = 0x628; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVRNotEnabled = 0x650; // CEntityIOOutput
                constexpr std::ptrdiff_t m_globalstate = 0x678; // CUtlSymbolLarge
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Trapper_FearVData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_IceDome_AuraModifierBase {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_TechCleave {
                constexpr std::ptrdiff_t m_vDamageTakenEvents = 0xC0; // CUtlVector<CCitadel_Modifier_TechCleave::DamageTaken_t>
            }
            // Parent: None
            // Field count: 75
            //
            // Metadata:
            // MGetKV3ClassDefaults
            // MVDataAssociatedFile
            // MVDataOverlayType
            namespace CitadelHeroData_t {
                constexpr std::ptrdiff_t m_vecAnimGraphDefaultValueOverrides = 0x8; // CUtlVector<HeroAnimGraphDefaultValueOverride_t>
                constexpr std::ptrdiff_t m_HeroID = 0x28; // HeroID_t
                constexpr std::ptrdiff_t m_hDamageTakenParticle = 0x30; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_hGroundDamageTakenParticle = 0x110; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_hDeathParticle = 0x1F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_hLowHealthParticle = 0x2D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strSelectionImage = 0x3B0; // CPanoramaImageName
                constexpr std::ptrdiff_t m_strIconImageSmall = 0x3C0; // CPanoramaImageName
                constexpr std::ptrdiff_t m_strIconHeroCard = 0x3D0; // CPanoramaImageName
                constexpr std::ptrdiff_t m_strMinimapImage = 0x3E0; // CPanoramaImageName
                constexpr std::ptrdiff_t m_strTopBarImage = 0x3F0; // CPanoramaImageName
                constexpr std::ptrdiff_t m_strTopBarVertical = 0x400; // CPanoramaImageName
                constexpr std::ptrdiff_t m_hRespawnParticle = 0x410; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_colorUI = 0x4F0; // Color
                constexpr std::ptrdiff_t m_colorGlowFriendly = 0x4F4; // Color
                constexpr std::ptrdiff_t m_colorGlowEnemy = 0x4F8; // Color
                constexpr std::ptrdiff_t m_colorGlowTeam1 = 0x4FC; // Color
                constexpr std::ptrdiff_t m_colorGlowTeam2 = 0x500; // Color
                constexpr std::ptrdiff_t m_strModelName = 0x508; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_nModelSkin = 0x5E8; // int32
                constexpr std::ptrdiff_t m_strWIPModelName = 0x5F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_strMainOnlyModelName = 0x6D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_sAG2VariationName = 0x7B0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCNmGraphVariation>>
                constexpr std::ptrdiff_t m_strUIPortraitMap = 0x890; // CUtlString
                constexpr std::ptrdiff_t m_strUIShoppingMap = 0x898; // CUtlString
                constexpr std::ptrdiff_t m_heroStatsUI = 0x8A0; // HeroStatsUI_t
                constexpr std::ptrdiff_t m_heroStatsDisplay = 0x8D0; // HeroStatsDisplay_t
                constexpr std::ptrdiff_t m_ShopStatDisplay = 0x960; // CitadelStatsDisplay_t
                constexpr std::ptrdiff_t m_strDeathSound = 0xA08; // CSoundEventName
                constexpr std::ptrdiff_t m_strLastHitSound = 0xA18; // CSoundEventName
                constexpr std::ptrdiff_t m_strRosterSelectedSound = 0xA28; // CSoundEventName
                constexpr std::ptrdiff_t m_strRosterRemovedSound = 0xA38; // CSoundEventName
                constexpr std::ptrdiff_t m_strFootstepSoundEventDefault = 0xA48; // CSoundEventName
                constexpr std::ptrdiff_t m_strLowHealthSound = 0xA58; // CSoundEventName
                constexpr std::ptrdiff_t m_strHeroSpecificLowHealthSound = 0xA68; // CSoundEventName
                constexpr std::ptrdiff_t m_strMovementLoop = 0xA78; // CSoundEventName
                constexpr std::ptrdiff_t m_hFootstepSounds = 0xA88; // CFootstepTableHandle
                constexpr std::ptrdiff_t m_hGameSoundEventScript = 0xA90; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCVSoundEventScriptList>>
                constexpr std::ptrdiff_t m_hGeneratedVOEventScript = 0xB70; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCVSoundEventScriptList>>
                constexpr std::ptrdiff_t m_flFootstepSoundTravelDistanceMeters = 0xC50; // float32
                constexpr std::ptrdiff_t m_flStealthSpeedMetersPerSecond = 0xC54; // float32
                constexpr std::ptrdiff_t m_flStepSoundTime = 0xC58; // float32
                constexpr std::ptrdiff_t m_flStepSoundTimeSprinting = 0xC5C; // float32
                constexpr std::ptrdiff_t m_flCollisionRadius = 0xC60; // float32
                constexpr std::ptrdiff_t m_flCollisionHeight = 0xC64; // float32
                constexpr std::ptrdiff_t m_flStepHeight = 0xC68; // float32
                constexpr std::ptrdiff_t m_bInDevelopment = 0xC6C; // bool
                constexpr std::ptrdiff_t m_bAssignedPlayersOnly = 0xC6D; // bool
                constexpr std::ptrdiff_t m_bBotSelectable = 0xC6E; // bool
                constexpr std::ptrdiff_t m_bNewPlayerRecommended = 0xC6F; // bool
                constexpr std::ptrdiff_t m_bLaneTestingRecommended = 0xC70; // bool
                constexpr std::ptrdiff_t m_bNeedsTesting = 0xC71; // bool
                constexpr std::ptrdiff_t m_bLimitedTesting = 0xC72; // bool
                constexpr std::ptrdiff_t m_bDisabled = 0xC73; // bool
                constexpr std::ptrdiff_t m_bPlayerSelectable = 0xC74; // bool
                constexpr std::ptrdiff_t m_bAvailableInHeroLabs = 0xC75; // bool
                constexpr std::ptrdiff_t m_nComplexity = 0xC78; // int32
                constexpr std::ptrdiff_t m_nReadability = 0xC7C; // int32
                constexpr std::ptrdiff_t m_flMinLowHealthPercentage = 0xC80; // float32
                constexpr std::ptrdiff_t m_flMaxLowHealthPercentage = 0xC84; // float32
                constexpr std::ptrdiff_t m_flMinMidHealthPercentage = 0xC88; // float32
                constexpr std::ptrdiff_t m_flMaxMidHealthPercentage = 0xC8C; // float32
                constexpr std::ptrdiff_t m_flMinHealthForThreshold = 0xC90; // float32
                constexpr std::ptrdiff_t m_flMaxHealthForThreshold = 0xC94; // float32
                constexpr std::ptrdiff_t m_mapStartingStats = 0xC98; // CUtlOrderedMap<EStatsType,float32>
                constexpr std::ptrdiff_t m_mapScalingStats = 0xCC0; // CUtlOrderedMap<EStatsType,HeroScalingStat_t>
                constexpr std::ptrdiff_t m_mapBoundAbilities = 0xD00; // CUtlOrderedMap<EAbilitySlots_t,CSubclassName<4>>
                constexpr std::ptrdiff_t m_mapWIPAbilities = 0xD28; // CUtlOrderedMap<EAbilitySlots_t,CSubclassName<4>>
                constexpr std::ptrdiff_t m_mapItemSlotInfo = 0xD50; // CUtlOrderedMap<EItemSlotTypes_t,ItemSlotInfo_t>
                constexpr std::ptrdiff_t m_RecommendedUpgrades = 0xD78; // CUtlVector<CSubclassName<4>>
                constexpr std::ptrdiff_t m_RecommendedAbilityOrder = 0xE00; // CUtlVector<CSubclassName<4>>
                constexpr std::ptrdiff_t m_eAbilityResourceType = 0xE30; // EAbilityResourceType
                constexpr std::ptrdiff_t m_mapStandardLevelUpUpgrades = 0xE50; // CUtlOrderedMap<EModifierValue,float32>
                constexpr std::ptrdiff_t m_mapLevelInfo = 0xE78; // CUtlOrderedMap<int32,HeroLevel_t>
                constexpr std::ptrdiff_t m_mapPurchaseBonuses = 0xEA0; // CUtlOrderedMap<EItemSlotTypes_t,CUtlVector<HeroPurchaseBonus_t>>
            }
            // Parent: CAI_Component
            // Field count: 25
            namespace CAI_Motor {
                constexpr std::ptrdiff_t m_flMoveInterval = 0x50; // float32
                constexpr std::ptrdiff_t m_vIdealEntityFacing = 0x54; // Vector
                constexpr std::ptrdiff_t m_flYawSpeed = 0x60; // float32
                constexpr std::ptrdiff_t m_vMoveVel = 0x64; // Vector
                constexpr std::ptrdiff_t m_vMoveVelNavigation = 0x70; // Vector
                constexpr std::ptrdiff_t m_vecAngularVelocity = 0x7C; // Vector
                constexpr std::ptrdiff_t m_timerFloorPointCached = 0x88; // CSimpleSimTimer
                constexpr std::ptrdiff_t m_vFloorPointCached = 0x90; // Vector
                constexpr std::ptrdiff_t m_bFloorPointCachingEnabled = 0x9C; // bool
                constexpr std::ptrdiff_t m_flSpeed = 0xC4; // float32
                constexpr std::ptrdiff_t m_bMovementActive = 0xC8; // bool
                constexpr std::ptrdiff_t m_bEmbeddedRecoveryEnabled = 0xC9; // bool
                constexpr std::ptrdiff_t m_pEnableForceFacing = 0xCA; // bool[2]
                constexpr std::ptrdiff_t m_nEntityFacingLockCount = 0xCC; // uint8
                constexpr std::ptrdiff_t m_vecChoreoEntityFacings = 0xD0; // CUtlVector<ChoreoEntityFacing_t>
                constexpr std::ptrdiff_t m_vBoundaryDistCachedPos = 0xE8; // Vector
                constexpr std::ptrdiff_t m_flBoundaryDistCached = 0xF4; // float32
                constexpr std::ptrdiff_t m_motorNavLink = 0xF8; // CAI_MotorNavLink
                constexpr std::ptrdiff_t m_motorTransition = 0x170; // CAI_MotorTransition
                constexpr std::ptrdiff_t m_motorGroundAnimgraph = 0x1D0; // CAI_MotorGroundAnimGraph
                constexpr std::ptrdiff_t m_bIsExecutingMoveSolve = 0x400; // bool
                constexpr std::ptrdiff_t m_pEntityFacingRequests = 0x404; // CAI_InterestTarget[5]
                constexpr std::ptrdiff_t m_eScheduleFacingRequestPriority = 0x508; // AI_ScheduleFacingTargetPriority_t
                constexpr std::ptrdiff_t m_movementFacingModeRequests = 0x509; // AI_Motor_MovementFacingMode_t[4]
                constexpr std::ptrdiff_t m_eDefaultFacing = 0x50D; // AI_Motor_DefaultFacing_t
            }
            // Parent: CBaseEntity
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_iszStackName (string_t)
            // NetworkVarNames: m_iszOperatorName (string_t)
            // NetworkVarNames: m_iszOpvarName (string_t)
            // NetworkVarNames: m_iOpvarIndex (int)
            // NetworkVarNames: m_bUseAutoCompare (bool)
            namespace CSoundOpvarSetPointBase {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_hSource = 0x4EC; // CEntityHandle
                constexpr std::ptrdiff_t m_iszSourceEntityName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vLastPosition = 0x550; // Vector
                constexpr std::ptrdiff_t m_iszStackName = 0x560; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOperatorName = 0x568; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOpvarName = 0x570; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iOpvarIndex = 0x578; // int32
                constexpr std::ptrdiff_t m_bUseAutoCompare = 0x57C; // bool
            }
            // Parent: CAI_CitadelNPC
            // Field count: 0
            namespace CNPC_PestilenceDrone {
            }
            // Parent: CLightEntity
            // Field count: 0
            namespace CLightDirectionalEntity {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVacuumAuraVData {
                constexpr std::ptrdiff_t m_FinishParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AlliedParticle = 0x728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyParticle = 0x808; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAmbientLoopingLocalPlayerSound = 0x8E8; // CSoundEventName
            }
            // Parent: CLogicNPCCounterAABB
            // Field count: 0
            namespace CLogicNPCCounterOBB {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_hActiveProjectile (CHandle<CCitadelProjectile>)
            namespace CAbility_Mirage_Tornado {
                constexpr std::ptrdiff_t m_vLastValidMovementPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_hActiveProjectile = 0xB0C; // CHandle<CCitadelProjectile>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierRiotProtocolEnemyDebuffVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityVandalOverflowVData {
                constexpr std::ptrdiff_t m_LiftModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TargetParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetCastSound = 0x1650; // CSoundEventName
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Wrecker_UltimateThrowEnemyVData {
                constexpr std::ptrdiff_t m_EnemyHeroStasisEffect = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyHeroGrabEffect = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ExplosiveBulletsVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x738; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x818; // CSoundEventName
            }
            // Parent: CFuncPlatRot
            // Field count: 9
            namespace CFuncTrackChange {
                constexpr std::ptrdiff_t m_trackTop = 0x888; // CPathTrack*
                constexpr std::ptrdiff_t m_trackBottom = 0x890; // CPathTrack*
                constexpr std::ptrdiff_t m_train = 0x898; // CFuncTrackTrain*
                constexpr std::ptrdiff_t m_trackTopName = 0x8A0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_trackBottomName = 0x8A8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_trainName = 0x8B0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_code = 0x8B8; // TRAIN_CODE
                constexpr std::ptrdiff_t m_targetState = 0x8BC; // int32
                constexpr std::ptrdiff_t m_use = 0x8C0; // int32
            }
            // Parent: CRuleBrushEntity
            // Field count: 4
            namespace CGamePlayerZone {
                constexpr std::ptrdiff_t m_OnPlayerInZone = 0x7C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPlayerOutZone = 0x7F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_PlayersInCount = 0x818; // CEntityOutputTemplate<int32>
                constexpr std::ptrdiff_t m_PlayersOutCount = 0x840; // CEntityOutputTemplate<int32>
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_Refresher {
            }
            // Parent: CRuleEntity
            // Field count: 1
            namespace CRulePointEntity {
                constexpr std::ptrdiff_t m_Score = 0x7C8; // int32
            }
            // Parent: CPointEntity
            // Field count: 5
            namespace CMessageEntity {
                constexpr std::ptrdiff_t m_radius = 0x4E8; // int32
                constexpr std::ptrdiff_t m_messageText = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_drawText = 0x4F8; // bool
                constexpr std::ptrdiff_t m_bDeveloperOnly = 0x4F9; // bool
                constexpr std::ptrdiff_t m_bEnabled = 0x4FA; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_KnockbackAura {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelItemPickupRejuvVData {
                constexpr std::ptrdiff_t m_AbilityProjectile = 0x28; // CSubclassName<4>
                constexpr std::ptrdiff_t m_RejuvModifier = 0x38; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PunchPickupModifier = 0x48; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_IsFrozenParticle = 0x58; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBaseEntity
            // Field count: 3
            namespace CLogicAutoCitadel {
                constexpr std::ptrdiff_t m_OnWaitingForPlayersToJoin = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPreGameWait = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnGameInProgress = 0x538; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CInfoHeroTestingPoint {
                constexpr std::ptrdiff_t m_ePointType = 0x4E8; // int32
                constexpr std::ptrdiff_t m_sMoveTarget = 0x4F0; // CUtlSymbolLarge
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CCitadelDevTrigger {
                constexpr std::ptrdiff_t m_eDevTriggerType = 0x990; // DevTriggerType_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BullCharging {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_LightningBall {
                constexpr std::ptrdiff_t m_flInitialSpeed = 0xB00; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Passive_CloakVData {
                constexpr std::ptrdiff_t m_InvisModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_UIHudMessage {
                constexpr std::ptrdiff_t m_eModifierValue = 0xC0; // int32
                constexpr std::ptrdiff_t m_flValue = 0xC4; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_InShopTunnel {
            }
            // Parent: CPlayerPawnComponent
            // Field count: 0
            namespace CPlayer_FlashlightServices {
            }
            // Parent: CCitadelItemPickupRejuv
            // Field count: 0
            namespace CCitadelItemPickupRejuvHeroTest {
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            //
            // Metadata:
            // MNetworkIncludeByName
            // NetworkVarNames: m_iLane (int)
            namespace CAssignedLaneParticle {
                constexpr std::ptrdiff_t m_iLane = 0x7C0; // int32
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CServerOnlyModelEntity {
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_IcePath {
                constexpr std::ptrdiff_t m_iShardCount = 0x2F0; // int32
                constexpr std::ptrdiff_t m_vLastShardPosition = 0x2F4; // Vector
                constexpr std::ptrdiff_t m_hSurfShard = 0x300; // CHandle<CBaseModelEntity>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_ChronoSwap {
                constexpr std::ptrdiff_t m_bHitTarget = 0xB00; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCardTossVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SummonedCard = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strCardTossSound = 0x1720; // CSoundEventName
                constexpr std::ptrdiff_t m_strCardSummonSound = 0x1730; // CSoundEventName
                constexpr std::ptrdiff_t m_flSummonedCardStartSideOffset = 0x1740; // float32
                constexpr std::ptrdiff_t m_flSummonedCardSideOffsetStep = 0x1744; // float32
                constexpr std::ptrdiff_t m_flSummonedCardForwardOffset = 0x1748; // float32
                constexpr std::ptrdiff_t m_flSummonedCardVerticalOffset = 0x174C; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_TriggerTower {
            }
            // Parent: CBaseEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flScale (float32)
            // NetworkVarNames: m_flStartScale (float32)
            // NetworkVarNames: m_flScaleTime (float32)
            // NetworkVarNames: m_nFlags (uint32)
            namespace CBaseFire {
                constexpr std::ptrdiff_t m_flScale = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flStartScale = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flScaleTime = 0x4F0; // float32
                constexpr std::ptrdiff_t m_nFlags = 0x4F4; // uint32
            }
            // Parent: CBaseCombatCharacter
            // Field count: 0
            namespace CCitadel_PointTalker_Base {
            }
            // Parent: CBaseCombatCharacter
            // Field count: 88
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_NPCState (NPC_STATE)
            // NetworkVarNames: m_bFadeCorpse (bool)
            // NetworkVarNames: m_bImportantRagdoll (bool)
            namespace CAI_BaseNPC {
                constexpr std::ptrdiff_t m_bCheckContacts = 0xB70; // bool
                constexpr std::ptrdiff_t m_bIsUsingSmallHull = 0xB71; // bool
                constexpr std::ptrdiff_t m_bForceDynamicHull = 0xB72; // bool
                constexpr std::ptrdiff_t m_vecLastPosition = 0xB74; // Vector
                constexpr std::ptrdiff_t m_flLastPositionTolerance = 0xB80; // float32
                constexpr std::ptrdiff_t m_hSynchronizedPrimaryNPC = 0xB84; // CHandle<CAI_BaseNPC>
                constexpr std::ptrdiff_t m_vecSynchronizedSecondaryNPCs = 0xB88; // CUtlVector<CHandle<CAI_BaseNPC>>
                constexpr std::ptrdiff_t m_NPCState = 0xBA0; // NPC_STATE
                constexpr std::ptrdiff_t m_nPreModifierNPCState = 0xBA4; // NPC_STATE
                constexpr std::ptrdiff_t m_IdealNPCState = 0xBA8; // NPC_STATE
                constexpr std::ptrdiff_t m_flLastStateChangeTime = 0xBAC; // GameTime_t
                constexpr std::ptrdiff_t m_Conditions = 0xBB8; // CAI_ScheduleBits
                constexpr std::ptrdiff_t m_NonGatherConditions = 0xBDC; // CAI_ScheduleBits
                constexpr std::ptrdiff_t m_CustomInterruptConditions = 0xC00; // CAI_ScheduleBits
                constexpr std::ptrdiff_t m_bForceConditionsGather = 0xC24; // bool
                constexpr std::ptrdiff_t m_bConditionsGathered = 0xC25; // bool
                constexpr std::ptrdiff_t m_bDoPostRestoreRefindPath = 0xC26; // bool
                constexpr std::ptrdiff_t m_pBehaviorHost = 0xC28; // CAI_BehaviorHost*
                constexpr std::ptrdiff_t m_flBlinkTime = 0xC38; // GameTime_t
                constexpr std::ptrdiff_t m_pEnemyServices = 0xC40; // CAI_EnemyServices*
                constexpr std::ptrdiff_t m_GiveUpOnDeadEnemyTimer = 0xC48; // CRandStopwatch
                constexpr std::ptrdiff_t m_FailChooseEnemyTimer = 0xC5C; // CSimpleSimTimer
                constexpr std::ptrdiff_t m_flAcceptableTimeSeenEnemy = 0xC64; // GameTime_t
                constexpr std::ptrdiff_t m_bSkippedChooseEnemy = 0xC68; // bool
                constexpr std::ptrdiff_t m_bIgnoreUnseenEnemies = 0xC69; // bool
                constexpr std::ptrdiff_t m_hEnemyFilter = 0xC6C; // CHandle<CBaseFilter>
                constexpr std::ptrdiff_t m_iszEnemyFilterName = 0xC70; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hTargetEnt = 0xC78; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bClearTargetOnScheduleEnd = 0xC7C; // bool
                constexpr std::ptrdiff_t m_flSoundWaitTime = 0xC80; // GameTime_t
                constexpr std::ptrdiff_t m_nSoundPriority = 0xC84; // int32
                constexpr std::ptrdiff_t m_bSuppressFootsteps = 0xC88; // bool
                constexpr std::ptrdiff_t m_afCapability = 0xC8C; // int32
                constexpr std::ptrdiff_t m_flGroundSpeed = 0xE00; // float32
                constexpr std::ptrdiff_t m_flMoveWaitFinished = 0xE04; // GameTime_t
                constexpr std::ptrdiff_t m_hOpeningDoor = 0xE08; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_UnreachableTargets = 0xE10; // CUnreachableTargetList
                constexpr std::ptrdiff_t m_hPathObstructor = 0xE30; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flJumpMaxRise = 0xE34; // float32
                constexpr std::ptrdiff_t m_flJumpMaxDrop = 0xE38; // float32
                constexpr std::ptrdiff_t m_flJumpMaxDist = 0xE3C; // float32
                constexpr std::ptrdiff_t m_flJumpMinDist = 0xE40; // float32
                constexpr std::ptrdiff_t m_pAnimGraphServices = 0xE48; // CAI_AnimGraphServices*
                constexpr std::ptrdiff_t m_bAnimGraphIsAnimatingDeath = 0xE50; // bool
                constexpr std::ptrdiff_t m_bDeferredNavigation = 0xE51; // bool
                constexpr std::ptrdiff_t m_Scheduler = 0xE58; // CAI_Scheduler
                constexpr std::ptrdiff_t m_pNavigatorNavmesh = 0xF00; // CAI_Navigator*
                constexpr std::ptrdiff_t m_pMotor = 0xF20; // CAI_Motor*
                constexpr std::ptrdiff_t m_flTimeLastMovement = 0xF28; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeLastFootstep = 0xF2C; // GameTime_t
                constexpr std::ptrdiff_t m_CheckOnGroundTimer = 0xF30; // CSimpleSimTimer
                constexpr std::ptrdiff_t m_strNavRestrictionVolume = 0xF38; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vDefaultEyeOffset = 0xF40; // Vector
                constexpr std::ptrdiff_t m_afMemory = 0xF4C; // int32
                constexpr std::ptrdiff_t m_flLastAttackTime = 0xF50; // GameTime_t
                constexpr std::ptrdiff_t m_flLastTookDamageTime = 0xF54; // GameTime_t
                constexpr std::ptrdiff_t m_flLastTookDamageFromPlayerTime = 0xF58; // GameTime_t
                constexpr std::ptrdiff_t m_vecLastTookDamageAttackVector = 0xF5C; // Vector
                constexpr std::ptrdiff_t m_iszSquadName = 0xF68; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vecMySquadSlots = 0xF70; // CUtlVector<SquadSlotNPCEntry_t>
                constexpr std::ptrdiff_t m_nPrevHealthDuringModifyDamage = 0xF90; // int32
                constexpr std::ptrdiff_t m_bFadeCorpse = 0xF94; // bool
                constexpr std::ptrdiff_t m_bImportantRagdoll = 0xF95; // bool
                constexpr std::ptrdiff_t m_deathBlowResult = 0xF98; // CTakeDamageResult
                constexpr std::ptrdiff_t m_bDidDeathCleanup = 0xFB8; // bool
                constexpr std::ptrdiff_t m_bReceivedEnemyDeadNotification = 0xFB9; // bool
                constexpr std::ptrdiff_t m_flWaitFinished = 0xFBC; // GameTime_t
                constexpr std::ptrdiff_t m_fNoDamageDecal = 0xFC0; // bool
                constexpr std::ptrdiff_t m_pVecAttachments = 0xFC8; // CUtlVector<CHandle<CBaseEntity>>*
                constexpr std::ptrdiff_t m_OnDamaged = 0xFD0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnDeath = 0xFF8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnQuarterHealth = 0x1020; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnHalfHealth = 0x1048; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnThreeQuarterHealth = 0x1070; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFoundEnemy = 0x1098; // CEntityOutputTemplate<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_OnLostEnemy = 0x10C0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLostPlayer = 0x10E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnDamagedByPlayer = 0x1110; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnDamagedByPlayerSquad = 0x1138; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPlayerUse = 0x1160; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUse = 0x1188; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnStartTouchMaterial = 0x11B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEndTouchMaterial = 0x11D8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLostEnemyLOS = 0x1200; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLostPlayerLOS = 0x1228; // CEntityIOOutput
                constexpr std::ptrdiff_t m_nAITraceMask = 0x1250; // uint64
                constexpr std::ptrdiff_t m_flThinkTime = 0x1258; // float32
                constexpr std::ptrdiff_t m_nDebugCurIndex = 0x1278; // int32
            }
            // Parent: CCitadelProjectile
            // Field count: 2
            namespace CProjectile_Mirage_Tornado {
                constexpr std::ptrdiff_t m_cTicksNoMovement = 0x870; // int32
                constexpr std::ptrdiff_t m_TornadoAbility = 0x874; // CHandle<CAbility_Mirage_Tornado>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_NeutralAgro {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_Tornado_Aura_Apply {
            }
            // Parent: CCitadel_Modifier_Base
            // Field count: 0
            namespace CModifier_Synth_Blitz_TechAmp {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierFlyingStrikeTargetVData {
                constexpr std::ptrdiff_t m_GrappleRopeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 15
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Nano_PredatoryStatueVData {
                constexpr std::ptrdiff_t m_AOEParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnabledParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DrainParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strEnabledSound = 0x8A8; // CSoundEventName
                constexpr std::ptrdiff_t m_strEnabledLoopSound = 0x8B8; // CSoundEventName
                constexpr std::ptrdiff_t m_strDisabledSound = 0x8C8; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserHitSound = 0x8D8; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserStartSound = 0x8E8; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserLoopSound = 0x8F8; // CSoundEventName
                constexpr std::ptrdiff_t m_TargetModifier = 0x908; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_RevealModifier = 0x918; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_StatueInvis = 0x928; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flNewTargetAttackTime = 0x938; // float32
                constexpr std::ptrdiff_t m_flMinRevealTime = 0x93C; // float32
                constexpr std::ptrdiff_t m_flMinDebuffTime = 0x940; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_SleepBomb {
                constexpr std::ptrdiff_t m_flGoalHeight = 0xC0; // float32
                constexpr std::ptrdiff_t m_flFallRate = 0xC4; // float32
                constexpr std::ptrdiff_t m_nBombEffect = 0xC8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_eIgnoreTarget = 0xCC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vecOrigin = 0x220; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierStackingDamageVData {
                constexpr std::ptrdiff_t m_SlowModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_BloodBomb {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierStimPakVData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_MagicShock_Proc {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_bSprinting (bool)
            // NetworkVarNames: m_flInCombatStartTime (GameTime_t)
            // NetworkVarNames: m_flInCombatEndTime (GameTime_t)
            // NetworkVarNames: m_flSprintStartTime (GameTime_t)
            namespace CCitadel_Ability_Sprint {
                constexpr std::ptrdiff_t m_nSprintParticle = 0xB00; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bSprinting = 0xB04; // bool
                constexpr std::ptrdiff_t m_flInCombatStartTime = 0xB08; // GameTime_t
                constexpr std::ptrdiff_t m_flInCombatEndTime = 0xB0C; // GameTime_t
                constexpr std::ptrdiff_t m_flSprintStartTime = 0xB10; // GameTime_t
                constexpr std::ptrdiff_t m_bInCombat = 0xB14; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_DamageResistance {
                constexpr std::ptrdiff_t m_flShieldHealth = 0xC0; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Healing_Disabled {
            }
            // Parent: CItemGeneric
            // Field count: 0
            namespace CItemFlare {
            }
            // Parent: CBaseTrigger
            // Field count: 2
            namespace CTriggerActiveWeaponDetect {
                constexpr std::ptrdiff_t m_OnTouchedActiveWeapon = 0x990; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iszWeaponClassName = 0x9B8; // CUtlSymbolLarge
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_DebuffReducer {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Empty {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CGameModifier_FireUserEntityIO {
            }
            // Parent: CPointEntity
            // Field count: 18
            namespace CEnvMicrophone {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_hMeasureTarget = 0x4EC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nSoundType = 0x4F0; // SoundTypes_t
                constexpr std::ptrdiff_t m_nSoundFlags = 0x4F2; // SoundFlags_t
                constexpr std::ptrdiff_t m_flSensitivity = 0x4F4; // float32
                constexpr std::ptrdiff_t m_flSmoothFactor = 0x4F8; // float32
                constexpr std::ptrdiff_t m_flMaxRange = 0x4FC; // float32
                constexpr std::ptrdiff_t m_iszSpeakerName = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hSpeaker = 0x508; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bAvoidFeedback = 0x50C; // bool
                constexpr std::ptrdiff_t m_iSpeakerDSPPreset = 0x510; // int32
                constexpr std::ptrdiff_t m_iszListenFilter = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hListenFilter = 0x520; // CHandle<CBaseFilter>
                constexpr std::ptrdiff_t m_SoundLevel = 0x528; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnRoutedSound = 0x550; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnHeardSound = 0x578; // CEntityIOOutput
                constexpr std::ptrdiff_t m_szLastSound = 0x5A0; // char[256]
                constexpr std::ptrdiff_t m_iLastRoutedFrame = 0x6A0; // int32
            }
            // Parent: CLogicalEntity
            // Field count: 11
            namespace CInfoSpawnGroupLoadUnload {
                constexpr std::ptrdiff_t m_OnSpawnGroupLoadStarted = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnSpawnGroupLoadFinished = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnSpawnGroupUnloadStarted = 0x538; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnSpawnGroupUnloadFinished = 0x560; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iszSpawnGroupName = 0x588; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSpawnGroupFilterName = 0x590; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszLandmarkName = 0x598; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_sFixedSpawnGroupName = 0x5A0; // CUtlString
                constexpr std::ptrdiff_t m_flTimeoutInterval = 0x5A8; // float32
                constexpr std::ptrdiff_t m_bStreamingStarted = 0x5AC; // bool
                constexpr std::ptrdiff_t m_bUnloadingStarted = 0x5AD; // bool
            }
            // Parent: CBaseEntity
            // Field count: 24
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkUserGroupProxy
            // MNetworkUserGroupProxy
            // MNetworkIncludeByUserGroup
            // NetworkVarNames: m_nTickBase (uint32)
            // NetworkVarNames: m_hPawn (CHandle<CBasePlayerPawn>)
            // NetworkVarNames: m_bKnownTeamMismatch (bool)
            // NetworkVarNames: m_iConnected (PlayerConnectedState)
            // NetworkVarNames: m_iszPlayerName (char)
            // NetworkVarNames: m_steamID (uint64)
            // NetworkVarNames: m_iDesiredFOV (uint32)
            namespace CBasePlayerController {
                constexpr std::ptrdiff_t m_nInButtonsWhichAreToggles = 0x4F0; // uint64
                constexpr std::ptrdiff_t m_nTickBase = 0x4F8; // uint32
                constexpr std::ptrdiff_t m_hPawn = 0x528; // CHandle<CBasePlayerPawn>
                constexpr std::ptrdiff_t m_bKnownTeamMismatch = 0x52C; // bool
                constexpr std::ptrdiff_t m_nSplitScreenSlot = 0x530; // CSplitScreenSlot
                constexpr std::ptrdiff_t m_hSplitOwner = 0x534; // CHandle<CBasePlayerController>
                constexpr std::ptrdiff_t m_hSplitScreenPlayers = 0x538; // CUtlVector<CHandle<CBasePlayerController>>
                constexpr std::ptrdiff_t m_bIsHLTV = 0x550; // bool
                constexpr std::ptrdiff_t m_iConnected = 0x554; // PlayerConnectedState
                constexpr std::ptrdiff_t m_iszPlayerName = 0x558; // char[128]
                constexpr std::ptrdiff_t m_szNetworkIDString = 0x5D8; // CUtlString
                constexpr std::ptrdiff_t m_fLerpTime = 0x5E0; // float32
                constexpr std::ptrdiff_t m_bLagCompensation = 0x5E4; // bool
                constexpr std::ptrdiff_t m_bPredict = 0x5E5; // bool
                constexpr std::ptrdiff_t m_bAutoKickDisabled = 0x5E6; // bool
                constexpr std::ptrdiff_t m_bIsLowViolence = 0x5E7; // bool
                constexpr std::ptrdiff_t m_bGamePaused = 0x5E8; // bool
                constexpr std::ptrdiff_t m_iIgnoreGlobalChat = 0x718; // ChatIgnoreType_t
                constexpr std::ptrdiff_t m_flLastPlayerTalkTime = 0x71C; // float32
                constexpr std::ptrdiff_t m_flLastEntitySteadyState = 0x720; // float32
                constexpr std::ptrdiff_t m_nAvailableEntitySteadyState = 0x724; // int32
                constexpr std::ptrdiff_t m_bHasAnySteadyStateEnts = 0x728; // bool
                constexpr std::ptrdiff_t m_steamID = 0x738; // uint64
                constexpr std::ptrdiff_t m_iDesiredFOV = 0x740; // uint32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_GenericPerson_3 {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HealthSwapVData {
                constexpr std::ptrdiff_t m_BloodExchangeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Muted {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Silenced {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 4
            namespace CCitadel_Modifier_TechBleed_Proc {
                constexpr std::ptrdiff_t m_bNoDeath = 0x168; // bool
                constexpr std::ptrdiff_t m_flDamage = 0x16C; // float32
                constexpr std::ptrdiff_t m_nDamageTick = 0x170; // int32
                constexpr std::ptrdiff_t m_hTarget = 0x174; // CHandle<CBaseEntity>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ApplyDebuff_ProcVData {
                constexpr std::ptrdiff_t m_bUseNonEmbedded = 0x638; // bool
                constexpr std::ptrdiff_t m_DebuffModifier = 0x640; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_NonEmbeddedModifier = 0x650; // CSubclassName<2>
            }
            // Parent: CBaseModifier
            // Field count: 0
            namespace CCitadelModifier {
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CPointTemplateAPI {
            }
            // Parent: CBaseModelEntity
            // Field count: 37
            namespace CFuncTrackTrain {
                constexpr std::ptrdiff_t m_ppath = 0x7C0; // CHandle<CPathTrack>
                constexpr std::ptrdiff_t m_length = 0x7C4; // float32
                constexpr std::ptrdiff_t m_vPosPrev = 0x7C8; // Vector
                constexpr std::ptrdiff_t m_angPrev = 0x7D4; // QAngle
                constexpr std::ptrdiff_t m_controlMins = 0x7E0; // Vector
                constexpr std::ptrdiff_t m_controlMaxs = 0x7EC; // Vector
                constexpr std::ptrdiff_t m_lastBlockPos = 0x7F8; // Vector
                constexpr std::ptrdiff_t m_lastBlockTick = 0x804; // int32
                constexpr std::ptrdiff_t m_flVolume = 0x808; // float32
                constexpr std::ptrdiff_t m_flBank = 0x80C; // float32
                constexpr std::ptrdiff_t m_oldSpeed = 0x810; // float32
                constexpr std::ptrdiff_t m_flBlockDamage = 0x814; // float32
                constexpr std::ptrdiff_t m_height = 0x818; // float32
                constexpr std::ptrdiff_t m_maxSpeed = 0x81C; // float32
                constexpr std::ptrdiff_t m_dir = 0x820; // float32
                constexpr std::ptrdiff_t m_iszSoundMove = 0x828; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSoundMovePing = 0x830; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSoundStart = 0x838; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSoundStop = 0x840; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strPathTarget = 0x848; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flMoveSoundMinDuration = 0x850; // float32
                constexpr std::ptrdiff_t m_flMoveSoundMaxDuration = 0x854; // float32
                constexpr std::ptrdiff_t m_flNextMoveSoundTime = 0x858; // GameTime_t
                constexpr std::ptrdiff_t m_flMoveSoundMinPitch = 0x85C; // float32
                constexpr std::ptrdiff_t m_flMoveSoundMaxPitch = 0x860; // float32
                constexpr std::ptrdiff_t m_eOrientationType = 0x864; // TrainOrientationType_t
                constexpr std::ptrdiff_t m_eVelocityType = 0x868; // TrainVelocityType_t
                constexpr std::ptrdiff_t m_OnStart = 0x878; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnNext = 0x8A0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnArrivedAtDestinationNode = 0x8C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bManualSpeedChanges = 0x8F0; // bool
                constexpr std::ptrdiff_t m_flDesiredSpeed = 0x8F4; // float32
                constexpr std::ptrdiff_t m_flSpeedChangeTime = 0x8F8; // GameTime_t
                constexpr std::ptrdiff_t m_flAccelSpeed = 0x8FC; // float32
                constexpr std::ptrdiff_t m_flDecelSpeed = 0x900; // float32
                constexpr std::ptrdiff_t m_bAccelToSpeed = 0x904; // bool
                constexpr std::ptrdiff_t m_flNextMPSoundTime = 0x908; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Synth_Affliction_Debuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierGangActivityAbilitySwapVData {
                constexpr std::ptrdiff_t m_SummonGangster = 0x608; // CSubclassName<4>
                constexpr std::ptrdiff_t m_TeleportToGangster = 0x618; // CSubclassName<4>
                constexpr std::ptrdiff_t m_Cancel = 0x628; // CSubclassName<4>
                constexpr std::ptrdiff_t m_ReplaceWithSummonGangster = 0x638; // CSubclassName<4>
                constexpr std::ptrdiff_t m_ReplaceWithTeleportToGangster = 0x648; // CSubclassName<4>
                constexpr std::ptrdiff_t m_ReplaceWithCancel = 0x658; // CSubclassName<4>
            }
            // Parent: CCitadelModifierVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierRestorativeGooVData {
                constexpr std::ptrdiff_t m_RestorativeGooEndParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flDistanceCameraOffsetLerpTime = 0x6E8; // float32
                constexpr std::ptrdiff_t m_flDistanceCameraOffsetBias = 0x6EC; // float32
                constexpr std::ptrdiff_t m_flDistanceCameraOffset = 0x6F0; // float32
                constexpr std::ptrdiff_t m_BreakoutProgressBarModifier = 0x6F8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PostCubeBuffModifier = 0x708; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_NonTargetLoopingSound = 0x718; // CSoundEventName
                constexpr std::ptrdiff_t m_TargetLoopingSound = 0x728; // CSoundEventName
                constexpr std::ptrdiff_t m_LightMeleeImpact = 0x738; // CSoundEventName
                constexpr std::ptrdiff_t m_HeavyMeleeImpact = 0x748; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Chrono_PulseGrenade_Debuff {
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_BeltFed_Magazine {
                constexpr std::ptrdiff_t m_bInitialized = 0xC0; // bool
                constexpr std::ptrdiff_t m_flSpinUpRateOverride = 0xC4; // float32
                constexpr std::ptrdiff_t m_flSpinUpDecayOverride = 0xC8; // float32
                constexpr std::ptrdiff_t m_flMaxCycleTimeOverride = 0xCC; // float32
                constexpr std::ptrdiff_t m_flMaxBurstFireCooldownOverride = 0xD0; // float32
            }
            // Parent: CServerOnlyModelEntity
            // Field count: 5
            namespace CFogVolume {
                constexpr std::ptrdiff_t m_fogName = 0x7C0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_postProcessName = 0x7C8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_colorCorrectionName = 0x7D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bDisabled = 0x7E0; // bool
                constexpr std::ptrdiff_t m_bInFogVolumesList = 0x7E1; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ItemWalkBack {
            }
            // Parent: CBaseModelEntity
            // Field count: 19
            namespace CFire {
                constexpr std::ptrdiff_t m_hEffect = 0x7C0; // CHandle<CBaseFire>
                constexpr std::ptrdiff_t m_hOwner = 0x7C4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nFireType = 0x7C8; // int32
                constexpr std::ptrdiff_t m_flFuel = 0x7CC; // float32
                constexpr std::ptrdiff_t m_flDamageTime = 0x7D0; // GameTime_t
                constexpr std::ptrdiff_t m_lastDamage = 0x7D4; // GameTime_t
                constexpr std::ptrdiff_t m_flFireSize = 0x7D8; // float32
                constexpr std::ptrdiff_t m_flLastNavUpdateTime = 0x7DC; // GameTime_t
                constexpr std::ptrdiff_t m_flHeatLevel = 0x7E0; // float32
                constexpr std::ptrdiff_t m_flHeatAbsorb = 0x7E4; // float32
                constexpr std::ptrdiff_t m_flDamageScale = 0x7E8; // float32
                constexpr std::ptrdiff_t m_flMaxHeat = 0x7EC; // float32
                constexpr std::ptrdiff_t m_flLastHeatLevel = 0x7F0; // float32
                constexpr std::ptrdiff_t m_flAttackTime = 0x7F4; // float32
                constexpr std::ptrdiff_t m_bEnabled = 0x7F8; // bool
                constexpr std::ptrdiff_t m_bStartDisabled = 0x7F9; // bool
                constexpr std::ptrdiff_t m_bDidActivate = 0x7FA; // bool
                constexpr std::ptrdiff_t m_OnIgnited = 0x800; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnExtinguished = 0x828; // CEntityIOOutput
            }
            // Parent: CSkeletonAnimationController
            // Field count: 14
            //
            // Metadata:
            // NetworkVarNames: m_animGraphNetworkedVars (CAnimGraphNetworkedVariables)
            // NetworkVarNames: m_hSequence (HSequence)
            // NetworkVarNames: m_flSeqStartTime (GameTime_t)
            // NetworkVarNames: m_flSeqFixedCycle (float)
            // NetworkVarNames: m_nAnimLoopMode (AnimLoopMode_t)
            namespace CBaseAnimGraphController {
                constexpr std::ptrdiff_t m_animGraphNetworkedVars = 0x18; // CAnimGraphNetworkedVariables
                constexpr std::ptrdiff_t m_bSequenceFinished = 0x220; // bool
                constexpr std::ptrdiff_t m_flSoundSyncTime = 0x224; // float32
                constexpr std::ptrdiff_t m_nActiveIKChainMask = 0x228; // uint32
                constexpr std::ptrdiff_t m_hSequence = 0x22C; // HSequence
                constexpr std::ptrdiff_t m_flSeqStartTime = 0x230; // GameTime_t
                constexpr std::ptrdiff_t m_flSeqFixedCycle = 0x234; // float32
                constexpr std::ptrdiff_t m_nAnimLoopMode = 0x238; // AnimLoopMode_t
                constexpr std::ptrdiff_t m_flPlaybackRate = 0x23C; // CNetworkedQuantizedFloat
                constexpr std::ptrdiff_t m_nNotifyState = 0x248; // SequenceFinishNotifyState_t
                constexpr std::ptrdiff_t m_bNetworkedAnimationInputsChanged = 0x24A; // bool
                constexpr std::ptrdiff_t m_bNetworkedSequenceChanged = 0x24B; // bool
                constexpr std::ptrdiff_t m_bLastUpdateSkipped = 0x24C; // bool
                constexpr std::ptrdiff_t m_flPrevAnimUpdateTime = 0x250; // GameTime_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flPostCastHoldEndTime (GameTime_t)
            namespace CCitadel_Ability_HealthSwap {
                constexpr std::ptrdiff_t m_nFXIndex = 0xB00; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flHealthToCaster = 0xB04; // float32
                constexpr std::ptrdiff_t m_flTargetHealthLost = 0xB08; // float32
                constexpr std::ptrdiff_t m_flPostCastHoldEndTime = 0xC28; // GameTime_t
            }
            // Parent: CCitadel_Modifier_ChainLightningVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Galvanic_Storm_VData {
                constexpr std::ptrdiff_t m_TechShieldModifier = 0x828; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_Push {
                constexpr std::ptrdiff_t m_vPushForce = 0xC0; // Vector
                constexpr std::ptrdiff_t m_flDecayRate = 0xCC; // float32
                constexpr std::ptrdiff_t m_TimeDestroy = 0xD0; // GameTime_t
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CNPCMakerAPI {
            }
            // Parent: CBasePlatTrain
            // Field count: 1
            namespace CFuncPlat {
                constexpr std::ptrdiff_t m_sNoise = 0x868; // CUtlSymbolLarge
            }
            // Parent: CCitadelProjectile
            // Field count: 2
            namespace CProjectile_Rolling_FireBall {
                constexpr std::ptrdiff_t m_bHitWorld = 0x870; // bool
                constexpr std::ptrdiff_t m_vInitialDirection = 0x874; // Vector
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Hero_Testing_Damage_Aura {
            }
            // Parent: CModifierVData_BaseAura
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierAuraVData {
                constexpr std::ptrdiff_t m_iAuraSearchType = 0x640; // CITADEL_UNIT_TARGET_TYPE
                constexpr std::ptrdiff_t m_iAuraSearchFlags = 0x644; // CITADEL_UNIT_TARGET_FLAGS
            }
            // Parent: CPathParticleRope
            // Field count: 1
            namespace CCitadelZiplinePath {
                constexpr std::ptrdiff_t m_iLaneNumber = 0x5D0; // int32
            }
            // Parent: CPhysConstraint
            // Field count: 48
            namespace CGenericConstraint {
                constexpr std::ptrdiff_t m_nLinearMotionX = 0x568; // JointMotion_t
                constexpr std::ptrdiff_t m_nLinearMotionY = 0x56C; // JointMotion_t
                constexpr std::ptrdiff_t m_nLinearMotionZ = 0x570; // JointMotion_t
                constexpr std::ptrdiff_t m_flLinearFrequencyX = 0x574; // float32
                constexpr std::ptrdiff_t m_flLinearFrequencyY = 0x578; // float32
                constexpr std::ptrdiff_t m_flLinearFrequencyZ = 0x57C; // float32
                constexpr std::ptrdiff_t m_flLinearDampingRatioX = 0x580; // float32
                constexpr std::ptrdiff_t m_flLinearDampingRatioY = 0x584; // float32
                constexpr std::ptrdiff_t m_flLinearDampingRatioZ = 0x588; // float32
                constexpr std::ptrdiff_t m_flMaxLinearImpulseX = 0x58C; // float32
                constexpr std::ptrdiff_t m_flMaxLinearImpulseY = 0x590; // float32
                constexpr std::ptrdiff_t m_flMaxLinearImpulseZ = 0x594; // float32
                constexpr std::ptrdiff_t m_flBreakAfterTimeX = 0x598; // float32
                constexpr std::ptrdiff_t m_flBreakAfterTimeY = 0x59C; // float32
                constexpr std::ptrdiff_t m_flBreakAfterTimeZ = 0x5A0; // float32
                constexpr std::ptrdiff_t m_flBreakAfterTimeStartTimeX = 0x5A4; // GameTime_t
                constexpr std::ptrdiff_t m_flBreakAfterTimeStartTimeY = 0x5A8; // GameTime_t
                constexpr std::ptrdiff_t m_flBreakAfterTimeStartTimeZ = 0x5AC; // GameTime_t
                constexpr std::ptrdiff_t m_flBreakAfterTimeThresholdX = 0x5B0; // float32
                constexpr std::ptrdiff_t m_flBreakAfterTimeThresholdY = 0x5B4; // float32
                constexpr std::ptrdiff_t m_flBreakAfterTimeThresholdZ = 0x5B8; // float32
                constexpr std::ptrdiff_t m_flNotifyForceX = 0x5BC; // float32
                constexpr std::ptrdiff_t m_flNotifyForceY = 0x5C0; // float32
                constexpr std::ptrdiff_t m_flNotifyForceZ = 0x5C4; // float32
                constexpr std::ptrdiff_t m_flNotifyForceMinTimeX = 0x5C8; // float32
                constexpr std::ptrdiff_t m_flNotifyForceMinTimeY = 0x5CC; // float32
                constexpr std::ptrdiff_t m_flNotifyForceMinTimeZ = 0x5D0; // float32
                constexpr std::ptrdiff_t m_flNotifyForceLastTimeX = 0x5D4; // GameTime_t
                constexpr std::ptrdiff_t m_flNotifyForceLastTimeY = 0x5D8; // GameTime_t
                constexpr std::ptrdiff_t m_flNotifyForceLastTimeZ = 0x5DC; // GameTime_t
                constexpr std::ptrdiff_t m_bAxisNotifiedX = 0x5E0; // bool
                constexpr std::ptrdiff_t m_bAxisNotifiedY = 0x5E1; // bool
                constexpr std::ptrdiff_t m_bAxisNotifiedZ = 0x5E2; // bool
                constexpr std::ptrdiff_t m_nAngularMotionX = 0x5E4; // JointMotion_t
                constexpr std::ptrdiff_t m_nAngularMotionY = 0x5E8; // JointMotion_t
                constexpr std::ptrdiff_t m_nAngularMotionZ = 0x5EC; // JointMotion_t
                constexpr std::ptrdiff_t m_flAngularFrequencyX = 0x5F0; // float32
                constexpr std::ptrdiff_t m_flAngularFrequencyY = 0x5F4; // float32
                constexpr std::ptrdiff_t m_flAngularFrequencyZ = 0x5F8; // float32
                constexpr std::ptrdiff_t m_flAngularDampingRatioX = 0x5FC; // float32
                constexpr std::ptrdiff_t m_flAngularDampingRatioY = 0x600; // float32
                constexpr std::ptrdiff_t m_flAngularDampingRatioZ = 0x604; // float32
                constexpr std::ptrdiff_t m_flMaxAngularImpulseX = 0x608; // float32
                constexpr std::ptrdiff_t m_flMaxAngularImpulseY = 0x60C; // float32
                constexpr std::ptrdiff_t m_flMaxAngularImpulseZ = 0x610; // float32
                constexpr std::ptrdiff_t m_NotifyForceReachedX = 0x618; // CEntityIOOutput
                constexpr std::ptrdiff_t m_NotifyForceReachedY = 0x640; // CEntityIOOutput
                constexpr std::ptrdiff_t m_NotifyForceReachedZ = 0x668; // CEntityIOOutput
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Synth_Barrage_VData {
                constexpr std::ptrdiff_t m_BarrageCasterModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AmpModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ShootParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1670; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChannelParticle = 0x1750; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strProjectileLaunchSound = 0x1830; // CSoundEventName
                constexpr std::ptrdiff_t m_flAttackInterval = 0x1840; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierUppercuttedVData {
                constexpr std::ptrdiff_t m_StunParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStunSound = 0x6E8; // CSoundEventName
                constexpr std::ptrdiff_t m_NoExplodeModifier = 0x6F8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodeDebuffModifier = 0x708; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flEnemyNoAirDashDuration = 0x718; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_PsychicDagger {
            }
            // Parent: CAI_CitadelNPC
            // Field count: 5
            namespace CNPC_MortarSentry {
                constexpr std::ptrdiff_t m_flAttackCone = 0x17FC; // float32
                constexpr std::ptrdiff_t m_flLastAlertSound = 0x1800; // float32
                constexpr std::ptrdiff_t m_flTrackingSpeed = 0x1804; // float32
                constexpr std::ptrdiff_t m_vTargetPosition = 0x1808; // Vector
                constexpr std::ptrdiff_t m_flSearchRadius = 0x1814; // float32
            }
            // Parent: CBaseModelEntity
            // Field count: 12
            //
            // Metadata:
            // MNetworkIncludeByName
            // NetworkVarNames: m_bInitiallyPopulateInterpHistory (bool)
            // NetworkVarNames: m_bAnimGraphUpdateEnabled (bool)
            // NetworkVarNames: m_vecForce (Vector)
            // NetworkVarNames: m_nForceBone (int32)
            // NetworkVarNames: m_RagdollPose (PhysicsRagdollPose_t)
            // NetworkVarNames: m_bRagdollClientSide (bool)
            // NetworkVarNames: m_animGraph2SerializeData (uint8)
            // NetworkVarNames: m_nAnimGraph2SerializeDataSizeBytes (int)
            namespace CBaseAnimGraph {
                constexpr std::ptrdiff_t m_bInitiallyPopulateInterpHistory = 0x840; // bool
                constexpr std::ptrdiff_t m_pChoreoServices = 0x848; // IChoreoServices*
                constexpr std::ptrdiff_t m_bAnimGraphUpdateEnabled = 0x850; // bool
                constexpr std::ptrdiff_t m_flMaxSlopeDistance = 0x854; // float32
                constexpr std::ptrdiff_t m_vLastSlopeCheckPos = 0x858; // Vector
                constexpr std::ptrdiff_t m_bAnimationUpdateScheduled = 0x864; // bool
                constexpr std::ptrdiff_t m_vecForce = 0x868; // Vector
                constexpr std::ptrdiff_t m_nForceBone = 0x874; // int32
                constexpr std::ptrdiff_t m_RagdollPose = 0x888; // PhysicsRagdollPose_t
                constexpr std::ptrdiff_t m_bRagdollClientSide = 0x8B0; // bool
                constexpr std::ptrdiff_t m_animGraph2SerializeData = 0xA28; // CNetworkUtlVectorBase<uint8>
                constexpr std::ptrdiff_t m_nAnimGraph2SerializeDataSizeBytes = 0xA40; // int32
            }
            // Parent: CPhysForce
            // Field count: 1
            namespace CPhysTorque {
                constexpr std::ptrdiff_t m_axis = 0x548; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Tokamak_HeatSinks_DOT_VData {
                constexpr std::ptrdiff_t m_sAfterburnParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sAfterburnExplodeParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CAbilityMeleeVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityUppercutVData {
                constexpr std::ptrdiff_t m_UppercutAttackData = 0x1580; // AttackData_t
                constexpr std::ptrdiff_t m_UppercutModifier = 0x1AA8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1AB8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ClipModifier = 0x1AC8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flMaxPitchUp = 0x1AD8; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Gravity_Lasso {
            }
            // Parent: CCitadelModifierVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_IceDomeVData {
                constexpr std::ptrdiff_t m_BlockerModel = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_DomeParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FriendlyAuraModifier = 0x7C8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_EnemyAuraModifier = 0x7D8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strDomeEndSound = 0x7E8; // CSoundEventName
                constexpr std::ptrdiff_t m_strTargetLoopingSound = 0x7F8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_HealthSwapPrecast {
                constexpr std::ptrdiff_t m_hTarget = 0xC0; // CHandle<CBaseEntity>
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_StaticChargeVData {
                constexpr std::ptrdiff_t m_CastParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StaticChargeModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_MeleeDamageOnly {
            }
            // Parent: CBaseAnimGraph
            // Field count: 27
            //
            // Metadata:
            // NetworkVarNames: m_ragPos (Vector)
            // NetworkVarNames: m_ragAngles (QAngle)
            // NetworkVarNames: m_hRagdollSource (EHANDLE)
            // NetworkVarNames: m_flBlendWeight (float32)
            namespace CRagdollProp {
                constexpr std::ptrdiff_t m_ragdoll = 0xA50; // ragdoll_t
                constexpr std::ptrdiff_t m_bStartDisabled = 0xA88; // bool
                constexpr std::ptrdiff_t m_ragPos = 0xA90; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_ragAngles = 0xAA8; // CNetworkUtlVectorBase<QAngle>
                constexpr std::ptrdiff_t m_hRagdollSource = 0xAC0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_lastUpdateTickCount = 0xAC4; // uint32
                constexpr std::ptrdiff_t m_allAsleep = 0xAC8; // bool
                constexpr std::ptrdiff_t m_bFirstCollisionAfterLaunch = 0xAC9; // bool
                constexpr std::ptrdiff_t m_hDamageEntity = 0xACC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hKiller = 0xAD0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hPhysicsAttacker = 0xAD4; // CHandle<CBasePlayerPawn>
                constexpr std::ptrdiff_t m_flLastPhysicsInfluenceTime = 0xAD8; // GameTime_t
                constexpr std::ptrdiff_t m_flFadeOutStartTime = 0xADC; // GameTime_t
                constexpr std::ptrdiff_t m_flFadeTime = 0xAE0; // float32
                constexpr std::ptrdiff_t m_vecLastOrigin = 0xAE4; // Vector
                constexpr std::ptrdiff_t m_flAwakeTime = 0xAF0; // GameTime_t
                constexpr std::ptrdiff_t m_flLastOriginChangeTime = 0xAF4; // GameTime_t
                constexpr std::ptrdiff_t m_strOriginClassName = 0xAF8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strSourceClassName = 0xB00; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bHasBeenPhysgunned = 0xB08; // bool
                constexpr std::ptrdiff_t m_bShouldTeleportPhysics = 0xB09; // bool
                constexpr std::ptrdiff_t m_flBlendWeight = 0xB0C; // float32
                constexpr std::ptrdiff_t m_flDefaultFadeScale = 0xB10; // float32
                constexpr std::ptrdiff_t m_ragdollMins = 0xB18; // CUtlVector<Vector>
                constexpr std::ptrdiff_t m_ragdollMaxs = 0xB30; // CUtlVector<Vector>
                constexpr std::ptrdiff_t m_bShouldDeleteActivationRecord = 0xB48; // bool
                constexpr std::ptrdiff_t m_bValidatePoweredRagdollPose = 0xBA8; // bool
            }
            // Parent: CBaseAnimGraph
            // Field count: 0
            namespace CItemSoda {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CModifier_Mirage_Tornado_Aura {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_MobileResupplyAura {
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PetrifyVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffStartParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffEndParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PostSleepModifier = 0x988; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_IceDomeVData {
                constexpr std::ptrdiff_t m_IceDomeModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierLashFlogDebuffVData {
                constexpr std::ptrdiff_t m_FlogDebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CAI_LocalNavigatorBase
            // Field count: 2
            namespace CAI_LocalNavigator {
                constexpr std::ptrdiff_t m_bLastWasClear = 0x50; // bool
                constexpr std::ptrdiff_t m_FullDirectTimer = 0x130; // CSimpleSimTimer
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CBasePlayerControllerAPI {
            }
            // Parent: CCitadelModifierAura
            // Field count: 1
            namespace CCitadel_Modifier_ControlPointBlockerAura {
                constexpr std::ptrdiff_t m_hCP = 0xE0; // CHandle<CCitadelControlPointTrigger>
            }
            // Parent: CCitadelProjectile
            // Field count: 4
            namespace CCitadelProjectile_ImmobilizeTrap {
                constexpr std::ptrdiff_t m_flStartTime = 0x870; // GameTime_t
                constexpr std::ptrdiff_t m_vecStartPos = 0x874; // Vector
                constexpr std::ptrdiff_t m_vecEndPos = 0x880; // Vector
                constexpr std::ptrdiff_t m_flProjectileLandTime = 0x88C; // GameTime_t
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_Item_WarpStone {
                constexpr std::ptrdiff_t m_nCastDelayParticleIndex = 0xB20; // ParticleIndex_t
            }
            // Parent: CCitadel_Item
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_iStacks (int)
            namespace CCitadel_WeaponUpgrade_SiphonBullets {
                constexpr std::ptrdiff_t m_iStacks = 0xB20; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_RapidFire {
                constexpr std::ptrdiff_t m_flNextAttackTime = 0x210; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ThrownShiv_Slow_Debuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SilencedVData {
                constexpr std::ptrdiff_t m_EmpParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EmpPlayerParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EmpStatusParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_BulletShieldImpact {
                constexpr std::ptrdiff_t m_AmbientEffect = 0xC0; // ParticleIndex_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PullDownToGroundVData {
                constexpr std::ptrdiff_t m_flMaxHeight = 0x608; // float32
                constexpr std::ptrdiff_t m_flPullDownSpeedMin = 0x60C; // float32
                constexpr std::ptrdiff_t m_flPullDownSpeedScale = 0x610; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_Backdoor_Protection {
                constexpr std::ptrdiff_t m_MaxHealth = 0xC0; // int32
                constexpr std::ptrdiff_t m_flLastAttackedTime = 0xC4; // GameTime_t
                constexpr std::ptrdiff_t m_nActiveShieldEffect = 0xC8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bIsActive = 0xCC; // bool
                constexpr std::ptrdiff_t m_tActivationTime = 0xD0; // GameTime_t
            }
            // Parent: CAI_CitadelNPCVData
            // Field count: 32
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_TrooperNeutralVData {
                constexpr std::ptrdiff_t m_eTrooperType = 0xFB0; // ENeutralTrooperType
                constexpr std::ptrdiff_t m_flGoldReward = 0xFB4; // float32
                constexpr std::ptrdiff_t m_flGoldRewardBonusPercentPerMinute = 0xFB8; // float32
                constexpr std::ptrdiff_t m_bGiveGoldOnHit = 0xFBC; // bool
                constexpr std::ptrdiff_t m_bOrbDropper = 0xFBD; // bool
                constexpr std::ptrdiff_t m_bCapSimultanousAttackers = 0xFBE; // bool
                constexpr std::ptrdiff_t m_flShieldReactivateDelay = 0xFC0; // float32
                constexpr std::ptrdiff_t m_flDyingDuration = 0xFC4; // float32
                constexpr std::ptrdiff_t m_bDamagedByBullets = 0xFC8; // bool
                constexpr std::ptrdiff_t m_bDamagedByMelee = 0xFC9; // bool
                constexpr std::ptrdiff_t m_bDamagedByAbilities = 0xFCA; // bool
                constexpr std::ptrdiff_t m_bFixedMeleeDamage = 0xFCB; // bool
                constexpr std::ptrdiff_t m_ShieldParticle = 0xFD0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flRetaliateDamage = 0x10B0; // float32
                constexpr std::ptrdiff_t m_flRetaliateCooldown = 0x10B4; // float32
                constexpr std::ptrdiff_t m_retaliateParticle = 0x10B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_bHasAOEAttack = 0x1198; // bool
                constexpr std::ptrdiff_t m_flAOERadius = 0x119C; // float32
                constexpr std::ptrdiff_t m_flAOEDamage = 0x11A0; // float32
                constexpr std::ptrdiff_t m_flAOEAttackCooldown = 0x11A4; // float32
                constexpr std::ptrdiff_t m_AOEParticle = 0x11A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AOEDebuffToApply = 0x1288; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AOEInitiateSound = 0x1298; // CSoundEventName
                constexpr std::ptrdiff_t m_AOESound = 0x12A8; // CSoundEventName
                constexpr std::ptrdiff_t m_AOEDebuffDuration = 0x12B8; // float32
                constexpr std::ptrdiff_t m_vecRandomBodyGroup = 0x12C0; // CUtlVector<CUtlString>
                constexpr std::ptrdiff_t m_vecRandomSkin = 0x12D8; // CUtlVector<CUtlString>
                constexpr std::ptrdiff_t m_flHullCapsuleRadius = 0x12F0; // float32
                constexpr std::ptrdiff_t m_flHullCapsuleHeight = 0x12F4; // float32
                constexpr std::ptrdiff_t m_bFaceEnemyWhileIdle = 0x12F8; // bool
                constexpr std::ptrdiff_t m_IdleLoopSound = 0x1300; // CSoundEventName
                constexpr std::ptrdiff_t m_MoveType = 0x1310; // MoveType_t
            }
            // Parent: CBaseEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_flFadeStartDist (float32)
            // NetworkVarNames: m_flFadeEndDist (float32)
            namespace CEnvDetailController {
                constexpr std::ptrdiff_t m_flFadeStartDist = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flFadeEndDist = 0x4EC; // float32
            }
            // Parent: CCitadel_Announcer_Base
            // Field count: 0
            namespace CCitadel_Announcer {
            }
            // Parent: CTriggerOnce
            // Field count: 14
            //
            // Metadata:
            // NetworkVarNames: m_bTestOcclusion (bool)
            namespace CTriggerLook {
                constexpr std::ptrdiff_t m_hLookTarget = 0x9B8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flFieldOfView = 0x9BC; // float32
                constexpr std::ptrdiff_t m_flLookTime = 0x9C0; // float32
                constexpr std::ptrdiff_t m_flLookTimeTotal = 0x9C4; // float32
                constexpr std::ptrdiff_t m_flLookTimeLast = 0x9C8; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeoutDuration = 0x9CC; // float32
                constexpr std::ptrdiff_t m_bTimeoutFired = 0x9D0; // bool
                constexpr std::ptrdiff_t m_bIsLooking = 0x9D1; // bool
                constexpr std::ptrdiff_t m_b2DFOV = 0x9D2; // bool
                constexpr std::ptrdiff_t m_bUseVelocity = 0x9D3; // bool
                constexpr std::ptrdiff_t m_bTestOcclusion = 0x9D4; // bool
                constexpr std::ptrdiff_t m_OnTimeout = 0x9D8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnStartLook = 0xA00; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEndLook = 0xA28; // CEntityIOOutput
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CCitadel_Projectile_RocketLauncher_Rocket {
            }
            // Parent: CCitadel_Ability_BaseHeldItem
            // Field count: 6
            namespace CCitadel_Ability_GoldenIdol {
                constexpr std::ptrdiff_t m_nGold = 0xB40; // int32
                constexpr std::ptrdiff_t m_flAmberTime = 0xB44; // float32
                constexpr std::ptrdiff_t m_flSapphireTime = 0xB48; // float32
                constexpr std::ptrdiff_t m_tAbilityCreateTime = 0xB4C; // GameTime_t
                constexpr std::ptrdiff_t m_tLastDamageTime = 0xB50; // GameTime_t
                constexpr std::ptrdiff_t m_vHomePosition = 0xB58; // Vector
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoTeleportDestination {
            }
            // Parent: CLogicalEntity
            // Field count: 11
            namespace CMathRemap {
                constexpr std::ptrdiff_t m_flInMin = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flInMax = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flOut1 = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flOut2 = 0x4F4; // float32
                constexpr std::ptrdiff_t m_flOldInValue = 0x4F8; // float32
                constexpr std::ptrdiff_t m_bEnabled = 0x4FC; // bool
                constexpr std::ptrdiff_t m_OutValue = 0x500; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnRoseAboveMin = 0x528; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnRoseAboveMax = 0x550; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFellBelowMin = 0x578; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFellBelowMax = 0x5A0; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Field count: 3
            namespace CInstructorEventEntity {
                constexpr std::ptrdiff_t m_iszName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszHintTargetEntity = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hTargetPlayer = 0x4F8; // CHandle<CBasePlayerPawn>
            }
            // Parent: CBaseEntity
            // Field count: 16
            //
            // Metadata:
            // NetworkVarNames: m_hGradientFogTexture (HRenderTextureStrong)
            // NetworkVarNames: m_flFogStartDistance (float)
            // NetworkVarNames: m_flFogEndDistance (float)
            // NetworkVarNames: m_bHeightFogEnabled (bool)
            // NetworkVarNames: m_flFogStartHeight (float)
            // NetworkVarNames: m_flFogEndHeight (float)
            // NetworkVarNames: m_flFarZ (float)
            // NetworkVarNames: m_flFogMaxOpacity (float)
            // NetworkVarNames: m_flFogFalloffExponent (float)
            // NetworkVarNames: m_flFogVerticalExponent (float)
            // NetworkVarNames: m_fogColor (Color)
            // NetworkVarNames: m_flFogStrength (float)
            // NetworkVarNames: m_flFadeTime (float)
            // NetworkVarNames: m_bStartDisabled (bool)
            // NetworkVarNames: m_bIsEnabled (bool)
            namespace CGradientFog {
                constexpr std::ptrdiff_t m_hGradientFogTexture = 0x4E8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_flFogStartDistance = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flFogEndDistance = 0x4F4; // float32
                constexpr std::ptrdiff_t m_bHeightFogEnabled = 0x4F8; // bool
                constexpr std::ptrdiff_t m_flFogStartHeight = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flFogEndHeight = 0x500; // float32
                constexpr std::ptrdiff_t m_flFarZ = 0x504; // float32
                constexpr std::ptrdiff_t m_flFogMaxOpacity = 0x508; // float32
                constexpr std::ptrdiff_t m_flFogFalloffExponent = 0x50C; // float32
                constexpr std::ptrdiff_t m_flFogVerticalExponent = 0x510; // float32
                constexpr std::ptrdiff_t m_fogColor = 0x514; // Color
                constexpr std::ptrdiff_t m_flFogStrength = 0x518; // float32
                constexpr std::ptrdiff_t m_flFadeTime = 0x51C; // float32
                constexpr std::ptrdiff_t m_bStartDisabled = 0x520; // bool
                constexpr std::ptrdiff_t m_bIsEnabled = 0x521; // bool
                constexpr std::ptrdiff_t m_bGradientFogNeedsTextures = 0x522; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Targetdummy_3 {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityVandalSurgeVData {
                constexpr std::ptrdiff_t m_LiftModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TargetParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetCastSound = 0x1650; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_StaticCharge {
                constexpr std::ptrdiff_t m_flRadius = 0x130; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Upgrade_KineticSash {
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_flUpFactor (float)
            // NetworkVarNames: m_flBounceVelocity (float)
            namespace CCitadel_Bounce_Pad {
                constexpr std::ptrdiff_t m_hAbility = 0xBC8; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_flUpFactor = 0xBCC; // float32
                constexpr std::ptrdiff_t m_flBounceVelocity = 0xBD0; // float32
                constexpr std::ptrdiff_t m_flBarrelBounceVelocity = 0xBD4; // float32
                constexpr std::ptrdiff_t m_flBarrelUpFactor = 0xBD8; // float32
                constexpr std::ptrdiff_t m_bSpeedOnLand = 0xBDC; // bool
                constexpr std::ptrdiff_t m_bHasBouncedPlayerBefore = 0xBDD; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_CloakingDevice {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_RegenerativeArmor {
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Fathom_Breach_VData {
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LeapParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strInFlightAnimGraphParam = 0x1720; // CGlobalSymbol
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1728; // CSoundEventName
                constexpr std::ptrdiff_t m_InFlightModifier = 0x1738; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Citadel_Bull_Leap_LandingBonuses_VData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 23
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityDashVData {
                constexpr std::ptrdiff_t m_DashParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DownDashParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strArriveSound = 0x1720; // CSoundEventName
                constexpr std::ptrdiff_t m_strStaminaDrainedSound = 0x1730; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSequenceGroundDashActivate = 0x1740; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceAirDashActivate = 0x17C8; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_flMaxAngDiff = 0x1850; // float32
                constexpr std::ptrdiff_t m_flDurationScaleForSpeed = 0x1854; // float32
                constexpr std::ptrdiff_t m_flSlideEarlyOutWindow = 0x1858; // float32
                constexpr std::ptrdiff_t m_flSlideLockoutTime = 0x185C; // float32
                constexpr std::ptrdiff_t m_flGroundDashAirbornDrag = 0x1860; // float32
                constexpr std::ptrdiff_t m_flGroundDashAirbornSpeedClamp = 0x1864; // float32
                constexpr std::ptrdiff_t m_strGroundDashActivate = 0x1868; // CSoundEventName
                constexpr std::ptrdiff_t m_curvePosition = 0x1878; // CPiecewiseCurve
                constexpr std::ptrdiff_t m_flGroundDashDuration = 0x18B8; // float32
                constexpr std::ptrdiff_t m_flGroundDashDistanceInMeters = 0x18BC; // float32
                constexpr std::ptrdiff_t m_flAirDashEndVelocityScale = 0x18C0; // float32
                constexpr std::ptrdiff_t m_flAirDashAccPct = 0x18C4; // float32
                constexpr std::ptrdiff_t m_flDuringDrag = 0x18C8; // float32
                constexpr std::ptrdiff_t m_flPostDrag = 0x18CC; // float32
                constexpr std::ptrdiff_t m_flPostDragDuration = 0x18D0; // float32
                constexpr std::ptrdiff_t m_flDownwardAirDashSpeed = 0x18D4; // float32
                constexpr std::ptrdiff_t m_strDashActivate = 0x18D8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_DebuffImmunity {
            }
            // Parent: CBaseEntity
            // Field count: 32
            namespace CAI_ScriptConditions {
                constexpr std::ptrdiff_t m_OnConditionsSatisfied = 0x4F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnConditionsTimeout = 0x518; // CEntityIOOutput
                constexpr std::ptrdiff_t m_NoValidActors = 0x540; // CEntityIOOutput
                constexpr std::ptrdiff_t m_fDisabled = 0x568; // bool
                constexpr std::ptrdiff_t m_bLeaveAsleep = 0x569; // bool
                constexpr std::ptrdiff_t m_hTarget = 0x56C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flRequiredDuration = 0x570; // float32
                constexpr std::ptrdiff_t m_fMinState = 0x574; // NPC_STATE
                constexpr std::ptrdiff_t m_fMaxState = 0x578; // NPC_STATE
                constexpr std::ptrdiff_t m_fScriptStatus = 0x57C; // ThreeState_t
                constexpr std::ptrdiff_t m_fActorSeePlayer = 0x580; // ThreeState_t
                constexpr std::ptrdiff_t m_Actor = 0x588; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flPlayerActorProximity = 0x590; // float32
                constexpr std::ptrdiff_t m_PlayerActorProxTester = 0x594; // CAI_ProxTester
                constexpr std::ptrdiff_t m_flPlayerActorFOV = 0x59C; // float32
                constexpr std::ptrdiff_t m_bPlayerActorFOVTrueCone = 0x5A0; // bool
                constexpr std::ptrdiff_t m_fPlayerActorLOS = 0x5A4; // ThreeState_t
                constexpr std::ptrdiff_t m_fActorSeeTarget = 0x5A8; // ThreeState_t
                constexpr std::ptrdiff_t m_flActorTargetProximity = 0x5AC; // float32
                constexpr std::ptrdiff_t m_ActorTargetProxTester = 0x5B0; // CAI_ProxTester
                constexpr std::ptrdiff_t m_flPlayerTargetProximity = 0x5B8; // float32
                constexpr std::ptrdiff_t m_PlayerTargetProxTester = 0x5BC; // CAI_ProxTester
                constexpr std::ptrdiff_t m_flPlayerTargetFOV = 0x5C4; // float32
                constexpr std::ptrdiff_t m_bPlayerTargetFOVTrueCone = 0x5C8; // bool
                constexpr std::ptrdiff_t m_fPlayerTargetLOS = 0x5CC; // ThreeState_t
                constexpr std::ptrdiff_t m_fPlayerBlockingActor = 0x5D0; // ThreeState_t
                constexpr std::ptrdiff_t m_fActorInPVS = 0x5D4; // ThreeState_t
                constexpr std::ptrdiff_t m_flMinTimeout = 0x5D8; // float32
                constexpr std::ptrdiff_t m_flMaxTimeout = 0x5DC; // float32
                constexpr std::ptrdiff_t m_fActorInVehicle = 0x5E0; // ThreeState_t
                constexpr std::ptrdiff_t m_fPlayerInVehicle = 0x5E4; // ThreeState_t
                constexpr std::ptrdiff_t m_ElementList = 0x5E8; // CUtlVector<CAI_ScriptConditionsElement>
            }
            // Parent: CBaseModelEntity
            // Field count: 2
            namespace CTriggerVolume {
                constexpr std::ptrdiff_t m_iFilterName = 0x7C0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hFilter = 0x7C8; // CHandle<CBaseFilter>
            }
            // Parent: CAI_LocalNavigatorBase
            // Field count: 0
            namespace CAI_CitadelLocalNavigator {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ConsumedProtectionRacketVData {
                constexpr std::ptrdiff_t m_strShieldBreakSound = 0x608; // CSoundEventName
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 1
            namespace CCitadel_Modifier_Wrecker_Ultimate_ThrowEnemy {
                constexpr std::ptrdiff_t m_vThrowVelocity = 0xC8; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_WreckerSalvage_Buff {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_StickyBombAttached {
                constexpr std::ptrdiff_t m_nParticleIndex = 0xC0; // ParticleIndex_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ViscousBallVData {
                constexpr std::ptrdiff_t m_TrailParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DirectionParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityNikumanVData {
                constexpr std::ptrdiff_t m_NikumanModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SelfBuffModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItem_ActiveReload_VData {
                constexpr std::ptrdiff_t m_SuccessModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strSuccessSound = 0x15B8; // CSoundEventName
                constexpr std::ptrdiff_t m_strFailureSound = 0x15C8; // CSoundEventName
                constexpr std::ptrdiff_t m_SuccessParticle = 0x15D8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FailureParticle = 0x16B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flGraceTime = 0x1798; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CitadelItemVData {
                constexpr std::ptrdiff_t m_iItemTier = 0x1564; // EModTier_t
                constexpr std::ptrdiff_t m_nUpgradeSlotCost = 0x1565; // int8
                constexpr std::ptrdiff_t m_bWarnIfNoAffectedAbilities = 0x1566; // bool
                constexpr std::ptrdiff_t m_bRequiresChargedAbility = 0x1567; // bool
                constexpr std::ptrdiff_t m_bRequiresChanelledAbility = 0x1568; // bool
                constexpr std::ptrdiff_t m_vecComponentItems = 0x1570; // CUtlVector<CSubclassName<4>>
                constexpr std::ptrdiff_t m_bShowTextDescription = 0x1588; // bool
                constexpr std::ptrdiff_t m_bIsDefensiveItem = 0x1589; // bool
                constexpr std::ptrdiff_t m_eShopFilters = 0x158A; // EShopFilters_t
                constexpr std::ptrdiff_t m_vecTooltipSectionInfo = 0x1590; // CUtlVector<ItemSectionInfo_t>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Near_Climbable_RopeVData {
                constexpr std::ptrdiff_t m_flEnableStateTime = 0x608; // float32
            }
            // Parent: CMarkupVolumeWithRef
            // Field count: 0
            namespace CMarkupVolumeTagged_NavCitadel {
            }
            // Parent: CEnvSoundscape
            // Field count: 0
            namespace CEnvSoundscapeAlias_snd_soundscape {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FlameDashGroundAuraVData {
                constexpr std::ptrdiff_t m_GroundParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flHeight = 0x728; // float32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_QuickSilver {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_AOE_Tech_Shield {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CGameModifier_SetMoveType {
                constexpr std::ptrdiff_t m_nMoveType = 0xC0; // MoveType_t
            }
            // Parent: CCitadel_Modifier_Base
            // Field count: 0
            namespace CCitadel_Modifier_TangoTetherTarget {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PristineEmblem {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Objective_Bullet_Resist {
                constexpr std::ptrdiff_t m_hTrigger = 0xC0; // CHandle<CTriggerTrooperDetector>
                constexpr std::ptrdiff_t m_iEnemyHeroCount = 0xC4; // int32
            }
            // Parent: CBaseEntity
            // Field count: 7
            namespace CFishPool {
                constexpr std::ptrdiff_t m_fishCount = 0x4F8; // int32
                constexpr std::ptrdiff_t m_maxRange = 0x4FC; // float32
                constexpr std::ptrdiff_t m_swimDepth = 0x500; // float32
                constexpr std::ptrdiff_t m_waterLevel = 0x504; // float32
                constexpr std::ptrdiff_t m_isDormant = 0x508; // bool
                constexpr std::ptrdiff_t m_fishes = 0x510; // CUtlVector<CHandle<CFish>>
                constexpr std::ptrdiff_t m_visTimer = 0x528; // CountdownTimer
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoHeroTestingController {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Tokamak_AllySmokeAOE {
            }
            // Parent: CCitadel_Item_TrackingProjectileApplyModifier
            // Field count: 0
            namespace CCitadel_Item_Disarm {
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CPointClientCommand {
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            namespace CFuncVPhysicsClip {
                constexpr std::ptrdiff_t m_bDisabled = 0x7C0; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_Barrage_Caster_VData {
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGangActivityCancelVData {
                constexpr std::ptrdiff_t m_AbilitySwap = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_HookTarget {
                constexpr std::ptrdiff_t m_flCurrentVerticalSpeed = 0xC4; // float32
                constexpr std::ptrdiff_t m_bSuccess = 0xC8; // bool
                constexpr std::ptrdiff_t m_bSameTeam = 0xC9; // bool
                constexpr std::ptrdiff_t m_bPlayedApproachingWhoosh = 0xCA; // bool
                constexpr std::ptrdiff_t m_flInitialTravelDistance = 0xCC; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilitySleepDaggerVData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SleepModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DrowsyModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SleepBombModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityLashFlogVData {
                constexpr std::ptrdiff_t m_FlogParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlogLifeLeachParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlogDebuffModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_BoxingGlove {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Inhibitor_ProcVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProc
            // Field count: 1
            namespace CCitadel_Modifier_ChainLightning {
                constexpr std::ptrdiff_t m_flNextProcTime = 0x188; // GameTime_t
            }
            // Parent: CSceneEntity
            // Field count: 7
            namespace CInstancedSceneEntity {
                constexpr std::ptrdiff_t m_hOwner = 0xA48; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bHadOwner = 0xA4C; // bool
                constexpr std::ptrdiff_t m_flPostSpeakDelay = 0xA50; // float32
                constexpr std::ptrdiff_t m_flPreDelay = 0xA54; // float32
                constexpr std::ptrdiff_t m_bIsBackground = 0xA58; // bool
                constexpr std::ptrdiff_t m_bRemoveOnCompletion = 0xA59; // bool
                constexpr std::ptrdiff_t m_hTarget = 0xA5C; // CHandle<CBaseEntity>
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_UtilityUpgrade_HealthNova {
            }
            // Parent: CBaseModelEntity
            // Field count: 22
            //
            // Metadata:
            // MNetworkIncludeByUserGroup
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_szSnapshotFileName (char)
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_bFrozen (bool)
            // NetworkVarNames: m_flFreezeTransitionDuration (float)
            // NetworkVarNames: m_nStopType (int)
            // NetworkVarNames: m_bAnimateDuringGameplayPause (bool)
            // NetworkVarNames: m_iEffectIndex (HParticleSystemDefinitionStrong)
            // NetworkVarNames: m_flStartTime (GameTime_t)
            // NetworkVarNames: m_flPreSimTime (float32)
            // NetworkVarNames: m_vServerControlPoints (Vector)
            // NetworkVarNames: m_iServerControlPointAssignments (uint8)
            // NetworkVarNames: m_hControlPointEnts (CHandle<CBaseEntity>)
            // NetworkVarNames: m_bNoSave (bool)
            // NetworkVarNames: m_bNoFreeze (bool)
            // NetworkVarNames: m_bNoRamp (bool)
            namespace CParticleSystem {
                constexpr std::ptrdiff_t m_szSnapshotFileName = 0x7C0; // char[512]
                constexpr std::ptrdiff_t m_bActive = 0x9C0; // bool
                constexpr std::ptrdiff_t m_bFrozen = 0x9C1; // bool
                constexpr std::ptrdiff_t m_flFreezeTransitionDuration = 0x9C4; // float32
                constexpr std::ptrdiff_t m_nStopType = 0x9C8; // int32
                constexpr std::ptrdiff_t m_bAnimateDuringGameplayPause = 0x9CC; // bool
                constexpr std::ptrdiff_t m_iEffectIndex = 0x9D0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                constexpr std::ptrdiff_t m_flStartTime = 0x9D8; // GameTime_t
                constexpr std::ptrdiff_t m_flPreSimTime = 0x9DC; // float32
                constexpr std::ptrdiff_t m_vServerControlPoints = 0x9E0; // Vector[4]
                constexpr std::ptrdiff_t m_iServerControlPointAssignments = 0xA10; // uint8[4]
                constexpr std::ptrdiff_t m_hControlPointEnts = 0xA14; // CHandle<CBaseEntity>[64]
                constexpr std::ptrdiff_t m_bNoSave = 0xB14; // bool
                constexpr std::ptrdiff_t m_bNoFreeze = 0xB15; // bool
                constexpr std::ptrdiff_t m_bNoRamp = 0xB16; // bool
                constexpr std::ptrdiff_t m_bStartActive = 0xB17; // bool
                constexpr std::ptrdiff_t m_iszEffectName = 0xB18; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszControlPointNames = 0xB20; // CUtlSymbolLarge[64]
                constexpr std::ptrdiff_t m_nDataCP = 0xD20; // int32
                constexpr std::ptrdiff_t m_vecDataCPValue = 0xD24; // Vector
                constexpr std::ptrdiff_t m_nTintCP = 0xD30; // int32
                constexpr std::ptrdiff_t m_clrTint = 0xD34; // Color
            }
            // Parent: CEntityComponent
            // Field count: 2
            namespace CCitadelRegenComponent {
                constexpr std::ptrdiff_t m_flLastRegenThinkTime = 0x10; // GameTime_t
                constexpr std::ptrdiff_t m_flRegenAccumulator = 0x14; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierSpiderShieldBuffVData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RadiusParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PulseParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PulseDebuffModifier = 0x8A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelYamatoBaseVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelAbilityHealingSlashVData {
                constexpr std::ptrdiff_t m_flEffectSize = 0x1568; // float32
                constexpr std::ptrdiff_t m_flMaxAttackAngle = 0x156C; // float32
                constexpr std::ptrdiff_t m_remapAngleToTime = 0x1570; // CRemapFloat
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1580; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealingSlashParticle = 0x1670; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealingSlashSwordGlow = 0x1750; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1830; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDamageTarget = 0x1910; // CSoundEventName
            }
            // Parent: None
            // Field count: 24
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CBasePlayerWeaponVData {
                constexpr std::ptrdiff_t m_szClassName = 0x10; // CUtlString
                constexpr std::ptrdiff_t m_szWorldModel = 0x18; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_sToolsOnlyOwnerModelName = 0xF8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_bBuiltRightHanded = 0x1D8; // bool
                constexpr std::ptrdiff_t m_bAllowFlipping = 0x1D9; // bool
                constexpr std::ptrdiff_t m_sMuzzleAttachment = 0x1E0; // CAttachmentNameSymbolWithStorage
                constexpr std::ptrdiff_t m_szMuzzleFlashParticle = 0x200; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_bLinkedCooldowns = 0x2E0; // bool
                constexpr std::ptrdiff_t m_vecIntrinsicModifiers = 0x2E8; // CUtlVector<CEmbeddedSubclass<CCitadelModifier>>
                constexpr std::ptrdiff_t m_iFlags = 0x300; // ItemFlagTypes_t
                constexpr std::ptrdiff_t m_nPrimaryAmmoType = 0x301; // AmmoIndex_t
                constexpr std::ptrdiff_t m_nSecondaryAmmoType = 0x302; // AmmoIndex_t
                constexpr std::ptrdiff_t m_iMaxClip1 = 0x304; // int32
                constexpr std::ptrdiff_t m_iMaxClip2 = 0x308; // int32
                constexpr std::ptrdiff_t m_iDefaultClip1 = 0x30C; // int32
                constexpr std::ptrdiff_t m_iDefaultClip2 = 0x310; // int32
                constexpr std::ptrdiff_t m_bReserveAmmoAsClips = 0x314; // bool
                constexpr std::ptrdiff_t m_iWeight = 0x318; // int32
                constexpr std::ptrdiff_t m_bAutoSwitchTo = 0x31C; // bool
                constexpr std::ptrdiff_t m_bAutoSwitchFrom = 0x31D; // bool
                constexpr std::ptrdiff_t m_iRumbleEffect = 0x320; // RumbleEffect_t
                constexpr std::ptrdiff_t m_iSlot = 0x324; // int32
                constexpr std::ptrdiff_t m_iPosition = 0x328; // int32
                constexpr std::ptrdiff_t m_aShootSounds = 0x330; // CUtlOrderedMap<WeaponSound_t,CSoundEventName>
            }
            // Parent: CItem
            // Field count: 1
            namespace CScriptItem {
                constexpr std::ptrdiff_t m_MoveTypeOverride = 0xB20; // MoveType_t
            }
            // Parent: CCitadelModifierAura
            // Field count: 3
            namespace CCitadel_Modifier_Item_AOESilence {
                constexpr std::ptrdiff_t m_flStartRadius = 0xE0; // float32
                constexpr std::ptrdiff_t m_flEndRadius = 0xE4; // float32
                constexpr std::ptrdiff_t m_flSpreadDuration = 0xE8; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Trapper_WebWallVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DisarmModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_WebWallParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WebWallDestroyedParticle = 0x1660; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TimeWallChargeParticle = 0x1740; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TimeWallHitParticle = 0x1820; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TimeWallHitTimerParticle = 0x1900; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strWebWallCreated = 0x19E0; // CSoundEventName
                constexpr std::ptrdiff_t m_strWebWallDestroyed = 0x19F0; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Shiv_KillingBlow_Leap {
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityLightningBallVData {
                constexpr std::ptrdiff_t m_ZapModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strHitSound = 0x1570; // CSoundEventName
                constexpr std::ptrdiff_t m_strProjectileLoopingSound = 0x1580; // CSoundEventName
                constexpr std::ptrdiff_t m_ZapParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: None
            // Field count: 2
            namespace CCitadel_Modifier_ExplosiveShots__BulletEntityPair_t {
                constexpr std::ptrdiff_t m_hEntHit = 0x0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_ShotHit = 0x4; // ShotID_t
            }
            // Parent: CScaleFunctionVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CScaleFunctionAbilityPropertySingleStatVData {
            }
            // Parent: IntervalTimer
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_flValues (float)
            // NetworkVarNames: m_nValueCounts (int)
            // NetworkVarNames: m_nBucketCount (int)
            // NetworkVarNames: m_flInterval (float)
            // NetworkVarNames: m_flFinalValue (float)
            // NetworkVarNames: m_nCompressionType (TimelineCompression_t)
            // NetworkVarNames: m_bStopped (bool)
            namespace CTimeline {
                constexpr std::ptrdiff_t m_flValues = 0x10; // float32[64]
                constexpr std::ptrdiff_t m_nValueCounts = 0x110; // int32[64]
                constexpr std::ptrdiff_t m_nBucketCount = 0x210; // int32
                constexpr std::ptrdiff_t m_flInterval = 0x214; // float32
                constexpr std::ptrdiff_t m_flFinalValue = 0x218; // float32
                constexpr std::ptrdiff_t m_nCompressionType = 0x21C; // TimelineCompression_t
                constexpr std::ptrdiff_t m_bStopped = 0x220; // bool
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CTriggerTeamBase {
            }
            // Parent: CCitadelModifierAura
            // Field count: 1
            namespace CCitadel_Item_StasisBomb_Aura {
                constexpr std::ptrdiff_t m_AuraRadius = 0xE0; // float32
            }
            // Parent: CPointEntity
            // Field count: 10
            namespace CAmbientGeneric {
                constexpr std::ptrdiff_t m_radius = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flMaxRadius = 0x4EC; // float32
                constexpr std::ptrdiff_t m_iSoundLevel = 0x4F0; // soundlevel_t
                constexpr std::ptrdiff_t m_dpv = 0x4F4; // dynpitchvol_t
                constexpr std::ptrdiff_t m_fActive = 0x558; // bool
                constexpr std::ptrdiff_t m_fLooping = 0x559; // bool
                constexpr std::ptrdiff_t m_iszSound = 0x560; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_sSourceEntName = 0x568; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hSoundSource = 0x570; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nSoundSourceEntIndex = 0x574; // CEntityIndex
            }
            // Parent: CBaseModelEntity
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_Flags (uint8)
            // NetworkVarNames: m_LightStyle (uint8)
            // NetworkVarNames: m_Radius (float32)
            // NetworkVarNames: m_Exponent (int32)
            // NetworkVarNames: m_InnerAngle (float32)
            // NetworkVarNames: m_OuterAngle (float32)
            // NetworkVarNames: m_SpotRadius (float32)
            namespace CDynamicLight {
                constexpr std::ptrdiff_t m_ActualFlags = 0x7C0; // uint8
                constexpr std::ptrdiff_t m_Flags = 0x7C1; // uint8
                constexpr std::ptrdiff_t m_LightStyle = 0x7C2; // uint8
                constexpr std::ptrdiff_t m_On = 0x7C3; // bool
                constexpr std::ptrdiff_t m_Radius = 0x7C4; // float32
                constexpr std::ptrdiff_t m_Exponent = 0x7C8; // int32
                constexpr std::ptrdiff_t m_InnerAngle = 0x7CC; // float32
                constexpr std::ptrdiff_t m_OuterAngle = 0x7D0; // float32
                constexpr std::ptrdiff_t m_SpotRadius = 0x7D4; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Targetdummy_1 {
            }
            // Parent: CCitadelModifier
            // Field count: 11
            namespace CCitadel_Modifier_SettingSunThinker {
                constexpr std::ptrdiff_t m_flTickInterval = 0xC0; // float32
                constexpr std::ptrdiff_t m_flRadius = 0xC4; // float32
                constexpr std::ptrdiff_t m_CenterRadius = 0xC8; // float32
                constexpr std::ptrdiff_t m_CenterDamage = 0xCC; // float32
                constexpr std::ptrdiff_t m_OuterDamage = 0xD0; // float32
                constexpr std::ptrdiff_t m_StunDuration = 0xD4; // float32
                constexpr std::ptrdiff_t m_TargetingDuration = 0xD8; // float32
                constexpr std::ptrdiff_t m_ShootDuration = 0xDC; // float32
                constexpr std::ptrdiff_t m_bTargetingCompleted = 0xE0; // bool
                constexpr std::ptrdiff_t m_bSecondHit = 0xE1; // bool
                constexpr std::ptrdiff_t m_bTwoHits = 0xE2; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierHighAlertBuffVData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTrappersBoloVData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TrapModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_VandalSurge {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_DisarmProcWatcher {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_RevealTarget {
            }
            // Parent: CBaseEntity
            // Field count: 2
            namespace CPathAccompany {
                constexpr std::ptrdiff_t m_flPathLength = 0x4E8; // float32
                constexpr std::ptrdiff_t m_vecNodes = 0x4F0; // CUtlVector<PathAccompanyNode_t>
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CTriggerToggleSave {
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CPrecipitation {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TimeWall_AuraVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CPointServerCommand {
            }
            // Parent: None
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_iReapplyProvisionParity (int)
            // NetworkVarNames: m_hOuter (EHANDLE)
            // NetworkVarNames: m_ProviderType (attributeprovidertypes_t)
            namespace CAttributeManager {
                constexpr std::ptrdiff_t m_Providers = 0x8; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_Receivers = 0x20; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_iReapplyProvisionParity = 0x38; // int32
                constexpr std::ptrdiff_t m_hOuter = 0x3C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bPreventLoopback = 0x40; // bool
                constexpr std::ptrdiff_t m_ProviderType = 0x44; // attributeprovidertypes_t
                constexpr std::ptrdiff_t m_CachedResults = 0x48; // CUtlVector<CAttributeManager::cached_attribute_float_t>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Magician_AnimalCurse {
                constexpr std::ptrdiff_t m_CachedTarget = 0xB00; // CHandle<CBaseEntity>
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityDistruptiveChargeVData {
                constexpr std::ptrdiff_t m_Particle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_HornetSting {
                constexpr std::ptrdiff_t m_projInfo = 0xB70; // CitadelAbilityProjectileCreateInfo_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MutedVData {
                constexpr std::ptrdiff_t m_MutedParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_MutedPlayerParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_MutedStatusParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_TurnCameraToTarget {
                constexpr std::ptrdiff_t m_hTarget = 0xC0; // CHandle<CBaseEntity>
            }
            // Parent: CServerOnlyEntity
            // Field count: 0
            namespace CLogicalEntity {
            }
            // Parent: None
            // Field count: 24
            //
            // Metadata:
            // NetworkVarNames: m_PredNetBoolVariables (uint32)
            // NetworkVarNames: m_PredNetByteVariables (byte)
            // NetworkVarNames: m_PredNetUInt16Variables (uint16)
            // NetworkVarNames: m_PredNetIntVariables (int32)
            // NetworkVarNames: m_PredNetUInt32Variables (uint32)
            // NetworkVarNames: m_PredNetUInt64Variables (uint64)
            // NetworkVarNames: m_PredNetFloatVariables (float)
            // NetworkVarNames: m_PredNetVectorVariables (Vector)
            // NetworkVarNames: m_PredNetQuaternionVariables (Quaternion)
            // NetworkVarNames: m_PredNetGlobalSymbolVariables (CGlobalSymbol)
            // NetworkVarNames: m_OwnerOnlyPredNetBoolVariables (uint32)
            // NetworkVarNames: m_OwnerOnlyPredNetByteVariables (byte)
            // NetworkVarNames: m_OwnerOnlyPredNetUInt16Variables (uint16)
            // NetworkVarNames: m_OwnerOnlyPredNetIntVariables (int32)
            // NetworkVarNames: m_OwnerOnlyPredNetUInt32Variables (uint32)
            // NetworkVarNames: m_OwnerOnlyPredNetUInt64Variables (uint64)
            // NetworkVarNames: m_OwnerOnlyPredNetFloatVariables (float)
            // NetworkVarNames: m_OwnerOnlyPredNetVectorVariables (Vector)
            // NetworkVarNames: m_OwnerOnlyPredNetQuaternionVariables (Quaternion)
            // NetworkVarNames: m_OwnerOnlyPredNetGlobalSymbolVariables (CGlobalSymbol)
            // NetworkVarNames: m_nBoolVariablesCount (int)
            // NetworkVarNames: m_nOwnerOnlyBoolVariablesCount (int)
            // NetworkVarNames: m_nRandomSeedOffset (int)
            // NetworkVarNames: m_flLastTeleportTime (float)
            namespace CAnimGraphNetworkedVariables {
                constexpr std::ptrdiff_t m_PredNetBoolVariables = 0x8; // CNetworkUtlVectorBase<uint32>
                constexpr std::ptrdiff_t m_PredNetByteVariables = 0x20; // CNetworkUtlVectorBase<uint8>
                constexpr std::ptrdiff_t m_PredNetUInt16Variables = 0x38; // CNetworkUtlVectorBase<uint16>
                constexpr std::ptrdiff_t m_PredNetIntVariables = 0x50; // CNetworkUtlVectorBase<int32>
                constexpr std::ptrdiff_t m_PredNetUInt32Variables = 0x68; // CNetworkUtlVectorBase<uint32>
                constexpr std::ptrdiff_t m_PredNetUInt64Variables = 0x80; // CNetworkUtlVectorBase<uint64>
                constexpr std::ptrdiff_t m_PredNetFloatVariables = 0x98; // CNetworkUtlVectorBase<float32>
                constexpr std::ptrdiff_t m_PredNetVectorVariables = 0xB0; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_PredNetQuaternionVariables = 0xC8; // CNetworkUtlVectorBase<Quaternion>
                constexpr std::ptrdiff_t m_PredNetGlobalSymbolVariables = 0xE0; // CNetworkUtlVectorBase<CGlobalSymbol>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetBoolVariables = 0xF8; // CNetworkUtlVectorBase<uint32>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetByteVariables = 0x110; // CNetworkUtlVectorBase<uint8>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetUInt16Variables = 0x128; // CNetworkUtlVectorBase<uint16>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetIntVariables = 0x140; // CNetworkUtlVectorBase<int32>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetUInt32Variables = 0x158; // CNetworkUtlVectorBase<uint32>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetUInt64Variables = 0x170; // CNetworkUtlVectorBase<uint64>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetFloatVariables = 0x188; // CNetworkUtlVectorBase<float32>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetVectorVariables = 0x1A0; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetQuaternionVariables = 0x1B8; // CNetworkUtlVectorBase<Quaternion>
                constexpr std::ptrdiff_t m_OwnerOnlyPredNetGlobalSymbolVariables = 0x1D0; // CNetworkUtlVectorBase<CGlobalSymbol>
                constexpr std::ptrdiff_t m_nBoolVariablesCount = 0x1E8; // int32
                constexpr std::ptrdiff_t m_nOwnerOnlyBoolVariablesCount = 0x1EC; // int32
                constexpr std::ptrdiff_t m_nRandomSeedOffset = 0x1F0; // int32
                constexpr std::ptrdiff_t m_flLastTeleportTime = 0x1F4; // float32
            }
            // Parent: CBreakableProp
            // Field count: 37
            //
            // Metadata:
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkIncludeByName
            // NetworkVarNames: m_bAwake (bool)
            namespace CPhysicsProp {
                constexpr std::ptrdiff_t m_MotionEnabled = 0xC00; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAwakened = 0xC28; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAwake = 0xC50; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAsleep = 0xC78; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPlayerUse = 0xCA0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnOutOfWorld = 0xCC8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPlayerPickup = 0xCF0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bForceNavIgnore = 0xD18; // bool
                constexpr std::ptrdiff_t m_bNoNavmeshBlocker = 0xD19; // bool
                constexpr std::ptrdiff_t m_bForceNpcExclude = 0xD1A; // bool
                constexpr std::ptrdiff_t m_massScale = 0xD1C; // float32
                constexpr std::ptrdiff_t m_inertiaScale = 0xD20; // float32
                constexpr std::ptrdiff_t m_buoyancyScale = 0xD24; // float32
                constexpr std::ptrdiff_t m_damageType = 0xD28; // int32
                constexpr std::ptrdiff_t m_damageToEnableMotion = 0xD2C; // int32
                constexpr std::ptrdiff_t m_flForceToEnableMotion = 0xD30; // float32
                constexpr std::ptrdiff_t m_bThrownByPlayer = 0xD34; // bool
                constexpr std::ptrdiff_t m_bDroppedByPlayer = 0xD35; // bool
                constexpr std::ptrdiff_t m_bTouchedByPlayer = 0xD36; // bool
                constexpr std::ptrdiff_t m_bFirstCollisionAfterLaunch = 0xD37; // bool
                constexpr std::ptrdiff_t m_iExploitableByPlayer = 0xD38; // int32
                constexpr std::ptrdiff_t m_bHasBeenAwakened = 0xD3C; // bool
                constexpr std::ptrdiff_t m_bIsOverrideProp = 0xD3D; // bool
                constexpr std::ptrdiff_t m_fNextCheckDisableMotionContactsTime = 0xD40; // GameTime_t
                constexpr std::ptrdiff_t m_iInitialGlowState = 0xD44; // int32
                constexpr std::ptrdiff_t m_nGlowRange = 0xD48; // int32
                constexpr std::ptrdiff_t m_nGlowRangeMin = 0xD4C; // int32
                constexpr std::ptrdiff_t m_glowColor = 0xD50; // Color
                constexpr std::ptrdiff_t m_bShouldAutoConvertBackFromDebris = 0xD54; // bool
                constexpr std::ptrdiff_t m_bMuteImpactEffects = 0xD55; // bool
                constexpr std::ptrdiff_t m_bAcceptDamageFromHeldObjects = 0xD5F; // bool
                constexpr std::ptrdiff_t m_bEnableUseOutput = 0xD60; // bool
                constexpr std::ptrdiff_t m_CrateType = 0xD64; // CPhysicsProp::CrateType_t
                constexpr std::ptrdiff_t m_strItemClass = 0xD68; // CUtlSymbolLarge[4]
                constexpr std::ptrdiff_t m_nItemCount = 0xD88; // int32[4]
                constexpr std::ptrdiff_t m_bRemovableForAmmoBalancing = 0xD98; // bool
                constexpr std::ptrdiff_t m_bAwake = 0xD99; // bool
            }
            // Parent: CFuncWall
            // Field count: 0
            namespace CFuncWallToggle {
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_SilenceContraptionsDebuffVData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            namespace CCitadel_Ability_Trappers_Bolo {
                constexpr std::ptrdiff_t m_hProjectile = 0xB38; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hNextTarget = 0xB3C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hHitTargets = 0xB40; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_iBounces = 0xB58; // int32
                constexpr std::ptrdiff_t m_bReturning = 0xB5C; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Nano_PredatoryStatueTarget {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_SlowingBullets_Proc {
            }
            // Parent: None
            // Field count: 4
            namespace CCitadel_Modifier_TechCleave__DamageTaken_t {
                constexpr std::ptrdiff_t m_flDamageAmount = 0x0; // float32
                constexpr std::ptrdiff_t m_flTimeToExpire = 0x4; // GameTime_t
                constexpr std::ptrdiff_t m_ProcAbility = 0x8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_pTarget = 0xC; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Mirage_FireBeetles_Buff_VData {
                constexpr std::ptrdiff_t m_CasterBuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_GenericPerson_4 {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityWreckerScrapBlastVData {
                constexpr std::ptrdiff_t m_SprayParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChannelStartParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1720; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Item_Bleeding_Bullets_ActiveVData {
                constexpr std::ptrdiff_t m_BleedModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x648; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_BulletImpactParticle = 0x658; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Stimpak_regen {
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_BlastPush {
                constexpr std::ptrdiff_t m_vPush = 0xC0; // Vector
                constexpr std::ptrdiff_t m_flPushVelocity = 0xCC; // float32
                constexpr std::ptrdiff_t m_flMaxPushVelocity = 0xD0; // float32
                constexpr std::ptrdiff_t m_flMaxPushVelocitySqr = 0xD4; // float32
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityProperty_WeaponDamage {
            }
            // Parent: CEntityComponent
            // Field count: 0
            namespace CCitadelPlayerClipComponent {
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterModifier {
                constexpr std::ptrdiff_t m_iFilterModifier = 0x540; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemAOESilenceAuraVData {
                constexpr std::ptrdiff_t m_empWaveParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Disruptive_Charge {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TargetPracticeDebuffVData {
                constexpr std::ptrdiff_t m_SlowModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BulletResistModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_EMPModifier = 0x628; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_vecStartPos (Vector)
            // NetworkVarNames: m_vecPosition (Vector)
            // NetworkVarNames: m_vecInitialPosition (Vector)
            // NetworkVarNames: m_CastTime (GameTime_t)
            // NetworkVarNames: m_vecDirection (Vector)
            // NetworkVarNames: m_vecLeft (Vector)
            // NetworkVarNames: m_Length (float)
            // NetworkVarNames: m_bTraveling (bool)
            // NetworkVarNames: m_bPreview (bool)
            namespace CCitadel_Ability_FissureWall {
                constexpr std::ptrdiff_t m_vecStartPos = 0xBB8; // Vector
                constexpr std::ptrdiff_t m_vecPosition = 0xBC4; // Vector
                constexpr std::ptrdiff_t m_vecInitialPosition = 0xBD0; // Vector
                constexpr std::ptrdiff_t m_CastTime = 0xBDC; // GameTime_t
                constexpr std::ptrdiff_t m_vecDirection = 0xBE0; // Vector
                constexpr std::ptrdiff_t m_vecLeft = 0xBEC; // Vector
                constexpr std::ptrdiff_t m_Length = 0xBF8; // float32
                constexpr std::ptrdiff_t m_bTraveling = 0xC06; // bool
                constexpr std::ptrdiff_t m_bPreview = 0xC07; // bool
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_LifestrikeGauntlets {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_CheatDeathImmunityVData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffPlayerParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StatusEffect = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIMaterial2>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_StatStealBaseVData {
                constexpr std::ptrdiff_t m_StatStolenDebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_StatStolenBuffModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 6
            namespace CCitadelBotTestNode {
                constexpr std::ptrdiff_t m_eNodeType = 0x4E8; // EBotTestNodeType
                constexpr std::ptrdiff_t m_sNextNode = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_sShootTarget = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hNextNode = 0x500; // CHandle<CCitadelBotTestNode>
                constexpr std::ptrdiff_t m_hShootTarget = 0x504; // CHandle<CCitadelBotTestNode>
                constexpr std::ptrdiff_t m_hLockingEntity = 0x508; // CHandle<CCitadelPlayerPawn>
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CCitadel_Projectile_Pillar {
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CTriggerIcePathVolume {
            }
            // Parent: CCitadelBaseShivAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_flTotalPendingDamage (float)
            namespace CCitadel_Ability_Shiv_Defer_Damage {
                constexpr std::ptrdiff_t m_flTotalPendingDamage = 0xBE0; // float32
                constexpr std::ptrdiff_t m_flLastDeferredDamageApplicationTime = 0xC00; // GameTime_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_IceBeamVData {
                constexpr std::ptrdiff_t m_BeamParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SlowModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildupModifier = 0x1730; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_BuildupProcModifier = 0x1740; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BeamStartSound = 0x1750; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamStopSound = 0x1760; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamPointStartLoopSound = 0x1770; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamPointEndLoopSound = 0x1780; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamPointClosestLoopSound = 0x1790; // CSoundEventName
            }
            // Parent: CBaseEntity
            // Field count: 31
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkUserGroupProxy
            // MNetworkUserGroupProxy
            // MNetworkOverride
            // NetworkVarNames: m_bChanneling (bool)
            // NetworkVarNames: m_bInCastDelay (bool)
            // NetworkVarNames: m_vecImbuedByAbilitiyIDs (EntitySubclassID_t)
            // NetworkVarNames: m_nUpgradeBits (int)
            // NetworkVarNames: m_iBucketID (int)
            // NetworkVarNames: m_bToggleState (bool)
            // NetworkVarNames: m_flCooldownStart (GameTime_t)
            // NetworkVarNames: m_flCooldownEnd (GameTime_t)
            // NetworkVarNames: m_flCastCompletedTime (GameTime_t)
            // NetworkVarNames: m_flChannelStartTime (GameTime_t)
            // NetworkVarNames: m_flCastDelayStartTime (GameTime_t)
            // NetworkVarNames: m_eAbilitySlot (EAbilitySlots_t)
            // NetworkVarNames: m_flPostCastDelayEndTime (GameTime_t)
            // NetworkVarNames: m_iRemainingCharges (int)
            // NetworkVarNames: m_flChargeRechargeStart (GameTime_t)
            // NetworkVarNames: m_flChargeRechargeEnd (GameTime_t)
            // NetworkVarNames: m_flMovementControlActiveTime (GameTime_t)
            // NetworkVarNames: m_flSelectedChangedTime (GameTime_t)
            // NetworkVarNames: m_flAltCastHoldStartTime (GameTime_t)
            // NetworkVarNames: m_flAltCastDoubleTapStartTime (GameTime_t)
            // NetworkVarNames: m_nImbuedAbilityID (AbilityID_t)
            // NetworkVarNames: m_bSelectionModeIsAltMode (bool)
            namespace CCitadelBaseAbility {
                constexpr std::ptrdiff_t m_vecIntrinsicModifiers = 0x5C0; // CUtlVector<CModifierHandleTyped<CCitadelModifier>>
                constexpr std::ptrdiff_t m_pCastDelayAutoModifier = 0x5D8; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_pChannelAutoModifier = 0x5F0; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_strUsedCastGraphParam = 0x608; // CGlobalSymbol
                constexpr std::ptrdiff_t m_nCastParamNeedsResetTick = 0x610; // int32
                constexpr std::ptrdiff_t m_bIsCoolingDownInternal = 0x614; // bool
                constexpr std::ptrdiff_t m_flCancelLockoutTime = 0x618; // GameTime_t
                constexpr std::ptrdiff_t m_bChanneling = 0x638; // bool
                constexpr std::ptrdiff_t m_bInCastDelay = 0x639; // bool
                constexpr std::ptrdiff_t m_vecImbuedByAbilitiyIDs = 0x640; // CNetworkUtlVectorBase<CUtlStringToken>
                constexpr std::ptrdiff_t m_nUpgradeBits = 0x658; // int32
                constexpr std::ptrdiff_t m_iBucketID = 0x65C; // int32
                constexpr std::ptrdiff_t m_bToggleState = 0x660; // bool
                constexpr std::ptrdiff_t m_flCooldownStart = 0x664; // GameTime_t
                constexpr std::ptrdiff_t m_flCooldownEnd = 0x668; // GameTime_t
                constexpr std::ptrdiff_t m_flCastCompletedTime = 0x66C; // GameTime_t
                constexpr std::ptrdiff_t m_flChannelStartTime = 0x670; // GameTime_t
                constexpr std::ptrdiff_t m_flCastDelayStartTime = 0x674; // GameTime_t
                constexpr std::ptrdiff_t m_eAbilitySlot = 0x678; // EAbilitySlots_t
                constexpr std::ptrdiff_t m_flPostCastDelayEndTime = 0x67C; // GameTime_t
                constexpr std::ptrdiff_t m_iRemainingCharges = 0x680; // int32
                constexpr std::ptrdiff_t m_flChargeRechargeStart = 0x684; // GameTime_t
                constexpr std::ptrdiff_t m_flChargeRechargeEnd = 0x688; // GameTime_t
                constexpr std::ptrdiff_t m_flMovementControlActiveTime = 0x68C; // GameTime_t
                constexpr std::ptrdiff_t m_flSelectedChangedTime = 0x690; // GameTime_t
                constexpr std::ptrdiff_t m_flAltCastHoldStartTime = 0x694; // GameTime_t
                constexpr std::ptrdiff_t m_flAltCastDoubleTapStartTime = 0x698; // GameTime_t
                constexpr std::ptrdiff_t m_nImbuedAbilityID = 0x69C; // CUtlStringToken
                constexpr std::ptrdiff_t m_bSelectionModeIsAltMode = 0x6A0; // bool
                constexpr std::ptrdiff_t m_vecEnemyHeroesDamaged = 0x6A8; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_flPreviousEffectiveCooldown = 0x6C0; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_MageWalk {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_ChargeState (EViscousChargedGunState)
            // NetworkVarNames: m_nClipConsumed (float)
            // NetworkVarNames: m_bIsCharging (bool)
            // NetworkVarNames: m_bIsToggled (bool)
            namespace CCitadel_Ability_ViscousWeapon_Alt {
                constexpr std::ptrdiff_t m_ChargeState = 0xB00; // EViscousChargedGunState
                constexpr std::ptrdiff_t m_nClipConsumed = 0xB04; // float32
                constexpr std::ptrdiff_t m_bIsCharging = 0xB08; // bool
                constexpr std::ptrdiff_t m_bIsToggled = 0xB09; // bool
                constexpr std::ptrdiff_t m_fxChargingParticle = 0xB0C; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flLastBulletConsumedTime = 0xB18; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ColdFrontAOE {
                constexpr std::ptrdiff_t m_vecDamagedTargets = 0xC0; // CUtlVector<CBaseEntity*>
            }
            // Parent: CBaseModelEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flBulletTimeScale (float)
            // NetworkVarNames: m_flProjectileTimeScale (float)
            // NetworkVarNames: m_flExpireTime (GameTime_t)
            // NetworkVarNames: m_flStopDuration (float)
            namespace CCitadelBulletTimeWarp {
                constexpr std::ptrdiff_t m_flBulletTimeScale = 0x7C0; // float32
                constexpr std::ptrdiff_t m_flProjectileTimeScale = 0x7C4; // float32
                constexpr std::ptrdiff_t m_flExpireTime = 0x7C8; // GameTime_t
                constexpr std::ptrdiff_t m_flStopDuration = 0x7CC; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierChargedTackleActiveVData {
                constexpr std::ptrdiff_t m_TackleParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PullEnemiesParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_AfterburnWatcher {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_TriggerTowerRegen {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Item_HealthNova {
                constexpr std::ptrdiff_t m_flAmountPerSecond = 0xC0; // float32
            }
            // Parent: CCitadel_Modifier_Intrinsic_BaseVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MagicClarityWatcherVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_TossUp {
                constexpr std::ptrdiff_t m_bForceApplied = 0xC0; // bool
                constexpr std::ptrdiff_t m_bLandedOnGround = 0xC1; // bool
                constexpr std::ptrdiff_t m_vTossUpForce = 0xC4; // Vector
                constexpr std::ptrdiff_t m_flCurrentVelocityScale = 0xD0; // float32
            }
            // Parent: CFuncLadder
            // Field count: 0
            namespace CFuncLadderAlias_func_useableladder {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_AbilityLifeSteal {
            }
            // Parent: CCitadel_Item_TrackingProjectileApplyModifier
            // Field count: 0
            namespace CCitadel_Item_RejuvTrackingProjectile {
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ItemPickupPunchableVData {
                constexpr std::ptrdiff_t m_flPhysicsRadius = 0x608; // float32
                constexpr std::ptrdiff_t m_IsDroppingParticle = 0x610; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_IsPunchableParticle = 0x6F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_IsFrozenParticle = 0x7D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_NearRejuvAuraModifier = 0x8B0; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CBaseTrigger
            // Field count: 14
            namespace CTriggerSndSosOpvar {
                constexpr std::ptrdiff_t m_hTouchingPlayers = 0x990; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_flPosition = 0x9A8; // Vector
                constexpr std::ptrdiff_t m_flCenterSize = 0x9B4; // float32
                constexpr std::ptrdiff_t m_flMinVal = 0x9B8; // float32
                constexpr std::ptrdiff_t m_flMaxVal = 0x9BC; // float32
                constexpr std::ptrdiff_t m_opvarName = 0x9C0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_stackName = 0x9C8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_operatorName = 0x9D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bVolIs2D = 0x9D8; // bool
                constexpr std::ptrdiff_t m_opvarNameChar = 0x9D9; // char[256]
                constexpr std::ptrdiff_t m_stackNameChar = 0xAD9; // char[256]
                constexpr std::ptrdiff_t m_operatorNameChar = 0xBD9; // char[256]
                constexpr std::ptrdiff_t m_VecNormPos = 0xCDC; // Vector
                constexpr std::ptrdiff_t m_flNormCenterSize = 0xCE8; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Astro_Rifle_Debuff {
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 4
            namespace CCitadel_Modifier_LashGrappleEnemy_Debuff {
                constexpr std::ptrdiff_t m_vCrashDir = 0xC8; // Vector
                constexpr std::ptrdiff_t m_vLiftTarget = 0xD4; // Vector
                constexpr std::ptrdiff_t m_flStartTime = 0xE0; // GameTime_t
                constexpr std::ptrdiff_t m_bCrashingDown = 0xE4; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Healbane_Debuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_RespawnCreditVData {
                constexpr std::ptrdiff_t m_eRespawnMechanic = 0x608; // ERejuvenatorRespawnMechanic
                constexpr std::ptrdiff_t m_flRespawnDelay = 0x60C; // float32
                constexpr std::ptrdiff_t m_flBonusClipSize = 0x610; // float32
                constexpr std::ptrdiff_t m_flBonusFirerate = 0x614; // float32
                constexpr std::ptrdiff_t m_flBonusHealth = 0x618; // float32
                constexpr std::ptrdiff_t m_flBonusMoveSpeedMeterPerSecond = 0x61C; // float32
                constexpr std::ptrdiff_t m_sExpireSound = 0x620; // CSoundEventName
            }
            // Parent: CDynamicProp
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_strDefaultSkin (CUtlString)
            // NetworkVarNames: m_strFriendlySkin (CUtlString)
            // NetworkVarNames: m_strEnemySkin (CUtlString)
            // NetworkVarNames: m_bIsWorld (bool)
            namespace CCitadel_DynamicProp {
                constexpr std::ptrdiff_t m_strDefaultSkin = 0xD08; // CUtlString
                constexpr std::ptrdiff_t m_strFriendlySkin = 0xD10; // CUtlString
                constexpr std::ptrdiff_t m_strEnemySkin = 0xD18; // CUtlString
                constexpr std::ptrdiff_t m_bIsWorld = 0xD20; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CItem_FleetfootBoots {
            }
            // Parent: CCitadel_Modifier_Silenced
            // Field count: 2
            namespace CCitadel_Modifier_Bubble {
                constexpr std::ptrdiff_t m_flDampingFactor = 0xC8; // float32
                constexpr std::ptrdiff_t m_ParticleIndex = 0x1E8; // ParticleIndex_t
            }
            // Parent: CBaseEntity
            // Field count: 73
            namespace CScriptedSequence {
                constexpr std::ptrdiff_t m_iszEntry = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszPreIdle = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszPlay = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszPostIdle = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszModifierToAddOnPlay = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszNextScript = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszEntity = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSyncGroup = 0x520; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nMoveTo = 0x528; // ScriptedMoveTo_t
                constexpr std::ptrdiff_t m_nMoveToGait = 0x52C; // MovementGait_t
                constexpr std::ptrdiff_t m_nHeldWeaponBehavior = 0x530; // ScriptedHeldWeaponBehavior_t
                constexpr std::ptrdiff_t m_bIsPlayingPreIdle = 0x534; // bool
                constexpr std::ptrdiff_t m_bIsPlayingEntry = 0x535; // bool
                constexpr std::ptrdiff_t m_bIsPlayingAction = 0x536; // bool
                constexpr std::ptrdiff_t m_bIsPlayingPostIdle = 0x537; // bool
                constexpr std::ptrdiff_t m_bDontRotateOther = 0x538; // bool
                constexpr std::ptrdiff_t m_bIsRepeatable = 0x539; // bool
                constexpr std::ptrdiff_t m_bShouldLeaveCorpse = 0x53A; // bool
                constexpr std::ptrdiff_t m_bStartOnSpawn = 0x53B; // bool
                constexpr std::ptrdiff_t m_bDisallowInterrupts = 0x53C; // bool
                constexpr std::ptrdiff_t m_bCanOverrideNPCState = 0x53D; // bool
                constexpr std::ptrdiff_t m_bDontTeleportAtEnd = 0x53E; // bool
                constexpr std::ptrdiff_t m_bHighPriority = 0x53F; // bool
                constexpr std::ptrdiff_t m_bHideDebugComplaints = 0x540; // bool
                constexpr std::ptrdiff_t m_bContinueOnDeath = 0x541; // bool
                constexpr std::ptrdiff_t m_bLoopPreIdleSequence = 0x542; // bool
                constexpr std::ptrdiff_t m_bLoopActionSequence = 0x543; // bool
                constexpr std::ptrdiff_t m_bLoopPostIdleSequence = 0x544; // bool
                constexpr std::ptrdiff_t m_bSynchPostIdles = 0x545; // bool
                constexpr std::ptrdiff_t m_bIgnoreLookAt = 0x546; // bool
                constexpr std::ptrdiff_t m_bIgnoreGravity = 0x547; // bool
                constexpr std::ptrdiff_t m_bDisableNPCCollisions = 0x548; // bool
                constexpr std::ptrdiff_t m_bKeepAnimgraphLockedPost = 0x549; // bool
                constexpr std::ptrdiff_t m_bDontAddModifiers = 0x54A; // bool
                constexpr std::ptrdiff_t m_bDisableAimingWhileMoving = 0x54B; // bool
                constexpr std::ptrdiff_t m_flRadius = 0x54C; // float32
                constexpr std::ptrdiff_t m_flRepeat = 0x550; // float32
                constexpr std::ptrdiff_t m_flPlayAnimFadeInTime = 0x554; // float32
                constexpr std::ptrdiff_t m_flMoveInterpTime = 0x558; // float32
                constexpr std::ptrdiff_t m_flAngRate = 0x55C; // float32
                constexpr std::ptrdiff_t m_bWaitUntilMoveCompletesToStartAnimation = 0x560; // bool
                constexpr std::ptrdiff_t m_nNotReadySequenceCount = 0x564; // int32
                constexpr std::ptrdiff_t m_startTime = 0x568; // GameTime_t
                constexpr std::ptrdiff_t m_bWaitForBeginSequence = 0x56C; // bool
                constexpr std::ptrdiff_t m_saved_effects = 0x570; // int32
                constexpr std::ptrdiff_t m_savedFlags = 0x574; // int32
                constexpr std::ptrdiff_t m_savedCollisionGroup = 0x578; // int32
                constexpr std::ptrdiff_t m_bInterruptable = 0x57C; // bool
                constexpr std::ptrdiff_t m_sequenceStarted = 0x57D; // bool
                constexpr std::ptrdiff_t m_bPositionRelativeToOtherEntity = 0x57E; // bool
                constexpr std::ptrdiff_t m_hTargetEnt = 0x580; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hNextCine = 0x584; // CHandle<CScriptedSequence>
                constexpr std::ptrdiff_t m_bThinking = 0x588; // bool
                constexpr std::ptrdiff_t m_bInitiatedSelfDelete = 0x589; // bool
                constexpr std::ptrdiff_t m_bIsTeleportingDueToMoveTo = 0x58A; // bool
                constexpr std::ptrdiff_t m_bAllowCustomInterruptConditions = 0x58B; // bool
                constexpr std::ptrdiff_t m_hForcedTarget = 0x58C; // CHandle<CBaseAnimGraph>
                constexpr std::ptrdiff_t m_bDontCancelOtherSequences = 0x590; // bool
                constexpr std::ptrdiff_t m_bForceSynch = 0x591; // bool
                constexpr std::ptrdiff_t m_bPreventUpdateYawOnFinish = 0x592; // bool
                constexpr std::ptrdiff_t m_bEnsureOnNavmeshOnFinish = 0x593; // bool
                constexpr std::ptrdiff_t m_onDeathBehavior = 0x594; // ScriptedOnDeath_t
                constexpr std::ptrdiff_t m_ConflictResponse = 0x598; // ScriptedConflictResponse_t
                constexpr std::ptrdiff_t m_OnBeginSequence = 0x5A0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnActionStartOrLoop = 0x5C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEndSequence = 0x5F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPostIdleEndSequence = 0x618; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnCancelSequence = 0x640; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnCancelFailedSequence = 0x668; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnScriptEvent = 0x690; // CEntityIOOutput[8]
                constexpr std::ptrdiff_t m_matOtherToMain = 0x7D0; // CTransform
                constexpr std::ptrdiff_t m_hInteractionMainEntity = 0x7F0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iPlayerDeathBehavior = 0x7F4; // int32
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVandalSurgeVData {
                constexpr std::ptrdiff_t m_LiftParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStartSound = 0x7C8; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Viper_Ability04 {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_WreckerSalvage {
                constexpr std::ptrdiff_t m_flDPS = 0xC0; // float32
                constexpr std::ptrdiff_t m_vLiftTarget = 0xC4; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TargetPracticeEnemyVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildupCompleteModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuildupModifier = 0x628; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_TargetParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x718; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HeadParticle = 0x7F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strTargetHitSound = 0x8D8; // CSoundEventName
                constexpr std::ptrdiff_t m_strTargetHeadShotHitSound = 0x8E8; // CSoundEventName
                constexpr std::ptrdiff_t m_strTargetCompleteSound = 0x8F8; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Lash_Flog {
                constexpr std::ptrdiff_t m_SandEffect = 0xC18; // ParticleIndex_t
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_SiphonBulletsVData {
                constexpr std::ptrdiff_t m_PermanentHealthLoss = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_ChainLightningEffectVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Galvanic_Storm_EffectVData {
                constexpr std::ptrdiff_t m_BuffChainParticle = 0x708; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CNodeEnt
            // Field count: 0
            namespace CNodeEnt_InfoNodeClimb {
            }
            // Parent: CModelPointEntity
            // Field count: 30
            //
            // Metadata:
            // NetworkVarNames: m_hTargetEntity (CHandle<CBaseEntity>)
            // NetworkVarNames: m_bState (bool)
            // NetworkVarNames: m_bAlwaysUpdate (bool)
            // NetworkVarNames: m_flLightFOV (float32)
            // NetworkVarNames: m_bEnableShadows (bool)
            // NetworkVarNames: m_bSimpleProjection (bool)
            // NetworkVarNames: m_bLightOnlyTarget (bool)
            // NetworkVarNames: m_bLightWorld (bool)
            // NetworkVarNames: m_bCameraSpace (bool)
            // NetworkVarNames: m_flBrightnessScale (float32)
            // NetworkVarNames: m_LightColor (Color)
            // NetworkVarNames: m_flIntensity (float32)
            // NetworkVarNames: m_flLinearAttenuation (float32)
            // NetworkVarNames: m_flQuadraticAttenuation (float32)
            // NetworkVarNames: m_bVolumetric (bool)
            // NetworkVarNames: m_flNoiseStrength (float32)
            // NetworkVarNames: m_flFlashlightTime (float32)
            // NetworkVarNames: m_nNumPlanes (uint32)
            // NetworkVarNames: m_flPlaneOffset (float32)
            // NetworkVarNames: m_flVolumetricIntensity (float32)
            // NetworkVarNames: m_flColorTransitionTime (float32)
            // NetworkVarNames: m_flAmbient (float32)
            // NetworkVarNames: m_SpotlightTextureName (char)
            // NetworkVarNames: m_nSpotlightTextureFrame (int32)
            // NetworkVarNames: m_nShadowQuality (uint32)
            // NetworkVarNames: m_flNearZ (float32)
            // NetworkVarNames: m_flFarZ (float32)
            // NetworkVarNames: m_flProjectionSize (float32)
            // NetworkVarNames: m_flRotation (float32)
            // NetworkVarNames: m_bFlipHorizontal (bool)
            namespace CEnvProjectedTexture {
                constexpr std::ptrdiff_t m_hTargetEntity = 0x7C0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bState = 0x7C4; // bool
                constexpr std::ptrdiff_t m_bAlwaysUpdate = 0x7C5; // bool
                constexpr std::ptrdiff_t m_flLightFOV = 0x7C8; // float32
                constexpr std::ptrdiff_t m_bEnableShadows = 0x7CC; // bool
                constexpr std::ptrdiff_t m_bSimpleProjection = 0x7CD; // bool
                constexpr std::ptrdiff_t m_bLightOnlyTarget = 0x7CE; // bool
                constexpr std::ptrdiff_t m_bLightWorld = 0x7CF; // bool
                constexpr std::ptrdiff_t m_bCameraSpace = 0x7D0; // bool
                constexpr std::ptrdiff_t m_flBrightnessScale = 0x7D4; // float32
                constexpr std::ptrdiff_t m_LightColor = 0x7D8; // Color
                constexpr std::ptrdiff_t m_flIntensity = 0x7DC; // float32
                constexpr std::ptrdiff_t m_flLinearAttenuation = 0x7E0; // float32
                constexpr std::ptrdiff_t m_flQuadraticAttenuation = 0x7E4; // float32
                constexpr std::ptrdiff_t m_bVolumetric = 0x7E8; // bool
                constexpr std::ptrdiff_t m_flNoiseStrength = 0x7EC; // float32
                constexpr std::ptrdiff_t m_flFlashlightTime = 0x7F0; // float32
                constexpr std::ptrdiff_t m_nNumPlanes = 0x7F4; // uint32
                constexpr std::ptrdiff_t m_flPlaneOffset = 0x7F8; // float32
                constexpr std::ptrdiff_t m_flVolumetricIntensity = 0x7FC; // float32
                constexpr std::ptrdiff_t m_flColorTransitionTime = 0x800; // float32
                constexpr std::ptrdiff_t m_flAmbient = 0x804; // float32
                constexpr std::ptrdiff_t m_SpotlightTextureName = 0x808; // char[512]
                constexpr std::ptrdiff_t m_nSpotlightTextureFrame = 0xA08; // int32
                constexpr std::ptrdiff_t m_nShadowQuality = 0xA0C; // uint32
                constexpr std::ptrdiff_t m_flNearZ = 0xA10; // float32
                constexpr std::ptrdiff_t m_flFarZ = 0xA14; // float32
                constexpr std::ptrdiff_t m_flProjectionSize = 0xA18; // float32
                constexpr std::ptrdiff_t m_flRotation = 0xA1C; // float32
                constexpr std::ptrdiff_t m_bFlipHorizontal = 0xA20; // bool
            }
            // Parent: CBaseEntity
            // Field count: 7
            namespace CPointOrient {
                constexpr std::ptrdiff_t m_iszSpawnTargetName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hTarget = 0x4F0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bActive = 0x4F4; // bool
                constexpr std::ptrdiff_t m_nGoalDirection = 0x4F8; // PointOrientGoalDirectionType_t
                constexpr std::ptrdiff_t m_nConstraint = 0x4FC; // PointOrientConstraint_t
                constexpr std::ptrdiff_t m_flMaxTurnRate = 0x500; // float32
                constexpr std::ptrdiff_t m_flLastGameTime = 0x504; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_WarpStone_Caster {
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Succor_MoveVData {
                constexpr std::ptrdiff_t m_PullSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_flPullSpeedMin = 0x618; // float32
                constexpr std::ptrdiff_t m_flPullSpeedMax = 0x61C; // float32
                constexpr std::ptrdiff_t m_flPullDistanceMin = 0x620; // float32
                constexpr std::ptrdiff_t m_flPullDistanceMax = 0x624; // float32
            }
            // Parent: CAI_CitadelNPC
            // Field count: 0
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            namespace CNPC_FlyingDrone {
            }
            // Parent: CDynamicProp
            // Field count: 0
            namespace CDynamicPropAlias_prop_dynamic_override {
            }
            // Parent: CLogicalEntity
            // Field count: 3
            namespace CSceneListManager {
                constexpr std::ptrdiff_t m_hListManagers = 0x4E8; // CUtlVector<CHandle<CSceneListManager>>
                constexpr std::ptrdiff_t m_iszScenes = 0x500; // CUtlSymbolLarge[16]
                constexpr std::ptrdiff_t m_hScenes = 0x580; // CHandle<CBaseEntity>[16]
            }
            // Parent: CPhysConstraint
            // Field count: 6
            namespace CSplineConstraint {
                constexpr std::ptrdiff_t m_vAnchorOffsetRestore = 0x5A8; // Vector
                constexpr std::ptrdiff_t m_bEnableLateralConstraint = 0x5B4; // bool
                constexpr std::ptrdiff_t m_bEnableVerticalConstraint = 0x5B5; // bool
                constexpr std::ptrdiff_t m_bEnableAngularConstraint = 0x5B6; // bool
                constexpr std::ptrdiff_t m_flLinearFrequency = 0x5B8; // float32
                constexpr std::ptrdiff_t m_flLinarDampingRatio = 0x5BC; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Trapper_StealSpiritDebuff {
            }
            // Parent: CCitadel_Ability_ZipLine
            // Field count: 0
            namespace CCitadel_Ability_TrooperZipLine {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Upgrade_Headhunter_HeadshotBuff {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_DetentionAmmoVData {
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x638; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImmunityModifier = 0x658; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TracerParticle = 0x668; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityPropertySingleStat {
            }
            // Parent: CDynamicProp
            // Field count: 0
            namespace CDynamicPropAlias_dynamic_prop {
            }
            // Parent: CTriggerNeutralShield
            // Field count: 0
            namespace CTriggerNeutralIdles {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_UtilityUpgrade_AOESmokeBomb {
            }
            // Parent: CPointEntity
            // Field count: 4
            namespace CNPCSpawnDestination {
                constexpr std::ptrdiff_t m_ReuseDelay = 0x4E8; // float32
                constexpr std::ptrdiff_t m_RenameNPC = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_TimeNextAvailable = 0x4F8; // GameTime_t
                constexpr std::ptrdiff_t m_OnSpawnNPC = 0x500; // CEntityIOOutput
            }
            // Parent: CCitadel_Modifier_Base_BuildupVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Viper_VenomVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x620; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_SleepDagger {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_FlameDash {
                constexpr std::ptrdiff_t m_vLastDropZonePos = 0xC0; // Vector
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityProperty_KineticCarbine {
            }
            // Parent: None
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_Handle (ModelConfigHandle_t)
            // NetworkVarNames: m_Name (string_t)
            // NetworkVarNames: m_AssociatedEntities (CHandle<CBaseModelEntity>)
            // NetworkVarNames: m_AssociatedEntityNames (string_t)
            namespace ActiveModelConfig_t {
                constexpr std::ptrdiff_t m_Handle = 0x30; // ModelConfigHandle_t
                constexpr std::ptrdiff_t m_Name = 0x38; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_AssociatedEntities = 0x40; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                constexpr std::ptrdiff_t m_AssociatedEntityNames = 0x58; // CNetworkUtlVectorBase<CUtlSymbolLarge>
            }
            // Parent: CAI_CitadelNPC
            // Field count: 0
            namespace CCitadel_PestilenceDroneDispenser {
            }
            // Parent: CBaseToggle
            // Field count: 5
            namespace CBasePlatTrain {
                constexpr std::ptrdiff_t m_NoiseMoving = 0x840; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_NoiseArrived = 0x848; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_volume = 0x858; // float32
                constexpr std::ptrdiff_t m_flTWidth = 0x85C; // float32
                constexpr std::ptrdiff_t m_flTLength = 0x860; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Mirage_Tornado_Lift_VData {
                constexpr std::ptrdiff_t m_HoldInPlaceModifier = 0x608; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_LiftParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Fealty {
                constexpr std::ptrdiff_t m_hTarget = 0xB00; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_SummonGangster {
                constexpr std::ptrdiff_t m_vecGangsters = 0xB00; // CUtlVector<CHandle<CNPC_YakuzaGangster>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Bull_Leap_Boosting {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ZipLine_Boost {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_CheaterCurse {
            }
            // Parent: CTriggerMultiple
            // Field count: 3
            namespace CDynamicNavConnectionsVolume {
                constexpr std::ptrdiff_t m_iszConnectionTarget = 0x9B8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vecConnections = 0x9C0; // CUtlVector<DynamicVolumeDef_t>
                constexpr std::ptrdiff_t m_bConnectionsEnabled = 0x9D8; // bool
            }
            // Parent: CMarkupVolumeTagged
            // Field count: 0
            namespace CSimpleMarkupVolumeTagged {
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CCitadelClimbRopeTrigger {
                constexpr std::ptrdiff_t m_tModifier = 0x990; // CUtlStringToken
            }
            // Parent: CCitadelModifierAura
            // Field count: 4
            namespace CCitadel_Modifier_Thumper_2_Aura {
                constexpr std::ptrdiff_t m_vecOrigin = 0xE0; // Vector
                constexpr std::ptrdiff_t m_vecWorldSpaceMins = 0xEC; // Vector
                constexpr std::ptrdiff_t m_vecWorldSpaceMaxs = 0xF8; // Vector
                constexpr std::ptrdiff_t m_flBarbedWireAuraRadius = 0x104; // float32
            }
            // Parent: CCitadelProjectile
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            namespace CCitadel_Projectile_Guided_Arrow {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x870; // CCitadelMinimapComponent
            }
            // Parent: CPhysHinge
            // Field count: 0
            namespace CPhysHingeAlias_phys_hinge_local {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierIntimidatedVData {
                constexpr std::ptrdiff_t m_EffectParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Upgrade_AerialAssualtVData {
                constexpr std::ptrdiff_t m_WatcherModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_LaunchParticle = 0x15B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Unstoppable {
                constexpr std::ptrdiff_t m_vecCheckedModifiers = 0xC0; // CUtlVector<CCitadelModifier*>
            }
            // Parent: CCitadelProjectile
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            namespace CCitadel_Projectile_Wrecker_Teleport {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x870; // CCitadelMinimapComponent
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVData_SetMoveType {
                constexpr std::ptrdiff_t m_nMoveType = 0x608; // MoveType_t
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CTankTargetChange {
                constexpr std::ptrdiff_t m_newTarget = 0x4E8; // CVariantBase<CVariantDefaultAllocator>
                constexpr std::ptrdiff_t m_newTargetName = 0x4F8; // CUtlSymbolLarge
            }
            // Parent: CLogicalEntity
            // Field count: 6
            namespace CLogicCompare {
                constexpr std::ptrdiff_t m_flInValue = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flCompareValue = 0x4EC; // float32
                constexpr std::ptrdiff_t m_OnLessThan = 0x4F0; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnEqualTo = 0x518; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnNotEqualTo = 0x540; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnGreaterThan = 0x568; // CEntityOutputTemplate<float32>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flBombBonus (float)
            namespace CCitadel_Ability_StickyBomb {
                constexpr std::ptrdiff_t m_flBombBonus = 0xB08; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_LightningBullet {
            }
            // Parent: CCitadel_UtilityUpgrade_RocketBootsVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_UtilityUpgrade_RocketBoosterVData {
                constexpr std::ptrdiff_t m_LandingParticle = 0x1698; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AoEPreviewParticle = 0x1778; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DropDownStartParticle = 0x1858; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DropDownStartSound = 0x1938; // CSoundEventName
                constexpr std::ptrdiff_t m_LandingSound = 0x1948; // CSoundEventName
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1958; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flSlamEnabledTime = 0x1968; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Magic_Clarity_BuffVData {
                constexpr std::ptrdiff_t m_VisualModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_AcolytesGlove_VData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_SwingParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: None
            // Field count: 42
            //
            // Metadata:
            // NetworkVarNames: m_iLevel (int32)
            // NetworkVarNames: m_iMaxAmmo (int32)
            // NetworkVarNames: m_iHealthMax (int32)
            // NetworkVarNames: m_flHealthRegen (float)
            // NetworkVarNames: m_flRespawnTime (GameTime_t)
            // NetworkVarNames: m_nHeroID (HeroID_t)
            // NetworkVarNames: m_iGoldNetWorth (int32)
            // NetworkVarNames: m_iAPNetWorth (int32)
            // NetworkVarNames: m_iCreepGold (int32)
            // NetworkVarNames: m_iCreepGoldSoloBonus (int32)
            // NetworkVarNames: m_iCreepGoldKill (int32)
            // NetworkVarNames: m_iCreepGoldAirOrb (int32)
            // NetworkVarNames: m_iCreepGoldGroundOrb (int32)
            // NetworkVarNames: m_iCreepGoldDeny (int32)
            // NetworkVarNames: m_iCreepGoldNeutral (int32)
            // NetworkVarNames: m_iFarmBaseline (int32)
            // NetworkVarNames: m_iHealth (int32)
            // NetworkVarNames: m_iPlayerKills (int32)
            // NetworkVarNames: m_iPlayerAssists (int32)
            // NetworkVarNames: m_iDeaths (int32)
            // NetworkVarNames: m_iDenies (int32)
            // NetworkVarNames: m_iLastHits (int32)
            // NetworkVarNames: m_bAlive (bool)
            // NetworkVarNames: m_nHeroDraftPosition (int32)
            // NetworkVarNames: m_bUltimateTrained (bool)
            // NetworkVarNames: m_flUltimateCooldownStart (GameTime_t)
            // NetworkVarNames: m_flUltimateCooldownEnd (GameTime_t)
            // NetworkVarNames: m_bHasRejuvenator (bool)
            // NetworkVarNames: m_bHasRebirth (bool)
            // NetworkVarNames: m_bFlaggedAsCheater (bool)
            // NetworkVarNames: m_iHeroDamage (int32)
            // NetworkVarNames: m_iHeroHealing (int32)
            // NetworkVarNames: m_iSelfHealing (int32)
            // NetworkVarNames: m_iObjectiveDamage (int32)
            // NetworkVarNames: m_nHeroAbilityUpgradeBits (int32)
            // NetworkVarNames: m_vecUpgrades (EntitySubclassID_t)
            // NetworkVarNames: m_vecBonusCounterAbilities (EntitySubclassID_t)
            // NetworkVarNames: m_vecBonusCounterValues (int32)
            // NetworkVarNames: m_tHeldItem (AbilityID_t)
            // NetworkVarNames: m_vecImbuements (ItemImbuementPair_t)
            // NetworkVarNames: m_vecDynamicAbilityValues (DynamicAbilityValues_t)
            // NetworkVarNames: m_vecStatViewerModifierValues (StatViewerModifierValues_t)
            namespace PlayerDataGlobal_t {
                constexpr std::ptrdiff_t m_iLevel = 0x8; // int32
                constexpr std::ptrdiff_t m_iMaxAmmo = 0xC; // int32
                constexpr std::ptrdiff_t m_iHealthMax = 0x10; // int32
                constexpr std::ptrdiff_t m_flHealthRegen = 0x14; // float32
                constexpr std::ptrdiff_t m_flRespawnTime = 0x18; // GameTime_t
                constexpr std::ptrdiff_t m_nHeroID = 0x1C; // HeroID_t
                constexpr std::ptrdiff_t m_iGoldNetWorth = 0x20; // int32
                constexpr std::ptrdiff_t m_iAPNetWorth = 0x24; // int32
                constexpr std::ptrdiff_t m_iCreepGold = 0x28; // int32
                constexpr std::ptrdiff_t m_iCreepGoldSoloBonus = 0x2C; // int32
                constexpr std::ptrdiff_t m_iCreepGoldKill = 0x30; // int32
                constexpr std::ptrdiff_t m_iCreepGoldAirOrb = 0x34; // int32
                constexpr std::ptrdiff_t m_iCreepGoldGroundOrb = 0x38; // int32
                constexpr std::ptrdiff_t m_iCreepGoldDeny = 0x3C; // int32
                constexpr std::ptrdiff_t m_iCreepGoldNeutral = 0x40; // int32
                constexpr std::ptrdiff_t m_iFarmBaseline = 0x44; // int32
                constexpr std::ptrdiff_t m_iHealth = 0x48; // int32
                constexpr std::ptrdiff_t m_iPlayerKills = 0x4C; // int32
                constexpr std::ptrdiff_t m_iPlayerAssists = 0x50; // int32
                constexpr std::ptrdiff_t m_iDeaths = 0x54; // int32
                constexpr std::ptrdiff_t m_iDenies = 0x58; // int32
                constexpr std::ptrdiff_t m_iLastHits = 0x5C; // int32
                constexpr std::ptrdiff_t m_bAlive = 0x60; // bool
                constexpr std::ptrdiff_t m_nHeroDraftPosition = 0x64; // int32
                constexpr std::ptrdiff_t m_bUltimateTrained = 0x68; // bool
                constexpr std::ptrdiff_t m_flUltimateCooldownStart = 0x6C; // GameTime_t
                constexpr std::ptrdiff_t m_flUltimateCooldownEnd = 0x70; // GameTime_t
                constexpr std::ptrdiff_t m_bHasRejuvenator = 0x74; // bool
                constexpr std::ptrdiff_t m_bHasRebirth = 0x75; // bool
                constexpr std::ptrdiff_t m_bFlaggedAsCheater = 0x76; // bool
                constexpr std::ptrdiff_t m_iHeroDamage = 0x78; // int32
                constexpr std::ptrdiff_t m_iHeroHealing = 0x7C; // int32
                constexpr std::ptrdiff_t m_iSelfHealing = 0x80; // int32
                constexpr std::ptrdiff_t m_iObjectiveDamage = 0x84; // int32
                constexpr std::ptrdiff_t m_nHeroAbilityUpgradeBits = 0x88; // int32[4]
                constexpr std::ptrdiff_t m_vecUpgrades = 0x98; // CNetworkUtlVectorBase<CUtlStringToken>
                constexpr std::ptrdiff_t m_vecBonusCounterAbilities = 0xB0; // CNetworkUtlVectorBase<CUtlStringToken>
                constexpr std::ptrdiff_t m_vecBonusCounterValues = 0xC8; // CNetworkUtlVectorBase<int32>
                constexpr std::ptrdiff_t m_tHeldItem = 0xE0; // CUtlStringToken
                constexpr std::ptrdiff_t m_vecImbuements = 0xE8; // CUtlVectorEmbeddedNetworkVar<ItemImbuementPair_t>
                constexpr std::ptrdiff_t m_vecDynamicAbilityValues = 0x150; // CUtlVectorEmbeddedNetworkVar<DynamicAbilityValues_t>
                constexpr std::ptrdiff_t m_vecStatViewerModifierValues = 0x1B8; // CUtlVectorEmbeddedNetworkVar<StatViewerModifierValues_t>
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CCitadelMinimapBoundary {
            }
            // Parent: CLogicalEntity
            // Field count: 7
            namespace CLogicRelay {
                constexpr std::ptrdiff_t m_OnTrigger = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnSpawn = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bDisabled = 0x538; // bool
                constexpr std::ptrdiff_t m_bWaitForRefire = 0x539; // bool
                constexpr std::ptrdiff_t m_bTriggerOnce = 0x53A; // bool
                constexpr std::ptrdiff_t m_bFastRetrigger = 0x53B; // bool
                constexpr std::ptrdiff_t m_bPassthoughCaller = 0x53C; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Mirage_Tornado_VData {
                constexpr std::ptrdiff_t m_TornadoCastParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CasterModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_WhirlwindEvasionModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TornadoAura = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_GrenadeTrailModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_cameraSequenceTravelingInTornado = 0x1680; // CitadelCameraOperationsSequence_t
            }
            // Parent: CCitadelBaseYamatoAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_nPowerLevel (int)
            namespace CCitadel_Ability_PowerSlash {
                constexpr std::ptrdiff_t m_nPowerLevel = 0xB14; // int32
                constexpr std::ptrdiff_t m_nCastParticle = 0xB18; // ParticleIndex_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Bomber_Ability02 {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_HealthSwap {
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 0
            namespace CTier3BossAbility {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Base {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_nFastFireEndTime (GameTime_t)
            namespace CCitadel_WeaponUpgrade_BurstFire {
                constexpr std::ptrdiff_t m_nFastFireEndTime = 0xB20; // GameTime_t
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_HealOnLevel {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_AnimalCurse {
                constexpr std::ptrdiff_t m_pOriginalModel = 0x130; // CWeakHandle<InfoForResourceTypeCModel>
                constexpr std::ptrdiff_t m_flOriginalModelScale = 0x138; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Synth_Barrage_Caster {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CAbility_Synth_Pulse {
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_VacuumAuraTargetModifierVData {
                constexpr std::ptrdiff_t m_flOuterSpeedScale = 0x6E8; // float32
                constexpr std::ptrdiff_t m_flSpeedScaleBias = 0x6EC; // float32
                constexpr std::ptrdiff_t m_TargetLoopingSound = 0x6F0; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Chrono_KineticCarbine_Slow {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PowerJump {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CModifier_Upgrade_ArcaneMedallion {
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 0
            namespace CCitadel_SpiderAnimating {
            }
            // Parent: CPointEntity
            // Field count: 7
            namespace CKeepUpright {
                constexpr std::ptrdiff_t m_worldGoalAxis = 0x4F0; // Vector
                constexpr std::ptrdiff_t m_localTestAxis = 0x4FC; // Vector
                constexpr std::ptrdiff_t m_nameAttach = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_attachedObject = 0x518; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_angularLimit = 0x51C; // float32
                constexpr std::ptrdiff_t m_bActive = 0x520; // bool
                constexpr std::ptrdiff_t m_bDampAllRotation = 0x521; // bool
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CModelPointEntity {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SpinVData {
                constexpr std::ptrdiff_t m_AoEParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SlowModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityIntimidateVData {
                constexpr std::ptrdiff_t m_EnemyModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AoEPlayerParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AoEParticle = 0x1660; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_hAbility (CHandle<CCitadelBaseAbility>)
            // NetworkVarNames: m_bFloating (bool)
            namespace CCitadel_MobileResupply {
                constexpr std::ptrdiff_t m_hAbility = 0xC24; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_bFloating = 0xC28; // bool
            }
            // Parent: CBaseEntity
            // Field count: 5
            namespace CFuncTimescale {
                constexpr std::ptrdiff_t m_flDesiredTimescale = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flAcceleration = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flMinBlendRate = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flBlendDeltaMultiplier = 0x4F4; // float32
                constexpr std::ptrdiff_t m_isStarted = 0x4F8; // bool
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_HauntWatcher {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Wraith_RapidFireVData {
                constexpr std::ptrdiff_t m_RapidFireParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_HornetLeap {
                constexpr std::ptrdiff_t m_iBonusClip = 0xC0; // int32
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SilenceProcWatcherVData {
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x638; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_SilenceProcModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SilenceActiveModifier = 0x658; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImmunityModifier = 0x668; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_sInstantProcIfCasterHasModifier = 0x678; // CUtlString
                constexpr std::ptrdiff_t m_TracerParticle = 0x680; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 81
            //
            // Metadata:
            // MGetKV3ClassDefaults
            // MVDataOverlayType
            namespace CitadelAbilityVData {
                constexpr std::ptrdiff_t m_eAbilityType = 0x28; // EAbilityType_t
                constexpr std::ptrdiff_t m_eItemSlotType = 0x29; // EItemSlotTypes_t
                constexpr std::ptrdiff_t m_bDisabled = 0x2A; // bool
                constexpr std::ptrdiff_t m_bInDevelopment = 0x2B; // bool
                constexpr std::ptrdiff_t m_bStartTrained = 0x2C; // bool
                constexpr std::ptrdiff_t m_iMaxLevel = 0x30; // int32
                constexpr std::ptrdiff_t m_nAbilityPointsCost = 0x34; // int32
                constexpr std::ptrdiff_t m_nAbillityUnlocksCost = 0x38; // int32
                constexpr std::ptrdiff_t m_iUpdateTime = 0x40; // uint64
                constexpr std::ptrdiff_t m_AbilityBehaviorsBits = 0x4C; // CBitVecEnum<EAbilityBehavior_t>
                constexpr std::ptrdiff_t m_eAbilityTargetingLocation = 0x54; // EAbilityTargetingLocation_t
                constexpr std::ptrdiff_t m_eAbilityTargetingShape = 0x58; // EAbilityTargetingShape_t
                constexpr std::ptrdiff_t m_flTargetingConeAngle = 0x5C; // float32
                constexpr std::ptrdiff_t m_flTargetingConeHalfWidth = 0x60; // float32
                constexpr std::ptrdiff_t m_bIncludeExtra2DCone = 0x64; // bool
                constexpr std::ptrdiff_t m_eAbilityActivation = 0x68; // EAbilityActivation_t
                constexpr std::ptrdiff_t m_TriggerButtonPreReqButton = 0x70; // InputBitMask_t
                constexpr std::ptrdiff_t m_TriggerButtonOverride = 0x78; // InputBitMask_t
                constexpr std::ptrdiff_t m_eAbilitySpectatePriority = 0x80; // EAbilitySpectatePriority
                constexpr std::ptrdiff_t m_bitsInterruptingStates = 0x84; // CBitVecEnum<EModifierState>
                constexpr std::ptrdiff_t m_IncompatibleFilter = 0x9C; // IncompatibleFilter_t
                constexpr std::ptrdiff_t m_nAbilityTargetTypes = 0xAC; // CITADEL_UNIT_TARGET_TYPE
                constexpr std::ptrdiff_t m_nAbilityTargetFlags = 0xB0; // CITADEL_UNIT_TARGET_FLAGS
                constexpr std::ptrdiff_t m_bitsPostCastEnabledStateMask = 0xB4; // CBitVecEnum<EModifierState>
                constexpr std::ptrdiff_t m_TargetAbilityEffectsToApply = 0xCC; // ECitadelTargetAbilityEffects
                constexpr std::ptrdiff_t m_bShowTargetingPreviewWhileChanneling = 0xD0; // bool
                constexpr std::ptrdiff_t m_bShowTargetingPreviewWhileCasting = 0xD1; // bool
                constexpr std::ptrdiff_t m_WeaponInfo = 0xD8; // CCitadelWeaponInfo
                constexpr std::ptrdiff_t m_projectileInfo = 0x758; // ProjectileInfo_t
                constexpr std::ptrdiff_t m_deploymentInfo = 0xAD8; // DeploymentInfo_t
                constexpr std::ptrdiff_t m_mapAbilityProperties = 0xCB8; // CUtlOrderedMap<CUtlString,CitadelAbilityProperty_t>
                constexpr std::ptrdiff_t m_vecDependentAbilities = 0xCE0; // CUtlVector<CSubclassName<4>>
                constexpr std::ptrdiff_t m_vecAbilityUpgrades = 0xCF8; // CUtlVector<AbilityUpgrade_t>
                constexpr std::ptrdiff_t m_strCastAnimGraphParam = 0xD30; // CGlobalSymbol
                constexpr std::ptrdiff_t m_strSelectionNameOverride = 0xD38; // CUtlString
                constexpr std::ptrdiff_t m_strCastAnimSequenceName = 0xD40; // CUtlString
                constexpr std::ptrdiff_t m_AbilityTooltipDetails = 0xD48; // AbilityTooltipDetails_t
                constexpr std::ptrdiff_t m_strCSSClass = 0xD78; // CUtlString
                constexpr std::ptrdiff_t m_strAbilityImage = 0xD80; // CPanoramaImageName
                constexpr std::ptrdiff_t m_strMoviePreviewPath = 0xD90; // CUtlString
                constexpr std::ptrdiff_t m_HUDPanel = 0xD98; // CitadelAbilityHUDPanel_t
                constexpr std::ptrdiff_t m_bShowInPassiveItemsArea = 0xDD0; // bool
                constexpr std::ptrdiff_t m_bForceShowHUDPanel = 0xDD1; // bool
                constexpr std::ptrdiff_t m_bUsesFlightControls = 0xDD2; // bool
                constexpr std::ptrdiff_t m_strFlyUpLocString = 0xDD8; // CUtlString
                constexpr std::ptrdiff_t m_strFlyDownLocString = 0xDE0; // CUtlString
                constexpr std::ptrdiff_t m_additionalAbilities = 0xDE8; // AdditionalAbilities_t
                constexpr std::ptrdiff_t m_strCancelAbilityKey = 0xE08; // CUtlString
                constexpr std::ptrdiff_t m_strSecondaryStatName = 0xE10; // CUtlString
                constexpr std::ptrdiff_t m_strCastButtonLocToken = 0xE18; // CUtlString
                constexpr std::ptrdiff_t m_strAltCastButtonLocToken = 0xE20; // CUtlString
                constexpr std::ptrdiff_t m_cameraSequenceCastStart = 0xE28; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_bEndCastStartSequenceOnCastComplete = 0xEB0; // bool
                constexpr std::ptrdiff_t m_cameraSequenceCastComplete = 0xEB8; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceChannelStart = 0xF40; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_bEndChannelStartSequenceOnChannelComplete = 0xFC8; // bool
                constexpr std::ptrdiff_t m_flCameraPreviewOffset = 0xFCC; // float32
                constexpr std::ptrdiff_t m_flCameraPreviewDistance = 0xFD0; // float32
                constexpr std::ptrdiff_t m_flCameraPreviewSpeed = 0xFD4; // float32
                constexpr std::ptrdiff_t m_previewParticle = 0xFD8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PreviewPathParticle = 0x10B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_mapCastEventParticles = 0x1198; // CUtlOrderedMap<AbilityCastEvent_t,CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>>
                constexpr std::ptrdiff_t m_skillshotHitParticle = 0x11C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_skillshotMissParticle = 0x12A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetingPreviewParticle = 0x1380; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strSelectedSound = 0x1460; // CSoundEventName
                constexpr std::ptrdiff_t m_strUnselectedSound = 0x1470; // CSoundEventName
                constexpr std::ptrdiff_t m_strSelectedLoopSound = 0x1480; // CSoundEventName
                constexpr std::ptrdiff_t m_strCastSound = 0x1490; // CSoundEventName
                constexpr std::ptrdiff_t m_strChannelSound = 0x14A0; // CSoundEventName
                constexpr std::ptrdiff_t m_strChannelLoopSound = 0x14B0; // CSoundEventName
                constexpr std::ptrdiff_t m_strCastDelaySound = 0x14C0; // CSoundEventName
                constexpr std::ptrdiff_t m_strCastDelayLoopSound = 0x14D0; // CSoundEventName
                constexpr std::ptrdiff_t m_strHitConfirmationSound = 0x14E0; // CSoundEventName
                constexpr std::ptrdiff_t m_strDamageTakenSound = 0x14F0; // CSoundEventName
                constexpr std::ptrdiff_t m_strAbilityOffCooldownSound = 0x1500; // CSoundEventName
                constexpr std::ptrdiff_t m_strAbilityChargeReadySound = 0x1510; // CSoundEventName
                constexpr std::ptrdiff_t m_bPlayMeepMop = 0x1520; // bool
                constexpr std::ptrdiff_t m_AutoChannelModifier = 0x1528; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_AutoCastDelayModifier = 0x1538; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_AutoIntrinsicModifiers = 0x1548; // CUtlVector<CEmbeddedSubclass<CBaseModifier>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_TrooperDisabledInvulnerabilityFX {
            }
            // Parent: CCitadel_UtilityUpgrade_RocketBoots
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_flCastTime (GameTime_t)
            // NetworkVarNames: m_bCrashingDown (bool)
            // NetworkVarNames: m_bImpulseApplied (bool)
            // NetworkVarNames: m_bCanCrash (bool)
            // NetworkVarNames: m_vecCrashPosition (Vector)
            // NetworkVarNames: m_vecCrashDirection (Vector)
            namespace CCitadel_UtilityUpgrade_RocketBooster {
                constexpr std::ptrdiff_t m_nTargetingParticleIndex = 0xB94; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flCastTime = 0xB98; // GameTime_t
                constexpr std::ptrdiff_t m_bCrashingDown = 0xB9C; // bool
                constexpr std::ptrdiff_t m_bImpulseApplied = 0xB9D; // bool
                constexpr std::ptrdiff_t m_bCanCrash = 0xB9E; // bool
                constexpr std::ptrdiff_t m_vecCrashPosition = 0xBA0; // Vector
                constexpr std::ptrdiff_t m_vecCrashDirection = 0xBAC; // Vector
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_SelfBuffModifier {
            }
            // Parent: CBaseEntity
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_flAutoExposureMin (float)
            // NetworkVarNames: m_flAutoExposureMax (float)
            // NetworkVarNames: m_flTonemapPercentTarget (float)
            // NetworkVarNames: m_flTonemapPercentBrightPixels (float)
            // NetworkVarNames: m_flTonemapMinAvgLum (float)
            // NetworkVarNames: m_flExposureAdaptationSpeedUp (float)
            // NetworkVarNames: m_flExposureAdaptationSpeedDown (float)
            // NetworkVarNames: m_flTonemapEVSmoothingRange (float)
            namespace CTonemapController2 {
                constexpr std::ptrdiff_t m_flAutoExposureMin = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flAutoExposureMax = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flTonemapPercentTarget = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flTonemapPercentBrightPixels = 0x4F4; // float32
                constexpr std::ptrdiff_t m_flTonemapMinAvgLum = 0x4F8; // float32
                constexpr std::ptrdiff_t m_flExposureAdaptationSpeedUp = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flExposureAdaptationSpeedDown = 0x500; // float32
                constexpr std::ptrdiff_t m_flTonemapEVSmoothingRange = 0x504; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Cadence_Anthem {
            }
            // Parent: CCitadelYamatoBaseVData
            // Field count: 20
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityPowerSlashVData {
                constexpr std::ptrdiff_t m_flAirDrag = 0x1568; // float32
                constexpr std::ptrdiff_t m_flMaxPowerPadding = 0x156C; // float32
                constexpr std::ptrdiff_t m_flEffectGroundTrace = 0x1570; // float32
                constexpr std::ptrdiff_t m_flWhizbyMaxRange = 0x1574; // float32
                constexpr std::ptrdiff_t m_flStartPosTestCapsuleLength = 0x1578; // float32
                constexpr std::ptrdiff_t m_vecLongEffectOffset = 0x157C; // Vector
                constexpr std::ptrdiff_t m_PowerSlashParticle = 0x1588; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PowerSlashFullParticle = 0x1668; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1748; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1828; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PowerUpParticle = 0x1908; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStartSound = 0x19E8; // CSoundEventName
                constexpr std::ptrdiff_t m_strHitConfirmSound = 0x19F8; // CSoundEventName
                constexpr std::ptrdiff_t m_strPowerUp1Sounds = 0x1A08; // CSoundEventName
                constexpr std::ptrdiff_t m_strPowerUp2Sounds = 0x1A18; // CSoundEventName
                constexpr std::ptrdiff_t m_strPowerUp3Sounds = 0x1A28; // CSoundEventName
                constexpr std::ptrdiff_t m_strWhizbySound = 0x1A38; // CSoundEventName
                constexpr std::ptrdiff_t m_strSlashSound = 0x1A48; // CSoundEventName
                constexpr std::ptrdiff_t m_strSlashFullSound = 0x1A58; // CSoundEventName
                constexpr std::ptrdiff_t m_SlowModifier = 0x1A68; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_IceGrenadeVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_IceGrenadeSlowModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplosionSound = 0x1650; // CSoundEventName
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_ReturnFireVData {
                constexpr std::ptrdiff_t m_ReactiveArmorModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_TechShieldImpact {
                constexpr std::ptrdiff_t m_AmbientEffect = 0xC0; // ParticleIndex_t
            }
            // Parent: CCitadelPlayerPawnBase
            // Field count: 86
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkUserGroupProxy
            // MNetworkUserGroupProxy
            // MNetworkVarTypeOverride
            // MNetworkIncludeByName
            // MNetworkVarTypeOverride
            // MNetworkIncludeByName
            // NetworkVarNames: m_angClientCamera (QAngle)
            // NetworkVarNames: m_angEyeAngles (QAngle)
            // NetworkVarNames: m_angLockedEyeAngles (QAngle)
            // NetworkVarNames: m_nLevel (int32)
            // NetworkVarNames: m_nCurrencies (int32)
            // NetworkVarNames: m_nSpentCurrencies (int32)
            // NetworkVarNames: m_flRespawnTime (GameTime_t)
            // NetworkVarNames: m_flLastSpawnTime (GameTime_t)
            // NetworkVarNames: m_bInRegenerationZone (bool)
            // NetworkVarNames: m_bInItemShopZone (bool)
            // NetworkVarNames: m_timeRevealedOnMinimapByNPC (GameTime_t)
            // NetworkVarNames: m_vecFullSellPriceItems (EntitySubclassID_t)
            // NetworkVarNames: m_vecFullSellPriceAbilityUpgrades (FullSellPriceAbilityUpgrades_t)
            // NetworkVarNames: m_bNetworkDisconnected (bool)
            // NetworkVarNames: m_bHasIncomingThreats (bool)
            // NetworkVarNames: m_bLearningAbility (bool)
            // NetworkVarNames: m_nFlashStartTick (int)
            // NetworkVarNames: m_nFlashMaxStartTick (int)
            // NetworkVarNames: m_nFlashFadeStartTick (int)
            // NetworkVarNames: m_nFlashEndTick (int)
            // NetworkVarNames: m_nFlashMaxAlpha (int8)
            // NetworkVarNames: m_nDeducedLane (int32)
            // NetworkVarNames: m_bDismissedReportCard (bool)
            // NetworkVarNames: m_flCurrentHealingAmount (float)
            // NetworkVarNames: m_CCitadelAbilityComponent (CCitadelAbilityComponent::Storage_t)
            // NetworkVarNames: m_CCitadelHeroComponent (CCitadelHeroComponent::Storage_t)
            // NetworkVarNames: m_CCitadelRegenComponent (CCitadelRegenComponent::Storage_t)
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_eZipLineLaneColor (CMsgLaneColor)
            // NetworkVarNames: m_nSuccessiveDucks (int8)
            // NetworkVarNames: m_flLastDuckTime (GameTime_t)
            // NetworkVarNames: m_bAnimGraphMovementClipped (bool)
            // NetworkVarNames: m_bAnimGraphMovementDisableGravity (bool)
            // NetworkVarNames: m_bAnimGraphMovementDirectAirControl (bool)
            // NetworkVarNames: m_flPredTimeSlowedStart (GameTime_t)
            // NetworkVarNames: m_flPredTimeSlowedEnd (GameTime_t)
            // NetworkVarNames: m_flPredSlowSpeed (float32)
            // NetworkVarNames: m_flTimeSlowedStart (GameTime_t)
            // NetworkVarNames: m_flTimeSlowedEnd (GameTime_t)
            // NetworkVarNames: m_flSlowSpeed (float32)
            // NetworkVarNames: m_flSprintAnimSuppressEndTime (GameTime_t)
            namespace CCitadelPlayerPawn {
                constexpr std::ptrdiff_t m_arrGoldSources = 0xD40; // int32[36]
                constexpr std::ptrdiff_t m_angClientCamera = 0xDD0; // QAngle
                constexpr std::ptrdiff_t m_angEyeAngles = 0xDDC; // QAngle
                constexpr std::ptrdiff_t m_angLockedEyeAngles = 0xDE8; // QAngle
                constexpr std::ptrdiff_t m_nLevel = 0xDF4; // int32
                constexpr std::ptrdiff_t m_nCurrencies = 0xDF8; // int32[4]
                constexpr std::ptrdiff_t m_nSpentCurrencies = 0xE08; // int32[4]
                constexpr std::ptrdiff_t m_flRespawnTime = 0xE18; // GameTime_t
                constexpr std::ptrdiff_t m_flLastSpawnTime = 0xE1C; // GameTime_t
                constexpr std::ptrdiff_t m_bInRegenerationZone = 0xE20; // bool
                constexpr std::ptrdiff_t m_bInItemShopZone = 0xE21; // bool
                constexpr std::ptrdiff_t m_timeRevealedOnMinimapByNPC = 0xE24; // GameTime_t
                constexpr std::ptrdiff_t m_vecFullSellPriceItems = 0xE28; // CNetworkUtlVectorBase<CUtlStringToken>
                constexpr std::ptrdiff_t m_vecFullSellPriceAbilityUpgrades = 0xE40; // CNetworkUtlVectorBase<FullSellPriceAbilityUpgrades_t>
                constexpr std::ptrdiff_t m_bNetworkDisconnected = 0xE58; // bool
                constexpr std::ptrdiff_t m_bHasIncomingThreats = 0xE59; // bool
                constexpr std::ptrdiff_t m_bLearningAbility = 0xE5A; // bool
                constexpr std::ptrdiff_t m_nFlashStartTick = 0xE5C; // int32
                constexpr std::ptrdiff_t m_nFlashMaxStartTick = 0xE60; // int32
                constexpr std::ptrdiff_t m_nFlashFadeStartTick = 0xE64; // int32
                constexpr std::ptrdiff_t m_nFlashEndTick = 0xE68; // int32
                constexpr std::ptrdiff_t m_nFlashMaxAlpha = 0xE6C; // int8
                constexpr std::ptrdiff_t m_nDeducedLane = 0xE70; // int32
                constexpr std::ptrdiff_t m_bDismissedReportCard = 0xE74; // bool
                constexpr std::ptrdiff_t m_flCurrentHealingAmount = 0xE78; // float32
                constexpr std::ptrdiff_t m_hAbilityRequiresDebounce = 0xE7C; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_CCitadelAbilityComponent = 0xE80; // CCitadelAbilityComponent
                constexpr std::ptrdiff_t m_CCitadelHeroComponent = 0x1088; // CCitadelHeroComponent
                constexpr std::ptrdiff_t m_CCitadelRegenComponent = 0x10A8; // CCitadelRegenComponent
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x1228; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_bHasShopOpen = 0x1240; // bool
                constexpr std::ptrdiff_t m_eCurrentPingLocation = 0x1244; // ECitadelPingLocation_t
                constexpr std::ptrdiff_t m_flLastRegenThinkTime = 0x1254; // float32
                constexpr std::ptrdiff_t m_flCitadelDamageAccumulator = 0x1258; // float32
                constexpr std::ptrdiff_t m_nBulletsFiredAtUs = 0x1290; // int32
                constexpr std::ptrdiff_t m_nBulletsHitOnUs = 0x1294; // int32
                constexpr std::ptrdiff_t m_nHeadshotsOnUs = 0x1298; // int32
                constexpr std::ptrdiff_t m_flLastGameStatsRecorded = 0x129C; // GameTime_t
                constexpr std::ptrdiff_t m_flUnusedGoldRemainder = 0x12A0; // float32
                constexpr std::ptrdiff_t m_flUnusedAbilityRemainder = 0x12A4; // float32
                constexpr std::ptrdiff_t m_nBulletsFiredAtEnemyHeroes = 0x12A8; // int32
                constexpr std::ptrdiff_t m_nBulletsHitOnEnemyHeroes = 0x12AC; // int32
                constexpr std::ptrdiff_t m_nHeadshotsOnEnemyHeroes = 0x12B0; // int32
                constexpr std::ptrdiff_t m_nLuckyShotsOnEnemyHeroes = 0x12B4; // int32
                constexpr std::ptrdiff_t m_nBulletsHitOnImmobileEnemyHeroes = 0x12B8; // int32
                constexpr std::ptrdiff_t m_nHeadshotsOnImmobileEnemyHeroes = 0x12BC; // int32
                constexpr std::ptrdiff_t m_hEnemyHeroClientAimedAtAttackTime = 0x12C0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bHasOverrideSpawnPos = 0x12C4; // bool
                constexpr std::ptrdiff_t m_vecOverrideSpawnPos = 0x12C8; // Vector
                constexpr std::ptrdiff_t m_iKillStreak = 0x12D4; // int32
                constexpr std::ptrdiff_t m_iTrooperWaveEventCount = 0x12D8; // int32
                constexpr std::ptrdiff_t m_iTrooperWaveNumber = 0x12DC; // int32
                constexpr std::ptrdiff_t m_iPrevTrooperWaveEventCount = 0x12E0; // int32
                constexpr std::ptrdiff_t m_iPrevTrooperWaveNumber = 0x12E4; // int32
                constexpr std::ptrdiff_t m_bHasStartedPlaying = 0x12E8; // bool
                constexpr std::ptrdiff_t m_hRevengeTarget = 0x12EC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flLastHurtTimeByEnemyTeam = 0x12FC; // GameTime_t
                constexpr std::ptrdiff_t m_flLastTimeLookedAtByDirector = 0x1300; // GameTime_t
                constexpr std::ptrdiff_t m_ragdollDamage = 0x1308; // CTakeDamageResult
                constexpr std::ptrdiff_t m_vecThreats = 0x1328; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_eZipLineLaneColor = 0x1494; // CMsgLaneColor
                constexpr std::ptrdiff_t m_bCanBecomeRagdoll = 0x1498; // bool
                constexpr std::ptrdiff_t m_blindUntilTime = 0x149C; // float32
                constexpr std::ptrdiff_t m_blindStartTime = 0x14A0; // float32
                constexpr std::ptrdiff_t m_nSuccessiveDucks = 0x14A4; // int8
                constexpr std::ptrdiff_t m_flLastDuckTime = 0x14A8; // GameTime_t
                constexpr std::ptrdiff_t m_bAnimGraphMovementClipped = 0x14AC; // bool
                constexpr std::ptrdiff_t m_bAnimGraphMovementDisableGravity = 0x14AD; // bool
                constexpr std::ptrdiff_t m_bAnimGraphMovementDirectAirControl = 0x14AE; // bool
                constexpr std::ptrdiff_t m_bLastMoveWasAnimGraph = 0x14AF; // bool
                constexpr std::ptrdiff_t m_flPredTimeSlowedStart = 0x14B0; // GameTime_t
                constexpr std::ptrdiff_t m_flPredTimeSlowedEnd = 0x14B4; // GameTime_t
                constexpr std::ptrdiff_t m_flPredSlowSpeed = 0x14B8; // float32
                constexpr std::ptrdiff_t m_flTimeSlowedStart = 0x14BC; // GameTime_t[4]
                constexpr std::ptrdiff_t m_flTimeSlowedEnd = 0x14CC; // GameTime_t[4]
                constexpr std::ptrdiff_t m_flSlowSpeed = 0x14DC; // float32[4]
                constexpr std::ptrdiff_t m_flSprintAnimSuppressEndTime = 0x14EC; // GameTime_t
                constexpr std::ptrdiff_t m_bPreventAbilityLearning = 0x14F0; // bool
                constexpr std::ptrdiff_t m_iCurSlowSlot = 0x14F4; // int32
                constexpr std::ptrdiff_t m_nRespawnParticleIndex = 0x14FC; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nShoppingParticle = 0x1500; // ParticleIndex_t
                constexpr std::ptrdiff_t m_pBot = 0x1530; // CCitadelPlayerBot*
                constexpr std::ptrdiff_t m_vShootTestOffsetStanding = 0x16A0; // Vector
                constexpr std::ptrdiff_t m_vShootTestOffsetCrouching = 0x16AC; // Vector
                constexpr std::ptrdiff_t m_leanStartTime = 0x16B8; // GameTime_t
                constexpr std::ptrdiff_t m_nLastUnpredictableMovementTick = 0x16BC; // GameTick_t
            }
            // Parent: CRopeKeyframe
            // Field count: 0
            namespace CRopeKeyframeAlias_move_rope {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Tokamak_EnemySmokeAOE_VData {
            }
            // Parent: CCitadelProjectile
            // Field count: 6
            namespace CCitadel_Projectile_BloodBomb {
                constexpr std::ptrdiff_t m_bSecondBomb = 0x870; // bool
                constexpr std::ptrdiff_t m_nBeepSoundBuildupCount = 0x874; // int32
                constexpr std::ptrdiff_t m_flBeepSoundIntervalBias = 0x878; // float32
                constexpr std::ptrdiff_t m_flBeepSoundMaxFrequency = 0x87C; // float32
                constexpr std::ptrdiff_t m_flArmingDuration = 0x880; // float32
                constexpr std::ptrdiff_t m_vecBeepIntervals = 0x888; // CUtlVector<float32>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Trapper_PoisonJarVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AuraModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x1650; // CSoundEventName
            }
            // Parent: CAI_BaseNPC
            // Field count: 15
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // NetworkVarNames: m_CCitadelAbilityComponent (CCitadelAbilityComponent::Storage_t)
            // NetworkVarNames: m_CCitadelRegenComponent (CCitadelRegenComponent::Storage_t)
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_vecWeakPoints (WeakPoint_t)
            // NetworkVarNames: m_bMinion (bool)
            // NetworkVarNames: m_hLookTarget (EHANDLE)
            // NetworkVarNames: m_bBeamActive (bool)
            // NetworkVarNames: m_vEyeBeamTarget (Vector)
            namespace CAI_CitadelNPC {
                constexpr std::ptrdiff_t m_vLastGroundEntityCheckPos = 0x1298; // Vector
                constexpr std::ptrdiff_t m_flLastGroundCheckTime = 0x12A4; // GameTime_t
                constexpr std::ptrdiff_t m_CCitadelAbilityComponent = 0x12A8; // CCitadelAbilityComponent
                constexpr std::ptrdiff_t m_CCitadelRegenComponent = 0x14B0; // CCitadelRegenComponent
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x1630; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_iBaseGoldReward = 0x164C; // int32
                constexpr std::ptrdiff_t m_iSkillShotReward = 0x1650; // int32
                constexpr std::ptrdiff_t m_hAbilityOwner = 0x1684; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_vecWeakPoints = 0x16D0; // CUtlVectorEmbeddedNetworkVar<WeakPoint_t>
                constexpr std::ptrdiff_t m_bMinion = 0x1738; // bool
                constexpr std::ptrdiff_t m_hLookTarget = 0x173C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iCoverGroupID = 0x1750; // int32
                constexpr std::ptrdiff_t m_vecSpawnOrigin = 0x17B0; // Vector
                constexpr std::ptrdiff_t m_bBeamActive = 0x17D4; // bool
                constexpr std::ptrdiff_t m_vEyeBeamTarget = 0x17D8; // Vector
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_WeaponUpgrade_SurgingPower {
            }
            // Parent: CPointEntity
            // Field count: 9
            namespace CEnvInstructorVRHint {
                constexpr std::ptrdiff_t m_iszName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszHintTargetEntity = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iTimeout = 0x4F8; // int32
                constexpr std::ptrdiff_t m_iszCaption = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszStartSound = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iLayoutFileType = 0x510; // int32
                constexpr std::ptrdiff_t m_iszCustomLayoutFile = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iAttachType = 0x520; // int32
                constexpr std::ptrdiff_t m_flHeightOffset = 0x524; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_SmokeBomb {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_ChargedShot {
                constexpr std::ptrdiff_t m_ChannelParticle = 0xB00; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Tier2Boss_RocketDamage_AuraDebuff {
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            namespace CPlatTrigger {
                constexpr std::ptrdiff_t m_pPlatform = 0x7C0; // CHandle<CFuncPlat>
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCadenceAnthemVData {
                constexpr std::ptrdiff_t m_AnthemAOEModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVandalOverflowVData {
                constexpr std::ptrdiff_t m_LiftParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStartSound = 0x7C8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_FleetfootBoots_BonusClip {
                constexpr std::ptrdiff_t m_nBonusClip = 0xC0; // int32
            }
            // Parent: CCitadel_Modifier_StatStealBase
            // Field count: 0
            namespace CCitadel_Modifier_Siphon_Bullets_Watcher {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Glitch {
            }
            // Parent: CBaseEntity
            // Field count: 3
            namespace CCitadelHeroLoader {
                constexpr std::ptrdiff_t m_hero = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nLoadSeq = 0x4F0; // int32
                constexpr std::ptrdiff_t m_hOwner = 0x4F4; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelModifierAura_ConeVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Fathom_ScaldingSpray_Aura_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x650; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_Disarmed
            // Field count: 0
            namespace CCitadel_Modifier_DisarmProc {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_VexBarrier {
            }
            // Parent: CAI_CitadelNPCVData
            // Field count: 27
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelPlayerBotNPCBrainVData {
                constexpr std::ptrdiff_t m_flJumpMaxRise = 0xFB0; // float32
                constexpr std::ptrdiff_t m_flAirJumpMin = 0xFB4; // float32
                constexpr std::ptrdiff_t m_flJumpMaxDrop = 0xFB8; // float32
                constexpr std::ptrdiff_t m_flJumpMaxDist = 0xFBC; // float32
                constexpr std::ptrdiff_t m_flJumpMinDist = 0xFC0; // float32
                constexpr std::ptrdiff_t m_flClimbUpCostBase = 0xFC4; // float32
                constexpr std::ptrdiff_t m_flClimbUpCostScalar = 0xFC8; // float32
                constexpr std::ptrdiff_t m_flFaceTargetDistance = 0xFCC; // float32
                constexpr std::ptrdiff_t m_flNavGoalTolerance = 0xFD0; // float32
                constexpr std::ptrdiff_t m_flVerticalAttachOffset = 0xFD4; // float32
                constexpr std::ptrdiff_t m_flStuckTime = 0xFD8; // float32
                constexpr std::ptrdiff_t m_flStuckTimeAir = 0xFDC; // float32
                constexpr std::ptrdiff_t m_flMajorStuckTime = 0xFE0; // float32
                constexpr std::ptrdiff_t m_flStuckDistance = 0xFE4; // float32
                constexpr std::ptrdiff_t m_flMaxPathDistance = 0xFE8; // float32
                constexpr std::ptrdiff_t m_flMinLanePathDistance = 0xFEC; // float32
                constexpr std::ptrdiff_t m_flEnemyDistanceForReload = 0xFF0; // float32
                constexpr std::ptrdiff_t m_flReloadEnemyFarPct = 0xFF4; // float32
                constexpr std::ptrdiff_t m_flReloadEnemyLoSPct = 0xFF8; // float32
                constexpr std::ptrdiff_t m_flReloadEnemyLosTime = 0xFFC; // float32
                constexpr std::ptrdiff_t m_flMinShootTimeToReload = 0x1000; // float32
                constexpr std::ptrdiff_t m_flDashDamageThreshold = 0x1004; // float32
                constexpr std::ptrdiff_t m_flDashDamageTickDown = 0x1008; // float32
                constexpr std::ptrdiff_t m_flMinDesiredDashDist = 0x100C; // float32
                constexpr std::ptrdiff_t m_flMinAbilityAimTime = 0x1010; // float32
                constexpr std::ptrdiff_t m_flDisengageFromEnemyToLaneDist = 0x1014; // float32
                constexpr std::ptrdiff_t m_flDefendBaseSearchRadius = 0x1018; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Wrecker_UltimateVData {
                constexpr std::ptrdiff_t m_EnemyGrabModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_EnemyThrowModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_EnemyDamageModifier = 0x628; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_InvincibleModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_StartSound = 0x648; // CSoundEventName
                constexpr std::ptrdiff_t m_AmbientLoopingSound = 0x658; // CSoundEventName
                constexpr std::ptrdiff_t m_GrabSound = 0x668; // CSoundEventName
                constexpr std::ptrdiff_t m_ThrowSound = 0x678; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Low_Health_Glow {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Magic_Clarity_Buff {
                constexpr std::ptrdiff_t m_iAbilityID = 0x168; // uint64
                constexpr std::ptrdiff_t m_bAbilityLocked = 0x1A8; // bool
            }
            // Parent: None
            // Field count: 31
            //
            // Metadata:
            // NetworkVarNames: m_flStartTime (GameTime_t)
            // NetworkVarNames: m_iWindSeed (uint32)
            // NetworkVarNames: m_iMinWind (uint16)
            // NetworkVarNames: m_iMaxWind (uint16)
            // NetworkVarNames: m_windRadius (int32)
            // NetworkVarNames: m_iMinGust (uint16)
            // NetworkVarNames: m_iMaxGust (uint16)
            // NetworkVarNames: m_flMinGustDelay (float32)
            // NetworkVarNames: m_flMaxGustDelay (float32)
            // NetworkVarNames: m_flGustDuration (float32)
            // NetworkVarNames: m_iGustDirChange (uint16)
            // NetworkVarNames: m_location (Vector)
            // NetworkVarNames: m_iInitialWindDir (uint16)
            // NetworkVarNames: m_flInitialWindSpeed (float32)
            namespace CEnvWindShared {
                constexpr std::ptrdiff_t m_flStartTime = 0x8; // GameTime_t
                constexpr std::ptrdiff_t m_iWindSeed = 0xC; // uint32
                constexpr std::ptrdiff_t m_iMinWind = 0x10; // uint16
                constexpr std::ptrdiff_t m_iMaxWind = 0x12; // uint16
                constexpr std::ptrdiff_t m_windRadius = 0x14; // int32
                constexpr std::ptrdiff_t m_iMinGust = 0x18; // uint16
                constexpr std::ptrdiff_t m_iMaxGust = 0x1A; // uint16
                constexpr std::ptrdiff_t m_flMinGustDelay = 0x1C; // float32
                constexpr std::ptrdiff_t m_flMaxGustDelay = 0x20; // float32
                constexpr std::ptrdiff_t m_flGustDuration = 0x24; // float32
                constexpr std::ptrdiff_t m_iGustDirChange = 0x28; // uint16
                constexpr std::ptrdiff_t m_location = 0x2C; // Vector
                constexpr std::ptrdiff_t m_iszGustSound = 0x38; // int32
                constexpr std::ptrdiff_t m_iWindDir = 0x3C; // int32
                constexpr std::ptrdiff_t m_flWindSpeed = 0x40; // float32
                constexpr std::ptrdiff_t m_currentWindVector = 0x44; // Vector
                constexpr std::ptrdiff_t m_CurrentSwayVector = 0x50; // Vector
                constexpr std::ptrdiff_t m_PrevSwayVector = 0x5C; // Vector
                constexpr std::ptrdiff_t m_iInitialWindDir = 0x68; // uint16
                constexpr std::ptrdiff_t m_flInitialWindSpeed = 0x6C; // float32
                constexpr std::ptrdiff_t m_OnGustStart = 0x70; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnGustEnd = 0x98; // CEntityIOOutput
                constexpr std::ptrdiff_t m_flVariationTime = 0xC0; // GameTime_t
                constexpr std::ptrdiff_t m_flSwayTime = 0xC4; // GameTime_t
                constexpr std::ptrdiff_t m_flSimTime = 0xC8; // GameTime_t
                constexpr std::ptrdiff_t m_flSwitchTime = 0xCC; // GameTime_t
                constexpr std::ptrdiff_t m_flAveWindSpeed = 0xD0; // float32
                constexpr std::ptrdiff_t m_bGusting = 0xD4; // bool
                constexpr std::ptrdiff_t m_flWindAngleVariation = 0xD8; // float32
                constexpr std::ptrdiff_t m_flWindSpeedVariation = 0xDC; // float32
                constexpr std::ptrdiff_t m_hEntOwner = 0xE0; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BreakablePropExtraStaminaVData {
                constexpr std::ptrdiff_t m_nExtraStamina = 0x608; // float32
            }
            // Parent: CPointEntity
            // Field count: 6
            namespace CPointHurt {
                constexpr std::ptrdiff_t m_nDamage = 0x4E8; // int32
                constexpr std::ptrdiff_t m_bitsDamageType = 0x4EC; // DamageTypes_t
                constexpr std::ptrdiff_t m_flRadius = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flDelay = 0x4F4; // float32
                constexpr std::ptrdiff_t m_strTarget = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_pActivator = 0x500; // CHandle<CBaseEntity>
            }
            // Parent: CBaseEntity
            // Field count: 44
            //
            // Metadata:
            // NetworkVarNames: m_bDisabled (bool)
            // NetworkVarNames: m_bUpdateOnClient (bool)
            // NetworkVarNames: m_nInputType (ValueRemapperInputType_t)
            // NetworkVarNames: m_hRemapLineStart (CHandle<CBaseEntity>)
            // NetworkVarNames: m_hRemapLineEnd (CHandle<CBaseEntity>)
            // NetworkVarNames: m_flMaximumChangePerSecond (float)
            // NetworkVarNames: m_flDisengageDistance (float)
            // NetworkVarNames: m_flEngageDistance (float)
            // NetworkVarNames: m_bRequiresUseKey (bool)
            // NetworkVarNames: m_nOutputType (ValueRemapperOutputType_t)
            // NetworkVarNames: m_hOutputEntities (CHandle<CBaseEntity>)
            // NetworkVarNames: m_nHapticsType (ValueRemapperHapticsType_t)
            // NetworkVarNames: m_nMomentumType (ValueRemapperMomentumType_t)
            // NetworkVarNames: m_flMomentumModifier (float)
            // NetworkVarNames: m_flSnapValue (float)
            // NetworkVarNames: m_nRatchetType (ValueRemapperRatchetType_t)
            // NetworkVarNames: m_flInputOffset (float)
            namespace CPointValueRemapper {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_bUpdateOnClient = 0x4E9; // bool
                constexpr std::ptrdiff_t m_nInputType = 0x4EC; // ValueRemapperInputType_t
                constexpr std::ptrdiff_t m_iszRemapLineStartName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszRemapLineEndName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hRemapLineStart = 0x500; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hRemapLineEnd = 0x504; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flMaximumChangePerSecond = 0x508; // float32
                constexpr std::ptrdiff_t m_flDisengageDistance = 0x50C; // float32
                constexpr std::ptrdiff_t m_flEngageDistance = 0x510; // float32
                constexpr std::ptrdiff_t m_bRequiresUseKey = 0x514; // bool
                constexpr std::ptrdiff_t m_nOutputType = 0x518; // ValueRemapperOutputType_t
                constexpr std::ptrdiff_t m_iszOutputEntityName = 0x520; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOutputEntity2Name = 0x528; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOutputEntity3Name = 0x530; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOutputEntity4Name = 0x538; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hOutputEntities = 0x540; // CNetworkUtlVectorBase<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nHapticsType = 0x558; // ValueRemapperHapticsType_t
                constexpr std::ptrdiff_t m_nMomentumType = 0x55C; // ValueRemapperMomentumType_t
                constexpr std::ptrdiff_t m_flMomentumModifier = 0x560; // float32
                constexpr std::ptrdiff_t m_flSnapValue = 0x564; // float32
                constexpr std::ptrdiff_t m_flCurrentMomentum = 0x568; // float32
                constexpr std::ptrdiff_t m_nRatchetType = 0x56C; // ValueRemapperRatchetType_t
                constexpr std::ptrdiff_t m_flRatchetOffset = 0x570; // float32
                constexpr std::ptrdiff_t m_flInputOffset = 0x574; // float32
                constexpr std::ptrdiff_t m_bEngaged = 0x578; // bool
                constexpr std::ptrdiff_t m_bFirstUpdate = 0x579; // bool
                constexpr std::ptrdiff_t m_flPreviousValue = 0x57C; // float32
                constexpr std::ptrdiff_t m_flPreviousUpdateTickTime = 0x580; // GameTime_t
                constexpr std::ptrdiff_t m_vecPreviousTestPoint = 0x584; // Vector
                constexpr std::ptrdiff_t m_hUsingPlayer = 0x590; // CHandle<CBasePlayerPawn>
                constexpr std::ptrdiff_t m_flCustomOutputValue = 0x594; // float32
                constexpr std::ptrdiff_t m_iszSoundEngage = 0x598; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSoundDisengage = 0x5A0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSoundReachedValueZero = 0x5A8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSoundReachedValueOne = 0x5B0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSoundMovingLoop = 0x5B8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_Position = 0x5C8; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_PositionDelta = 0x5F0; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnReachedValueZero = 0x618; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnReachedValueOne = 0x640; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnReachedValueCustom = 0x668; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEngage = 0x690; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnDisengage = 0x6B8; // CEntityIOOutput
            }
            // Parent: CLogicNPCCounter
            // Field count: 4
            namespace CLogicNPCCounterAABB {
                constexpr std::ptrdiff_t m_vDistanceOuterMins = 0x828; // Vector
                constexpr std::ptrdiff_t m_vDistanceOuterMaxs = 0x834; // Vector
                constexpr std::ptrdiff_t m_vOuterMins = 0x840; // Vector
                constexpr std::ptrdiff_t m_vOuterMaxs = 0x84C; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Thumper_3 {
                constexpr std::ptrdiff_t m_nFXIndex = 0xC0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flVisibilityTime = 0xC4; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_StickyBombAttachedVData {
                constexpr std::ptrdiff_t m_BombAttachedParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StunAttachedParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BombAttachedVictimTeamParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x988; // CSoundEventName
                constexpr std::ptrdiff_t m_strTickTockSound = 0x998; // CSoundEventName
                constexpr std::ptrdiff_t m_strTickTockFastSound = 0x9A8; // CSoundEventName
                constexpr std::ptrdiff_t m_DebuffModifier = 0x9B8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DetonateWarningTime = 0x9C8; // float32
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierLashGrappleEnemyDebuffVData {
                constexpr std::ptrdiff_t m_GrappleParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LaunchParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RopeParticle = 0x988; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactSound = 0xA68; // CSoundEventName
                constexpr std::ptrdiff_t m_DebuffModifier = 0xA78; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_SpeedBoost {
            }
            // Parent: CNPC_TrooperNeutral
            // Field count: 0
            namespace CNPC_MidBossHeroTest {
            }
            // Parent: CEnvSoundscapeTriggerable
            // Field count: 0
            namespace CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable {
            }
            // Parent: CLightEntity
            // Field count: 0
            namespace CLightOrthoEntity {
            }
            // Parent: CBaseLockonAbilityVData
            // Field count: 14
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityLashUltimateVData {
                constexpr std::ptrdiff_t m_TargetPreviewParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LaunchParticle = 0x1660; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_UltimateCastParticle = 0x1740; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_UltimateCastEnemyParticle = 0x1820; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strThrowEnemyAnimGraphParam = 0x1900; // CGlobalSymbol
                constexpr std::ptrdiff_t m_GrappleEnemyModifier = 0x1908; // CEmbeddedSubclass<CCitadel_Modifier_LashGrappleEnemy_Debuff>
                constexpr std::ptrdiff_t m_GrabSound = 0x1918; // CSoundEventName
                constexpr std::ptrdiff_t m_MissSound = 0x1928; // CSoundEventName
                constexpr std::ptrdiff_t m_ThrowSound = 0x1938; // CSoundEventName
                constexpr std::ptrdiff_t m_flAirSpeedMax = 0x1948; // float32
                constexpr std::ptrdiff_t m_flFallSpeedMax = 0x194C; // float32
                constexpr std::ptrdiff_t m_flAirDrag = 0x1950; // float32
                constexpr std::ptrdiff_t m_flMaxPitchRangeScale = 0x1954; // float32
                constexpr std::ptrdiff_t m_flThrowAnimTossPoint = 0x1958; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Crackshot {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Bomber_Ability03 {
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityProperty_NanoTechRoundsDamage {
            }
            // Parent: CAI_MotorTransition
            // Field count: 2
            namespace CAI_MotorNavLink {
                constexpr std::ptrdiff_t m_nNavLinkActiveType = 0x60; // int32
                constexpr std::ptrdiff_t m_strNavLinkActiveMovement = 0x68; // CGlobalSymbol
            }
            // Parent: CSoundOpvarSetPointBase
            // Field count: 24
            namespace CSoundOpvarSetPointEntity {
                constexpr std::ptrdiff_t m_OnEnter = 0x580; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnExit = 0x5A8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bAutoDisable = 0x5D0; // bool
                constexpr std::ptrdiff_t m_flDistanceMin = 0x5F4; // float32
                constexpr std::ptrdiff_t m_flDistanceMax = 0x5F8; // float32
                constexpr std::ptrdiff_t m_flDistanceMapMin = 0x5FC; // float32
                constexpr std::ptrdiff_t m_flDistanceMapMax = 0x600; // float32
                constexpr std::ptrdiff_t m_flOcclusionRadius = 0x604; // float32
                constexpr std::ptrdiff_t m_flOcclusionMin = 0x608; // float32
                constexpr std::ptrdiff_t m_flOcclusionMax = 0x60C; // float32
                constexpr std::ptrdiff_t m_flValSetOnDisable = 0x610; // float32
                constexpr std::ptrdiff_t m_bSetValueOnDisable = 0x614; // bool
                constexpr std::ptrdiff_t m_bReloading = 0x615; // bool
                constexpr std::ptrdiff_t m_nSimulationMode = 0x618; // int32
                constexpr std::ptrdiff_t m_nVisibilitySamples = 0x61C; // int32
                constexpr std::ptrdiff_t m_vDynamicProxyPoint = 0x620; // Vector
                constexpr std::ptrdiff_t m_flDynamicMaximumOcclusion = 0x62C; // float32
                constexpr std::ptrdiff_t m_hDynamicEntity = 0x630; // CEntityHandle
                constexpr std::ptrdiff_t m_iszDynamicEntityName = 0x638; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flPathingDistanceNormFactor = 0x640; // float32
                constexpr std::ptrdiff_t m_vPathingSourcePos = 0x644; // Vector
                constexpr std::ptrdiff_t m_vPathingListenerPos = 0x650; // Vector
                constexpr std::ptrdiff_t m_vPathingDirection = 0x65C; // Vector
                constexpr std::ptrdiff_t m_nPathingSourceIndex = 0x668; // int32
            }
            // Parent: CBaseEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_skyboxData (sky3dparams_t)
            // NetworkVarNames: m_skyboxSlotToken (CUtlStringToken)
            namespace CSkyCamera {
                constexpr std::ptrdiff_t m_skyboxData = 0x4E8; // sky3dparams_t
                constexpr std::ptrdiff_t m_skyboxSlotToken = 0x578; // CUtlStringToken
                constexpr std::ptrdiff_t m_bUseAngles = 0x57C; // bool
                constexpr std::ptrdiff_t m_pNext = 0x580; // CSkyCamera*
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_Stimpak {
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 2
            namespace CCitadel_Modifier_Knockback {
                constexpr std::ptrdiff_t m_flForce = 0xC8; // float32
                constexpr std::ptrdiff_t m_bKnockedBack = 0xCC; // bool
            }
            // Parent: CLogicalEntity
            // Field count: 5
            namespace CLogicPlayerProxy {
                constexpr std::ptrdiff_t m_hPlayer = 0x4E8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_PlayerHasAmmo = 0x4F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_PlayerHasNoAmmo = 0x518; // CEntityIOOutput
                constexpr std::ptrdiff_t m_PlayerDied = 0x540; // CEntityIOOutput
                constexpr std::ptrdiff_t m_RequestedPlayerHealth = 0x568; // CEntityOutputTemplate<int32>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Hero_Testing_Damage {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_bBulletFlying (bool)
            // NetworkVarNames: m_bHasLatchedOnce (bool)
            // NetworkVarNames: m_bLatched (bool)
            // NetworkVarNames: m_vHarpoonTarget (Vector)
            // NetworkVarNames: m_flLatchedYaw (float)
            // NetworkVarNames: m_flCloseEnoughStartTime (GameTime_t)
            // NetworkVarNames: m_flStuckStartTime (GameTime_t)
            // NetworkVarNames: m_flReelStartTime (GameTime_t)
            namespace CAbility_Fathom_ReefdwellerHarpoon {
                constexpr std::ptrdiff_t m_bHitTarget = 0xB00; // bool
                constexpr std::ptrdiff_t m_vPrevPos = 0xB04; // Vector
                constexpr std::ptrdiff_t m_bBulletFlying = 0xB10; // bool
                constexpr std::ptrdiff_t m_bHasLatchedOnce = 0xB11; // bool
                constexpr std::ptrdiff_t m_bLatched = 0xB12; // bool
                constexpr std::ptrdiff_t m_vHarpoonTarget = 0xB14; // Vector
                constexpr std::ptrdiff_t m_flLatchedYaw = 0xB20; // float32
                constexpr std::ptrdiff_t m_flCloseEnoughStartTime = 0xB24; // GameTime_t
                constexpr std::ptrdiff_t m_flStuckStartTime = 0xB28; // GameTime_t
                constexpr std::ptrdiff_t m_flReelStartTime = 0xB2C; // GameTime_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CAbility_Synth_Grasp {
                constexpr std::ptrdiff_t m_vecTetheredEnemies = 0xB00; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CPlayerPawnComponent
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_iObserverMode (uint8)
            // NetworkVarNames: m_hObserverTarget (CHandle<CBaseEntity>)
            namespace CPlayer_ObserverServices {
                constexpr std::ptrdiff_t m_iObserverMode = 0x40; // uint8
                constexpr std::ptrdiff_t m_hObserverTarget = 0x44; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iObserverLastMode = 0x48; // ObserverMode_t
                constexpr std::ptrdiff_t m_bForcedObserverMode = 0x4C; // bool
            }
            // Parent: CCitadelBaseTriggerAbility
            // Field count: 1
            namespace CCitadel_Ability_TangoTether_Trigger {
                constexpr std::ptrdiff_t m_hBaseAbility = 0xB10; // CHandle<CCitadelBaseAbility>
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CTriggerBurrowUnderground {
                constexpr std::ptrdiff_t m_pTouchedEntities = 0x990; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CPointEntity
            // Field count: 3
            namespace CPhysImpact {
                constexpr std::ptrdiff_t m_damage = 0x4E8; // float32
                constexpr std::ptrdiff_t m_distance = 0x4EC; // float32
                constexpr std::ptrdiff_t m_directionEntityName = 0x4F0; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Field count: 24
            //
            // Metadata:
            // NetworkVarNames: m_Entity_Color (Color)
            // NetworkVarNames: m_Entity_flBrightness (float)
            // NetworkVarNames: m_Entity_hCubemapTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_bCustomCubemapTexture (bool)
            // NetworkVarNames: m_Entity_hLightProbeTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_hLightProbeDirectLightIndicesTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_hLightProbeDirectLightScalarsTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_hLightProbeDirectLightShadowsTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_vBoxMins (Vector)
            // NetworkVarNames: m_Entity_vBoxMaxs (Vector)
            // NetworkVarNames: m_Entity_bMoveable (bool)
            // NetworkVarNames: m_Entity_nHandshake (int)
            // NetworkVarNames: m_Entity_nEnvCubeMapArrayIndex (int)
            // NetworkVarNames: m_Entity_nPriority (int)
            // NetworkVarNames: m_Entity_bStartDisabled (bool)
            // NetworkVarNames: m_Entity_flEdgeFadeDist (float)
            // NetworkVarNames: m_Entity_vEdgeFadeDists (Vector)
            // NetworkVarNames: m_Entity_nLightProbeSizeX (int)
            // NetworkVarNames: m_Entity_nLightProbeSizeY (int)
            // NetworkVarNames: m_Entity_nLightProbeSizeZ (int)
            // NetworkVarNames: m_Entity_nLightProbeAtlasX (int)
            // NetworkVarNames: m_Entity_nLightProbeAtlasY (int)
            // NetworkVarNames: m_Entity_nLightProbeAtlasZ (int)
            // NetworkVarNames: m_Entity_bEnabled (bool)
            namespace CEnvCombinedLightProbeVolume {
                constexpr std::ptrdiff_t m_Entity_Color = 0x1548; // Color
                constexpr std::ptrdiff_t m_Entity_flBrightness = 0x154C; // float32
                constexpr std::ptrdiff_t m_Entity_hCubemapTexture = 0x1550; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_bCustomCubemapTexture = 0x1558; // bool
                constexpr std::ptrdiff_t m_Entity_hLightProbeTexture = 0x1560; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_hLightProbeDirectLightIndicesTexture = 0x1568; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_hLightProbeDirectLightScalarsTexture = 0x1570; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_hLightProbeDirectLightShadowsTexture = 0x1578; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_vBoxMins = 0x1580; // Vector
                constexpr std::ptrdiff_t m_Entity_vBoxMaxs = 0x158C; // Vector
                constexpr std::ptrdiff_t m_Entity_bMoveable = 0x1598; // bool
                constexpr std::ptrdiff_t m_Entity_nHandshake = 0x159C; // int32
                constexpr std::ptrdiff_t m_Entity_nEnvCubeMapArrayIndex = 0x15A0; // int32
                constexpr std::ptrdiff_t m_Entity_nPriority = 0x15A4; // int32
                constexpr std::ptrdiff_t m_Entity_bStartDisabled = 0x15A8; // bool
                constexpr std::ptrdiff_t m_Entity_flEdgeFadeDist = 0x15AC; // float32
                constexpr std::ptrdiff_t m_Entity_vEdgeFadeDists = 0x15B0; // Vector
                constexpr std::ptrdiff_t m_Entity_nLightProbeSizeX = 0x15BC; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeSizeY = 0x15C0; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeSizeZ = 0x15C4; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeAtlasX = 0x15C8; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeAtlasY = 0x15CC; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeAtlasZ = 0x15D0; // int32
                constexpr std::ptrdiff_t m_Entity_bEnabled = 0x15E9; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityThumper4VData {
                constexpr std::ptrdiff_t m_PullAOEModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Bounce_Pad_Stomp {
                constexpr std::ptrdiff_t m_bStomped = 0x2F0; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_ChargedBomb {
                constexpr std::ptrdiff_t m_flNextBeep = 0xC0; // GameTime_t
                constexpr std::ptrdiff_t m_flBeepInterval = 0xC4; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_IncendiaryThinker {
            }
            // Parent: CPlayerPawnComponent
            // Field count: 0
            namespace CPlayer_WaterServices {
            }
            // Parent: CBaseAnimGraph
            // Field count: 0
            namespace CCitadel_PickupItemSpawner {
            }
            // Parent: CParticleSystem
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_flAlphaScale (float32)
            // NetworkVarNames: m_flRadiusScale (float32)
            // NetworkVarNames: m_flSelfIllumScale (float32)
            // NetworkVarNames: m_ColorTint (Color)
            // NetworkVarNames: m_hTextureOverride (HRenderTextureStrong)
            namespace CEnvParticleGlow {
                constexpr std::ptrdiff_t m_flAlphaScale = 0xD38; // float32
                constexpr std::ptrdiff_t m_flRadiusScale = 0xD3C; // float32
                constexpr std::ptrdiff_t m_flSelfIllumScale = 0xD40; // float32
                constexpr std::ptrdiff_t m_ColorTint = 0xD44; // Color
                constexpr std::ptrdiff_t m_hTextureOverride = 0xD48; // CStrongHandle<InfoForResourceTypeCTextureBase>
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CFuncVehicleClip {
            }
            // Parent: CSoundAreaEntityBase
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flRadius (float)
            namespace CSoundAreaEntitySphere {
                constexpr std::ptrdiff_t m_flRadius = 0x508; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_FearWatcher {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadelBaseYamatoAbility {
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 2
            namespace CCitadel_Modifier_VandalOverflow {
                constexpr std::ptrdiff_t m_vecFloatDest = 0x138; // Vector
                constexpr std::ptrdiff_t m_vecStartingPos = 0x144; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_SleepDagger_Drowsy {
            }
            // Parent: CCitadel_Modifier_ShieldTracker_Base
            // Field count: 0
            namespace CCitadel_Modifier_ShieldTracker_Magic {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_CanDamageTier3Phase2 {
            }
            // Parent: CFuncBrush
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_targetCamera (CUtlString)
            // NetworkVarNames: m_nResolutionEnum (int)
            // NetworkVarNames: m_bRenderShadows (bool)
            // NetworkVarNames: m_bUseUniqueColorTarget (bool)
            // NetworkVarNames: m_brushModelName (CUtlString)
            // NetworkVarNames: m_hTargetCamera (EHANDLE)
            // NetworkVarNames: m_bEnabled (bool)
            // NetworkVarNames: m_bDraw3DSkybox (bool)
            namespace CFuncMonitor {
                constexpr std::ptrdiff_t m_targetCamera = 0x7E0; // CUtlString
                constexpr std::ptrdiff_t m_nResolutionEnum = 0x7E8; // int32
                constexpr std::ptrdiff_t m_bRenderShadows = 0x7EC; // bool
                constexpr std::ptrdiff_t m_bUseUniqueColorTarget = 0x7ED; // bool
                constexpr std::ptrdiff_t m_brushModelName = 0x7F0; // CUtlString
                constexpr std::ptrdiff_t m_hTargetCamera = 0x7F8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bEnabled = 0x7FC; // bool
                constexpr std::ptrdiff_t m_bDraw3DSkybox = 0x7FD; // bool
                constexpr std::ptrdiff_t m_bStartEnabled = 0x7FE; // bool
            }
            // Parent: CCitadelBaseDashCastAbility
            // Field count: 0
            namespace CCitadel_Ability_Cadence_SilenceContraptions {
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CEnvFunnel {
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 2
            namespace CInfoMidBossSpawn {
                constexpr std::ptrdiff_t m_iCoverGroupID = 0x4E8; // int32
                constexpr std::ptrdiff_t m_iszSquadName = 0x4F0; // CUtlSymbolLarge
            }
            // Parent: CitadelAbilityVData
            // Field count: 29
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityLashDownStrikeVData {
                constexpr std::ptrdiff_t m_TargetPreviewParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strGroundCastAnimGraphParam = 0x1640; // CGlobalSymbol
                constexpr std::ptrdiff_t m_strAirCastAnimGraphParam = 0x1648; // CGlobalSymbol
                constexpr std::ptrdiff_t m_StompParticle = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StompLineParticle = 0x1730; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StompLineObstructedParticle = 0x1810; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StompImpactParticle = 0x18F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StompExplosionSound = 0x19D0; // CSoundEventName
                constexpr std::ptrdiff_t m_StompEnemyImpactSound = 0x19E0; // CSoundEventName
                constexpr std::ptrdiff_t m_strFallCollideImpactSound = 0x19F0; // CSoundEventName
                constexpr std::ptrdiff_t m_DownStrikeModifier = 0x1A00; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ImpactModifier = 0x1A10; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_DragModifier = 0x1A20; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_flHeightUILingerTime = 0x1A30; // float32
                constexpr std::ptrdiff_t m_flDamageFrustumHalfWidth = 0x1A34; // float32
                constexpr std::ptrdiff_t m_flDamageFrustumAngle = 0x1A38; // float32
                constexpr std::ptrdiff_t m_flDamageWaveSpeed = 0x1A3C; // float32
                constexpr std::ptrdiff_t m_flDamageTraceProbeDamageRadius = 0x1A40; // float32
                constexpr std::ptrdiff_t m_flDamageTraceProbeWorldRadius = 0x1A44; // float32
                constexpr std::ptrdiff_t m_flDamageTraceProbeStepUpHeight = 0x1A48; // float32
                constexpr std::ptrdiff_t m_flDamageTraceProbeStepDownHeight = 0x1A4C; // float32
                constexpr std::ptrdiff_t m_flDamageTraceProbeDropDownRate = 0x1A50; // float32
                constexpr std::ptrdiff_t m_flInitialDamageRadiusInMeters = 0x1A54; // float32
                constexpr std::ptrdiff_t m_nGroundCrackGap = 0x1A58; // int32
                constexpr std::ptrdiff_t m_flGroupLengthTolerance = 0x1A5C; // float32
                constexpr std::ptrdiff_t m_flDamageEffectScaleMin = 0x1A60; // float32
                constexpr std::ptrdiff_t m_flDamageEffectScaleMax = 0x1A64; // float32
                constexpr std::ptrdiff_t m_flTrackAmount = 0x1A68; // float32
                constexpr std::ptrdiff_t m_flCollideRadius = 0x1A6C; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ProjectMindVData {
                constexpr std::ptrdiff_t m_ProjectMindModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_AcolytesGlove {
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_BubbleVData {
                constexpr std::ptrdiff_t m_CastParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastTargetSound = 0x1688; // CSoundEventName
                constexpr std::ptrdiff_t m_BubbleModifier = 0x1698; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierHoldingGoldenIdolVData {
                constexpr std::ptrdiff_t m_IdolParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: None
            // Field count: 6
            namespace SequenceHistory_t {
                constexpr std::ptrdiff_t m_hSequence = 0x0; // HSequence
                constexpr std::ptrdiff_t m_flSeqStartTime = 0x4; // GameTime_t
                constexpr std::ptrdiff_t m_flSeqFixedCycle = 0x8; // float32
                constexpr std::ptrdiff_t m_nSeqLoopMode = 0xC; // AnimLoopMode_t
                constexpr std::ptrdiff_t m_flPlaybackRate = 0x10; // float32
                constexpr std::ptrdiff_t m_flCyclesPerSecond = 0x14; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_BaseHeldItemVData {
                constexpr std::ptrdiff_t m_ItemModel = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            }
            // Parent: CCitadel_BreakablePropPickupVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_BreakablePropModifierPickupVData {
                constexpr std::ptrdiff_t m_sModifer = 0x330; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CEntityComponent
            // Field count: 0
            namespace CCitadelMinimapComponent {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_Traveler_FireRate {
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCadenceGrandFinaleVData {
                constexpr std::ptrdiff_t m_StageModel = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_flStageModelHeight = 0x1640; // float32
                constexpr std::ptrdiff_t m_flStageModelWidth = 0x1644; // float32
                constexpr std::ptrdiff_t m_flStageModelLength = 0x1648; // float32
                constexpr std::ptrdiff_t m_flStageModelScale = 0x164C; // float32
                constexpr std::ptrdiff_t m_GrandFinaleAOEModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 1
            namespace CCitadel_Modifier_Gravity_Lasso_Enemy {
                constexpr std::ptrdiff_t m_eHoldPosition = 0xC8; // ELassoHoldPosition
            }
            // Parent: CCitadelBaseAbility
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_flBoostYaw (float)
            // NetworkVarNames: m_vecCrashPosition (Vector)
            // NetworkVarNames: m_vecCrashDirection (Vector)
            // NetworkVarNames: m_eLeapState (ELeapState_t)
            // NetworkVarNames: m_flStateEnterTime (GameTime_t)
            // NetworkVarNames: m_flNextStateTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flBoostEndTime (CCitadelAutoScaledTime)
            namespace CCitadel_Ability_Bull_Leap {
                constexpr std::ptrdiff_t m_flBoostYaw = 0xB00; // float32
                constexpr std::ptrdiff_t m_vecCrashPosition = 0xB04; // Vector
                constexpr std::ptrdiff_t m_vecCrashDirection = 0xB10; // Vector
                constexpr std::ptrdiff_t m_eLeapState = 0xB1C; // ELeapState_t
                constexpr std::ptrdiff_t m_flStateEnterTime = 0xB20; // GameTime_t
                constexpr std::ptrdiff_t m_flNextStateTime = 0xB28; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flBoostEndTime = 0xB40; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_vecLastVel = 0xCB0; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Infuser {
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 1
            namespace CCitadel_Ability_Tier2Boss_RocketBarrage {
                constexpr std::ptrdiff_t m_nGrenadesLeft = 0xB00; // int32
            }
            // Parent: CBaseEntity
            // Field count: 2
            namespace CPointModifierThinker {
                constexpr std::ptrdiff_t m_hModifier = 0x4E8; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_bSendToClients = 0x500; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_Tornado_HoldInPlace {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityLockDownVData {
                constexpr std::ptrdiff_t m_CastParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_NearbyEnemyBoostVData {
                constexpr std::ptrdiff_t m_BerserkerSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_BuffModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CPointEntity
            // Field count: 16
            namespace CPointAngularVelocitySensor {
                constexpr std::ptrdiff_t m_hTargetEntity = 0x4E8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flThreshold = 0x4EC; // float32
                constexpr std::ptrdiff_t m_nLastCompareResult = 0x4F0; // int32
                constexpr std::ptrdiff_t m_nLastFireResult = 0x4F4; // int32
                constexpr std::ptrdiff_t m_flFireTime = 0x4F8; // GameTime_t
                constexpr std::ptrdiff_t m_flFireInterval = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flLastAngVelocity = 0x500; // float32
                constexpr std::ptrdiff_t m_lastOrientation = 0x504; // QAngle
                constexpr std::ptrdiff_t m_vecAxis = 0x510; // Vector
                constexpr std::ptrdiff_t m_bUseHelper = 0x51C; // bool
                constexpr std::ptrdiff_t m_AngularVelocity = 0x520; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnLessThan = 0x548; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLessThanOrEqualTo = 0x570; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnGreaterThan = 0x598; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnGreaterThanOrEqualTo = 0x5C0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEqualTo = 0x5E8; // CEntityIOOutput
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Warden_RiotProtocol_EnemyDebuff {
                constexpr std::ptrdiff_t m_flEnemyMoveSlow = 0xF8; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ProjectMind {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Bomber_ULT {
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Upgrade_OverdriveClip_VData {
                constexpr std::ptrdiff_t m_OverdriveClipModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ReloadModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ChainLightningEffectVData {
                constexpr std::ptrdiff_t m_ChainParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChainSound = 0x6E8; // CSoundEventName
                constexpr std::ptrdiff_t m_VictimSound = 0x6F8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Passive_Camouflage {
                constexpr std::ptrdiff_t m_flRate = 0xC0; // float32
                constexpr std::ptrdiff_t m_vLastPosition = 0xC4; // Vector
            }
            // Parent: CCitadelModifierAura
            // Field count: 3
            namespace CCitadel_Modifier_ThermalDetonator_Thinker {
                constexpr std::ptrdiff_t m_vecOrigin = 0xE0; // Vector
                constexpr std::ptrdiff_t m_vecWorldSpaceMins = 0xEC; // Vector
                constexpr std::ptrdiff_t m_vecWorldSpaceMaxs = 0xF8; // Vector
            }
            // Parent: CPointEntity
            // Field count: 24
            namespace CEnvInstructorHint {
                constexpr std::ptrdiff_t m_iszName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszReplace_Key = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszHintTargetEntity = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iTimeout = 0x500; // int32
                constexpr std::ptrdiff_t m_iDisplayLimit = 0x504; // int32
                constexpr std::ptrdiff_t m_iszIcon_Onscreen = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszIcon_Offscreen = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszCaption = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszActivatorCaption = 0x520; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_Color = 0x528; // Color
                constexpr std::ptrdiff_t m_fIconOffset = 0x52C; // float32
                constexpr std::ptrdiff_t m_fRange = 0x530; // float32
                constexpr std::ptrdiff_t m_iPulseOption = 0x534; // uint8
                constexpr std::ptrdiff_t m_iAlphaOption = 0x535; // uint8
                constexpr std::ptrdiff_t m_iShakeOption = 0x536; // uint8
                constexpr std::ptrdiff_t m_bStatic = 0x537; // bool
                constexpr std::ptrdiff_t m_bNoOffscreen = 0x538; // bool
                constexpr std::ptrdiff_t m_bForceCaption = 0x539; // bool
                constexpr std::ptrdiff_t m_iInstanceType = 0x53C; // int32
                constexpr std::ptrdiff_t m_bSuppressRest = 0x540; // bool
                constexpr std::ptrdiff_t m_iszBinding = 0x548; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bAllowNoDrawTarget = 0x550; // bool
                constexpr std::ptrdiff_t m_bAutoStart = 0x551; // bool
                constexpr std::ptrdiff_t m_bLocalPlayerOnly = 0x552; // bool
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CEnvTracer {
                constexpr std::ptrdiff_t m_vecEnd = 0x4E8; // Vector
                constexpr std::ptrdiff_t m_flDelay = 0x4F4; // float32
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CInfoGameEventProxy {
                constexpr std::ptrdiff_t m_iszEventName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flRange = 0x4F0; // float32
            }
            // Parent: CBaseEntity
            // Field count: 26
            //
            // Metadata:
            // NetworkVarNames: m_FOV (float)
            // NetworkVarNames: m_Resolution (float)
            // NetworkVarNames: m_bFogEnable (bool)
            // NetworkVarNames: m_FogColor (Color)
            // NetworkVarNames: m_flFogStart (float)
            // NetworkVarNames: m_flFogEnd (float)
            // NetworkVarNames: m_flFogMaxDensity (float)
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_bUseScreenAspectRatio (bool)
            // NetworkVarNames: m_flAspectRatio (float)
            // NetworkVarNames: m_bNoSky (bool)
            // NetworkVarNames: m_fBrightness (float)
            // NetworkVarNames: m_flZFar (float)
            // NetworkVarNames: m_flZNear (float)
            // NetworkVarNames: m_bCanHLTVUse (bool)
            // NetworkVarNames: m_bAlignWithParent (bool)
            // NetworkVarNames: m_bDofEnabled (bool)
            // NetworkVarNames: m_flDofNearBlurry (float)
            // NetworkVarNames: m_flDofNearCrisp (float)
            // NetworkVarNames: m_flDofFarCrisp (float)
            // NetworkVarNames: m_flDofFarBlurry (float)
            // NetworkVarNames: m_flDofTiltToGround (float)
            namespace CPointCamera {
                constexpr std::ptrdiff_t m_FOV = 0x4E8; // float32
                constexpr std::ptrdiff_t m_Resolution = 0x4EC; // float32
                constexpr std::ptrdiff_t m_bFogEnable = 0x4F0; // bool
                constexpr std::ptrdiff_t m_FogColor = 0x4F1; // Color
                constexpr std::ptrdiff_t m_flFogStart = 0x4F8; // float32
                constexpr std::ptrdiff_t m_flFogEnd = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flFogMaxDensity = 0x500; // float32
                constexpr std::ptrdiff_t m_bActive = 0x504; // bool
                constexpr std::ptrdiff_t m_bUseScreenAspectRatio = 0x505; // bool
                constexpr std::ptrdiff_t m_flAspectRatio = 0x508; // float32
                constexpr std::ptrdiff_t m_bNoSky = 0x50C; // bool
                constexpr std::ptrdiff_t m_fBrightness = 0x510; // float32
                constexpr std::ptrdiff_t m_flZFar = 0x514; // float32
                constexpr std::ptrdiff_t m_flZNear = 0x518; // float32
                constexpr std::ptrdiff_t m_bCanHLTVUse = 0x51C; // bool
                constexpr std::ptrdiff_t m_bAlignWithParent = 0x51D; // bool
                constexpr std::ptrdiff_t m_bDofEnabled = 0x51E; // bool
                constexpr std::ptrdiff_t m_flDofNearBlurry = 0x520; // float32
                constexpr std::ptrdiff_t m_flDofNearCrisp = 0x524; // float32
                constexpr std::ptrdiff_t m_flDofFarCrisp = 0x528; // float32
                constexpr std::ptrdiff_t m_flDofFarBlurry = 0x52C; // float32
                constexpr std::ptrdiff_t m_flDofTiltToGround = 0x530; // float32
                constexpr std::ptrdiff_t m_TargetFOV = 0x534; // float32
                constexpr std::ptrdiff_t m_DegreesPerSecond = 0x538; // float32
                constexpr std::ptrdiff_t m_bIsOn = 0x53C; // bool
                constexpr std::ptrdiff_t m_pNext = 0x540; // CPointCamera*
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flNextShootTime (GameTime_t)
            namespace CAbility_Synth_Barrage {
                constexpr std::ptrdiff_t m_tLastShotID = 0xB00; // ShotID_t
                constexpr std::ptrdiff_t m_nProjectilesScheduled = 0xD70; // int32
                constexpr std::ptrdiff_t m_ChannelParticle = 0xD74; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flNextShootTime = 0xD78; // GameTime_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityWreckerUltimateVData {
                constexpr std::ptrdiff_t m_BeamParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChargeParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ActiveModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProc
            // Field count: 0
            namespace CCitadel_Modifier_MedicBullets {
            }
            // Parent: CCitadelModifierVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BaseEventProcVData {
                constexpr std::ptrdiff_t m_bProcChanceAffectedByEffectiveness = 0x608; // bool
                constexpr std::ptrdiff_t m_bShouldApplyAbilityCooldown = 0x609; // bool
                constexpr std::ptrdiff_t m_bCanProcMultipleTimesOnOneTarget = 0x60A; // bool
                constexpr std::ptrdiff_t m_bCanProcByOtherObjects = 0x60B; // bool
                constexpr std::ptrdiff_t m_nAbilityTargetTypes = 0x60C; // CITADEL_UNIT_TARGET_TYPE
                constexpr std::ptrdiff_t m_nAbilityTargetFlags = 0x610; // CITADEL_UNIT_TARGET_FLAGS
                constexpr std::ptrdiff_t m_vecProcDamageTypes = 0x618; // CUtlVector<ECitadelDamageType>
                constexpr std::ptrdiff_t m_nRequiredDamageFlags = 0x630; // TakeDamageFlags_t
            }
            // Parent: CScaleFunctionVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CScaleFunctionAbilityPropertyMultiStatsVData {
                constexpr std::ptrdiff_t m_vecScalingStats = 0x40; // CUtlVector<EStatsType>
            }
            // Parent: None
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_hModel (HModelStrong)
            // NetworkVarNames: m_bClientClothCreationSuppressed (bool)
            // NetworkVarNames: m_MeshGroupMask (MeshGroupMask_t)
            // NetworkVarNames: m_nBodyGroupChoices (int32)
            // NetworkVarNames: m_nIdealMotionType (int8)
            namespace CModelState {
                constexpr std::ptrdiff_t m_hModel = 0xD0; // CStrongHandle<InfoForResourceTypeCModel>
                constexpr std::ptrdiff_t m_ModelName = 0xD8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bClientClothCreationSuppressed = 0x118; // bool
                constexpr std::ptrdiff_t m_MeshGroupMask = 0x1D0; // uint64
                constexpr std::ptrdiff_t m_nBodyGroupChoices = 0x220; // CNetworkUtlVectorBase<int32>
                constexpr std::ptrdiff_t m_nIdealMotionType = 0x26A; // int8
                constexpr std::ptrdiff_t m_nForceLOD = 0x26B; // int8
                constexpr std::ptrdiff_t m_nClothUpdateFlags = 0x26C; // int8
            }
            // Parent: CBaseAnimGraph
            // Field count: 2
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // NetworkVarNames: m_hEnemy (EHANDLE)
            // NetworkVarNames: m_CCitadelRegenComponent (CCitadelRegenComponent::Storage_t)
            namespace CNPC_SimpleAnimatingAI {
                constexpr std::ptrdiff_t m_hEnemy = 0xA5C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_CCitadelRegenComponent = 0xA60; // CCitadelRegenComponent
            }
            // Parent: CBaseModifierAura
            // Field count: 0
            namespace CCitadelModifierAura {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            namespace CCitadel_Ability_TurretClone {
                constexpr std::ptrdiff_t m_flTurretExpireTime = 0xBE0; // GameTime_t
                constexpr std::ptrdiff_t m_bTeleported = 0xBE6; // bool
                constexpr std::ptrdiff_t m_bHasTurretReady = 0xBE7; // bool
                constexpr std::ptrdiff_t m_vecTurretPosition = 0xBE8; // Vector
                constexpr std::ptrdiff_t m_nFXIndex = 0xBF4; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_FireBeetles_Debuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierThumper_3VData {
                constexpr std::ptrdiff_t m_DroneParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LoopSound = 0x6E8; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCadenceCrescendoVData {
                constexpr std::ptrdiff_t m_CrescendoAOEModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifierAura>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_SleepBomb {
            }
            // Parent: CLogicalEntity
            // Field count: 1
            namespace CMapSharedEnvironment {
                constexpr std::ptrdiff_t m_targetMapName = 0x4E8; // CUtlSymbolLarge
            }
            // Parent: CAI_Component
            // Field count: 2
            namespace CAI_Behavior {
                constexpr std::ptrdiff_t m_bActive = 0x40; // bool
                constexpr std::ptrdiff_t m_bOverrode = 0x41; // bool
            }
            // Parent: CBaseModelEntity
            // Field count: 12
            //
            // Metadata:
            // NetworkVarNames: m_vecLadderDir (Vector)
            // NetworkVarNames: m_vecPlayerMountPositionTop (Vector)
            // NetworkVarNames: m_vecPlayerMountPositionBottom (Vector)
            // NetworkVarNames: m_flAutoRideSpeed (float)
            // NetworkVarNames: m_bFakeLadder (bool)
            namespace CFuncLadder {
                constexpr std::ptrdiff_t m_vecLadderDir = 0x7C0; // Vector
                constexpr std::ptrdiff_t m_Dismounts = 0x7D0; // CUtlVector<CHandle<CInfoLadderDismount>>
                constexpr std::ptrdiff_t m_vecLocalTop = 0x7E8; // Vector
                constexpr std::ptrdiff_t m_vecPlayerMountPositionTop = 0x7F4; // Vector
                constexpr std::ptrdiff_t m_vecPlayerMountPositionBottom = 0x800; // Vector
                constexpr std::ptrdiff_t m_flAutoRideSpeed = 0x80C; // float32
                constexpr std::ptrdiff_t m_bDisabled = 0x810; // bool
                constexpr std::ptrdiff_t m_bFakeLadder = 0x811; // bool
                constexpr std::ptrdiff_t m_bHasSlack = 0x812; // bool
                constexpr std::ptrdiff_t m_surfacePropName = 0x818; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnPlayerGotOnLadder = 0x820; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPlayerGotOffLadder = 0x848; // CEntityIOOutput
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Thumper_EnemyPulled_VData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_iBonusHealth (int)
            // NetworkVarNames: m_hTarget (CHandle<CBaseEntity>)
            namespace CCitadel_Ability_UltCombo {
                constexpr std::ptrdiff_t m_hTargetComboModifier = 0xB00; // CModifierHandleTyped<CCitadelModifier>
                constexpr std::ptrdiff_t m_flLastAttackTime = 0xB18; // GameTime_t
                constexpr std::ptrdiff_t m_nAttackNum = 0xB1C; // int32
                constexpr std::ptrdiff_t m_iBonusHealth = 0xBC8; // int32
                constexpr std::ptrdiff_t m_hTarget = 0xBCC; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Rolling_FireBall {
                constexpr std::ptrdiff_t m_hActiveProjectile = 0xB00; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Forge_MiniTurret_InnateModifier {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_PowerSurge {
                constexpr std::ptrdiff_t m_flNextProcTime = 0xB00; // GameTime_t
                constexpr std::ptrdiff_t m_flBaseCooldown = 0xB04; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_DivinersKevlarBuff {
            }
            // Parent: CTier3BossAbility
            // Field count: 1
            namespace CCitadel_Ability_Tier3Boss_LaserBeam {
                constexpr std::ptrdiff_t m_pBeamModifier = 0xB00; // CModifierHandleTyped<CCitadelModifier>[1]
            }
            // Parent: CCitadelModifierVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_InvisVData {
                constexpr std::ptrdiff_t m_InvisLoopParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_InvisDetectRadiusParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_InvisRevealedParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flDesatFactor = 0x8A8; // float32
                constexpr std::ptrdiff_t m_strInvisRevealedSound = 0x8B0; // CSoundEventName
                constexpr std::ptrdiff_t m_bFadeInsteadOfRemoveOnBulletFire = 0x8C0; // bool
                constexpr std::ptrdiff_t m_bFadeInsteadOfRemoveOnAbilityUse = 0x8C1; // bool
                constexpr std::ptrdiff_t m_bFadeToVisibleAtEndOfDuration = 0x8C2; // bool
                constexpr std::ptrdiff_t m_flMinCloak = 0x8C4; // float32
                constexpr std::ptrdiff_t m_flMaxCloak = 0x8C8; // float32
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 29
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_BreakablePropVData {
                constexpr std::ptrdiff_t m_bBreakOnDodgeTouch = 0x28; // bool
                constexpr std::ptrdiff_t m_bRenderAfterDeath = 0x29; // bool
                constexpr std::ptrdiff_t m_bSolidAfterDeath = 0x2A; // bool
                constexpr std::ptrdiff_t m_bIsPermanent = 0x2B; // bool
                constexpr std::ptrdiff_t m_bDamagedByBullets = 0x2C; // bool
                constexpr std::ptrdiff_t m_bDamagedByMelee = 0x2D; // bool
                constexpr std::ptrdiff_t m_bDamagedByAbilities = 0x2E; // bool
                constexpr std::ptrdiff_t m_hModel = 0x30; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_sAnimgraphParamDamageReceived = 0x110; // CGlobalSymbol
                constexpr std::ptrdiff_t m_sAnimgraphParamOnHit = 0x118; // CGlobalSymbol
                constexpr std::ptrdiff_t m_sAnimgraphParamOnRespawn = 0x120; // CGlobalSymbol
                constexpr std::ptrdiff_t m_sBreakSound = 0x128; // CSoundEventName
                constexpr std::ptrdiff_t m_sDamageSound = 0x138; // CSoundEventName
                constexpr std::ptrdiff_t m_sHeavyDamageSound = 0x148; // CSoundEventName
                constexpr std::ptrdiff_t m_sHitIndicatorSound = 0x158; // CSoundEventName
                constexpr std::ptrdiff_t m_iHealth = 0x168; // int32
                constexpr std::ptrdiff_t m_flInitialSpawnTime = 0x16C; // float32
                constexpr std::ptrdiff_t m_flRespawnTime = 0x170; // float32
                constexpr std::ptrdiff_t m_flInitialSpawnTimeTest = 0x174; // float32
                constexpr std::ptrdiff_t m_flRespawnTimeTest = 0x178; // float32
                constexpr std::ptrdiff_t m_bIsMantleable = 0x17C; // bool
                constexpr std::ptrdiff_t m_flPrimaryDropChance = 0x180; // float32
                constexpr std::ptrdiff_t m_eRollType = 0x184; // ECitadelRandomRollTypes
                constexpr std::ptrdiff_t m_vecPrimaryPickups = 0x188; // CUtlVector<BreakablePowerupDropDefinition_t>
                constexpr std::ptrdiff_t m_iMatchTimeMinsForLevel2Pickups = 0x1A0; // int32
                constexpr std::ptrdiff_t m_vecPickups_lv2 = 0x1A8; // CUtlVector<BreakablePowerupDropDefinition_t>
                constexpr std::ptrdiff_t m_iMatchTimeMinsForLevel3Pickups = 0x1C0; // int32
                constexpr std::ptrdiff_t m_vecPickups_lv3 = 0x1C8; // CUtlVector<BreakablePowerupDropDefinition_t>
                constexpr std::ptrdiff_t m_iLootListDeckSize = 0x1E0; // int32
            }
            // Parent: CLogicalEntity
            // Field count: 8
            namespace CPathKeyFrame {
                constexpr std::ptrdiff_t m_Origin = 0x4E8; // Vector
                constexpr std::ptrdiff_t m_Angles = 0x4F4; // QAngle
                constexpr std::ptrdiff_t m_qAngle = 0x500; // Quaternion
                constexpr std::ptrdiff_t m_iNextKey = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flNextTime = 0x518; // float32
                constexpr std::ptrdiff_t m_pNextKey = 0x520; // CPathKeyFrame*
                constexpr std::ptrdiff_t m_pPrevKey = 0x528; // CPathKeyFrame*
                constexpr std::ptrdiff_t m_flMoveSpeed = 0x530; // float32
            }
            // Parent: CBaseModelEntity
            // Field count: 3
            namespace CFuncInteractionLayerClip {
                constexpr std::ptrdiff_t m_bDisabled = 0x7C0; // bool
                constexpr std::ptrdiff_t m_iszInteractsAs = 0x7C8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszInteractsWith = 0x7D0; // CUtlSymbolLarge
            }
            // Parent: None
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_Attributes (CEconItemAttribute)
            namespace CAttributeList {
                constexpr std::ptrdiff_t m_Attributes = 0x8; // CUtlVectorEmbeddedNetworkVar<CEconItemAttribute>
                constexpr std::ptrdiff_t m_pManager = 0x70; // CAttributeManager*
            }
            // Parent: CCitadel_Ability_PrimaryWeaponVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCadencePrimaryWeaponVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x15B0; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_CrowdControl {
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 2
            namespace CCitadel_Modifier_VandalSurge {
                constexpr std::ptrdiff_t m_vecFloatDest = 0x138; // Vector
                constexpr std::ptrdiff_t m_vecStartingPos = 0x144; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_RestorativeGoo {
                constexpr std::ptrdiff_t m_flEarliestBreakoutTime = 0xC0; // GameTime_t
                constexpr std::ptrdiff_t m_hGooCube = 0x3A0; // CHandle<CCitadel_RestorativeGooCube>
                constexpr std::ptrdiff_t m_flBreakoutPercentage = 0x3A4; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Upgrade_KineticSashTriggered_VData {
                constexpr std::ptrdiff_t m_TriggeredSound = 0x608; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Tech_BleedVData {
                constexpr std::ptrdiff_t m_DamageParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_SelfBuffModifierVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CGameRules
            // Field count: 0
            namespace CMultiplayRules {
            }
            // Parent: CDynamicProp
            // Field count: 1
            namespace COrnamentProp {
                constexpr std::ptrdiff_t m_initialOwner = 0xCF8; // CUtlSymbolLarge
            }
            // Parent: CCitadel_Item
            // Field count: 3
            namespace CCitadel_Upgrade_StabilizingTripod {
                constexpr std::ptrdiff_t m_vecDeployedSentries = 0xB20; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vDeployPosition = 0xB38; // Vector
                constexpr std::ptrdiff_t m_vDeployAngles = 0xB44; // QAngle
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_RegeneratingBulletShield {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ItemPickupTimer {
                constexpr std::ptrdiff_t m_bSilenceApplied = 0xC0; // bool
            }
            // Parent: CLogicalEntity
            // Field count: 1
            namespace CLogicGameEvent {
                constexpr std::ptrdiff_t m_iszEventName = 0x4E8; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Field count: 2
            namespace CEnvMuzzleFlash {
                constexpr std::ptrdiff_t m_flScale = 0x4E8; // float32
                constexpr std::ptrdiff_t m_iszParentAttachment = 0x4F0; // CUtlSymbolLarge
            }
            // Parent: CAI_Motor
            // Field count: 0
            namespace CAI_CitadelPlayerBotMotor {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Mirage_SandPhantom_Passive_Victim {
                constexpr std::ptrdiff_t m_flLastProcTime = 0xD0; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_Upgrade_KineticSashTriggered {
                constexpr std::ptrdiff_t m_nBonusClip = 0xC0; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_DamageResistanceVData {
                constexpr std::ptrdiff_t m_flDamageResistancePerSecond = 0x608; // float32
                constexpr std::ptrdiff_t m_flTickInterval = 0x60C; // float32
                constexpr std::ptrdiff_t m_flDamageResistanceBonusPerGameMinute = 0x610; // float32
            }
            // Parent: CCitadel_Item
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_nKillsEarned (int)
            namespace CCitadel_WeaponUpgrade_GlassCannon {
                constexpr std::ptrdiff_t m_nKillsEarned = 0xB20; // int32
            }
            // Parent: CBaseEntity
            // Field count: 8
            namespace CPhysicsSpring {
                constexpr std::ptrdiff_t m_flFrequency = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flDampingRatio = 0x4F4; // float32
                constexpr std::ptrdiff_t m_flRestLength = 0x4F8; // float32
                constexpr std::ptrdiff_t m_nameAttachStart = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nameAttachEnd = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_start = 0x510; // Vector
                constexpr std::ptrdiff_t m_end = 0x51C; // Vector
                constexpr std::ptrdiff_t m_teleportTick = 0x528; // uint32
            }
            // Parent: CBaseEntity
            // Field count: 17
            //
            // Metadata:
            // NetworkVarNames: m_Entity_hLightProbeTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_hLightProbeDirectLightIndicesTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_hLightProbeDirectLightScalarsTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_hLightProbeDirectLightShadowsTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_vBoxMins (Vector)
            // NetworkVarNames: m_Entity_vBoxMaxs (Vector)
            // NetworkVarNames: m_Entity_bMoveable (bool)
            // NetworkVarNames: m_Entity_nHandshake (int)
            // NetworkVarNames: m_Entity_nPriority (int)
            // NetworkVarNames: m_Entity_bStartDisabled (bool)
            // NetworkVarNames: m_Entity_nLightProbeSizeX (int)
            // NetworkVarNames: m_Entity_nLightProbeSizeY (int)
            // NetworkVarNames: m_Entity_nLightProbeSizeZ (int)
            // NetworkVarNames: m_Entity_nLightProbeAtlasX (int)
            // NetworkVarNames: m_Entity_nLightProbeAtlasY (int)
            // NetworkVarNames: m_Entity_nLightProbeAtlasZ (int)
            // NetworkVarNames: m_Entity_bEnabled (bool)
            namespace CEnvLightProbeVolume {
                constexpr std::ptrdiff_t m_Entity_hLightProbeTexture = 0x14C8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_hLightProbeDirectLightIndicesTexture = 0x14D0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_hLightProbeDirectLightScalarsTexture = 0x14D8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_hLightProbeDirectLightShadowsTexture = 0x14E0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_vBoxMins = 0x14E8; // Vector
                constexpr std::ptrdiff_t m_Entity_vBoxMaxs = 0x14F4; // Vector
                constexpr std::ptrdiff_t m_Entity_bMoveable = 0x1500; // bool
                constexpr std::ptrdiff_t m_Entity_nHandshake = 0x1504; // int32
                constexpr std::ptrdiff_t m_Entity_nPriority = 0x1508; // int32
                constexpr std::ptrdiff_t m_Entity_bStartDisabled = 0x150C; // bool
                constexpr std::ptrdiff_t m_Entity_nLightProbeSizeX = 0x1510; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeSizeY = 0x1514; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeSizeZ = 0x1518; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeAtlasX = 0x151C; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeAtlasY = 0x1520; // int32
                constexpr std::ptrdiff_t m_Entity_nLightProbeAtlasZ = 0x1524; // int32
                constexpr std::ptrdiff_t m_Entity_bEnabled = 0x1531; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Trapper_SpiderJar_VData {
                constexpr std::ptrdiff_t m_SpiderExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_JarExplodeParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SpiritStealDebuffModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_StatStealBaseVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Mirage_FireScarabs_WatcherVData {
                constexpr std::ptrdiff_t m_HealModifier = 0x628; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTargetdummy1VData {
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityRollingFireBallVData {
                constexpr std::ptrdiff_t m_flBallLifetime = 0x1560; // float32
                constexpr std::ptrdiff_t m_flBallStepUpHeight = 0x1564; // float32
                constexpr std::ptrdiff_t m_flBallDistAboveGround = 0x1568; // float32
                constexpr std::ptrdiff_t m_flBallFloatDownRate = 0x156C; // float32
                constexpr std::ptrdiff_t m_flBallSpeed = 0x1570; // float32
                constexpr std::ptrdiff_t m_flBallTraceRadius = 0x1574; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_hHookVictim (EHANDLE)
            // NetworkVarNames: m_hProjectile (EHANDLE)
            // NetworkVarNames: m_vecHookTargetStartPos (Vector)
            namespace CCitadel_Ability_Hook {
                constexpr std::ptrdiff_t m_hHookVictim = 0xB00; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hProjectile = 0xB04; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vecHookTargetStartPos = 0xB08; // Vector
                constexpr std::ptrdiff_t m_bProjectileHit = 0xB14; // bool
                constexpr std::ptrdiff_t m_flLastUppercutRestoreTime = 0xB18; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_VoidSphere {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Bull_Heal {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_WeaponPowerForHealthVData {
                constexpr std::ptrdiff_t m_ActiveBuff = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_SuperNeutralChargeActive {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_InvisFading {
            }
            // Parent: CCitadel_BreakablePropPickup
            // Field count: 0
            namespace CCitadel_BreakablePropModifierPickup {
            }
            // Parent: CTriggerPush
            // Field count: 1
            namespace CScriptTriggerPush {
                constexpr std::ptrdiff_t m_vExtent = 0x9C8; // Vector
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Rutger_Pulse_Aura_VData {
                constexpr std::ptrdiff_t m_empWaveParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CFuncBrush
            // Field count: 4
            namespace CCitadelZapTrigger {
                constexpr std::ptrdiff_t m_flShootAfterEnteringTime = 0x7E0; // float32
                constexpr std::ptrdiff_t m_flWaitForNextShootTime = 0x7E4; // float32
                constexpr std::ptrdiff_t m_flPercentMaxHealthDamage = 0x7E8; // float32
                constexpr std::ptrdiff_t m_strShootOrigin = 0x7F0; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ControlPointBlockerAuraTarget {
            }
            // Parent: CBaseEntity
            // Field count: 1
            namespace CEnvEntityIgniter {
                constexpr std::ptrdiff_t m_flLifetime = 0x4E8; // float32
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            namespace CFuncWall {
                constexpr std::ptrdiff_t m_nState = 0x7C0; // int32
            }
            // Parent: CPointEntity
            // Field count: 1
            namespace CPointChildModifier {
                constexpr std::ptrdiff_t m_bOrphanInsteadOfDeletingChildrenOnRemove = 0x4E8; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_PlasmaFlux_WeaponDamage_VData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_ShieldedSentry {
                constexpr std::ptrdiff_t m_vecDeployedSentries = 0xB00; // CUtlVector<CHandle<CNPC_SimpleAnimatingAI>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_AblativeCoatResistBuffVData {
                constexpr std::ptrdiff_t m_ResistBuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ReloadSpeed {
                constexpr std::ptrdiff_t m_flReloadSpeed = 0xC0; // float32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_TechCleave {
            }
            // Parent: CBaseModelEntity
            // Field count: 18
            //
            // Metadata:
            // NetworkVarNames: m_vecConnections (CHandle<CCitadelZipLineNode>)
            // NetworkVarNames: m_eCaptureState (int16)
            // NetworkVarNames: m_iPrimaryLane (int16)
            // NetworkVarNames: m_nRopesParity (int16)
            // NetworkVarNames: m_bCornerNode (bool)
            // NetworkVarNames: m_bCapturable (bool)
            // NetworkVarNames: m_bAlwaysUsable (bool)
            // NetworkVarNames: m_bOneWay (bool)
            // NetworkVarNames: m_bDisableZippingToByPlayers (bool)
            // NetworkVarNames: m_bUseForMinimapDrawing (bool)
            // NetworkVarNames: m_hGuardingBoss (EHANDLE)
            // NetworkVarNames: m_flRopeRadius (float)
            // NetworkVarNames: m_bEnabled (bool)
            namespace CCitadelZipLineNode {
                constexpr std::ptrdiff_t m_vecConnections = 0x7D0; // CNetworkUtlVectorBase<CHandle<CCitadelZipLineNode>>
                constexpr std::ptrdiff_t m_vTangentIn = 0x81C; // Vector
                constexpr std::ptrdiff_t m_vTangentOut = 0x828; // Vector
                constexpr std::ptrdiff_t m_strGuardBossName = 0x838; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strGuardBossName2 = 0x840; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strGuardBossName3 = 0x848; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_eCaptureState = 0x850; // int16
                constexpr std::ptrdiff_t m_iPrimaryLane = 0x852; // int16
                constexpr std::ptrdiff_t m_nRopesParity = 0x854; // int16
                constexpr std::ptrdiff_t m_bCornerNode = 0x856; // bool
                constexpr std::ptrdiff_t m_bCapturable = 0x857; // bool
                constexpr std::ptrdiff_t m_bAlwaysUsable = 0x858; // bool
                constexpr std::ptrdiff_t m_bOneWay = 0x859; // bool
                constexpr std::ptrdiff_t m_bDisableZippingToByPlayers = 0x85A; // bool
                constexpr std::ptrdiff_t m_bUseForMinimapDrawing = 0x85B; // bool
                constexpr std::ptrdiff_t m_hGuardingBoss = 0x85C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flRopeRadius = 0x860; // float32
                constexpr std::ptrdiff_t m_bEnabled = 0x864; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CBaseModifierAura {
                constexpr std::ptrdiff_t m_hAuraUnits = 0xC0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_hAmbientEffect = 0xD8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flOverrideRadius = 0xDC; // float32
            }
            // Parent: CLogicalEntity
            // Field count: 3
            namespace CLogicAutosave {
                constexpr std::ptrdiff_t m_bForceNewLevelUnit = 0x4E8; // bool
                constexpr std::ptrdiff_t m_minHitPoints = 0x4EC; // int32
                constexpr std::ptrdiff_t m_minHitPointsToCommit = 0x4F0; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Synth_Affliction_VData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AoEParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_flDissipationRate (float)
            // NetworkVarNames: m_flDissipationTime (GameTime_t)
            // NetworkVarNames: m_flHeatTime (GameTime_t)
            // NetworkVarNames: m_flOverheatSoundTime (GameTime_t)
            // NetworkVarNames: m_bOverheating (bool)
            namespace CCitadel_Ability_Tokamak_HeatSinks_Inherent {
                constexpr std::ptrdiff_t m_nIntervalsElapsed = 0xB00; // int32
                constexpr std::ptrdiff_t m_NextShotTime = 0xB04; // GameTime_t
                constexpr std::ptrdiff_t m_flDissipationRate = 0xB08; // float32
                constexpr std::ptrdiff_t m_flDissipationTime = 0xB0C; // GameTime_t
                constexpr std::ptrdiff_t m_flHeatTime = 0xB10; // GameTime_t
                constexpr std::ptrdiff_t m_flOverheatSoundTime = 0xB14; // GameTime_t
                constexpr std::ptrdiff_t m_bOverheating = 0xB18; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Viper_Ability04VData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PetrifyModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_VoidSphereBuffVData {
                constexpr std::ptrdiff_t m_RapidFireParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Surging_Power {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_CQC_ProcVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Tier3_DamagePulseVData {
                constexpr std::ptrdiff_t m_TargetParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strPulseTickSound = 0x6E8; // CSoundEventName
                constexpr std::ptrdiff_t m_iMaxTargets = 0x6F8; // int32
                constexpr std::ptrdiff_t m_flRadius = 0x6FC; // float32
                constexpr std::ptrdiff_t m_flDamagePerPulse = 0x700; // float32
                constexpr std::ptrdiff_t m_flTickRate = 0x704; // float32
            }
            // Parent: CEntityComponent
            // Field count: 5
            namespace CRenderComponent {
                constexpr std::ptrdiff_t __m_pChainEntity = 0x10; // CNetworkVarChainer
                constexpr std::ptrdiff_t m_bIsRenderingWithViewModels = 0x50; // bool
                constexpr std::ptrdiff_t m_nSplitscreenFlags = 0x54; // uint32
                constexpr std::ptrdiff_t m_bEnableRendering = 0x60; // bool
                constexpr std::ptrdiff_t m_bInterpolationReadyToDraw = 0xB0; // bool
            }
            // Parent: CEnvSoundscape
            // Field count: 1
            namespace CEnvSoundscapeProxy {
                constexpr std::ptrdiff_t m_MainSoundscapeName = 0x588; // CUtlSymbolLarge
            }
            // Parent: CSoundEventEntity
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_vecCornerPairsNetworked (SoundeventPathCornerPairNetworked_t)
            namespace CSoundEventPathCornerEntity {
                constexpr std::ptrdiff_t m_iszPathCorner = 0x5A0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iCountMax = 0x5A8; // int32
                constexpr std::ptrdiff_t m_flDistanceMax = 0x5AC; // float32
                constexpr std::ptrdiff_t m_flDistMaxSqr = 0x5B0; // float32
                constexpr std::ptrdiff_t m_flDotProductMax = 0x5B4; // float32
                constexpr std::ptrdiff_t m_bPlaying = 0x5B8; // bool
                constexpr std::ptrdiff_t m_vecCornerPairsNetworked = 0x5E0; // CNetworkUtlVectorBase<SoundeventPathCornerPairNetworked_t>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_angBeamAngles (QAngle)
            namespace CCitadel_Ability_Tokamak_HotShot {
                constexpr std::ptrdiff_t m_flDPS = 0xC78; // float32
                constexpr std::ptrdiff_t m_flNextDamageTick = 0xC7C; // GameTime_t
                constexpr std::ptrdiff_t m_vStart = 0xC80; // Vector
                constexpr std::ptrdiff_t m_vEnd = 0xC8C; // Vector
                constexpr std::ptrdiff_t m_vecEntitiesHit = 0xC98; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_angBeamAngles = 0xCB0; // QAngle
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_WreckerScrapBlastDebuffVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 6
            namespace CCitadel_Modifier_IceDome {
                constexpr std::ptrdiff_t m_hBlocker = 0xC0; // CHandle<CCitadel_Ice_Dome_Blocker>
                constexpr std::ptrdiff_t m_hFriendlyAura = 0xC4; // CHandle<CPointModifierThinker>
                constexpr std::ptrdiff_t m_hEnemyAura = 0xC8; // CHandle<CPointModifierThinker>
                constexpr std::ptrdiff_t m_nParticleIndex = 0xCC; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flStartTime = 0xD0; // GameTime_t
                constexpr std::ptrdiff_t m_vOrigin = 0x1B8; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Parry {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemAOESilenceModifierVData {
                constexpr std::ptrdiff_t m_strSilenceTargetSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_SilenceModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_UtilityUpgrade_AOESmokeBombVData {
                constexpr std::ptrdiff_t m_CastCompleteParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strBuffGainedSound = 0x1688; // CSoundEventName
                constexpr std::ptrdiff_t m_InvisModifier = 0x1698; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItem_WarpStone_VData {
                constexpr std::ptrdiff_t m_CasterModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CasterDebuffModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x15C8; // CSoundEventName
                constexpr std::ptrdiff_t m_CastDelayParticle = 0x15D8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportTrailParticle = 0x16B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flGroundProbeSpeed = 0x1798; // float32
                constexpr std::ptrdiff_t m_flGroundStepDown = 0x179C; // float32
                constexpr std::ptrdiff_t m_flGroundStepUp = 0x17A0; // float32
                constexpr std::ptrdiff_t m_iMaxGroundIterations = 0x17A4; // int32
                constexpr std::ptrdiff_t m_flVelocityScale = 0x17A8; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_SuperAcolytesGlove {
            }
            // Parent: None
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_flGainRate (float)
            // NetworkVarNames: m_flDrainRate (float)
            // NetworkVarNames: m_flMaxValue (float)
            // NetworkVarNames: m_flLatchedValue (float)
            // NetworkVarNames: m_flLatchedTime (GameTime_t)
            // NetworkVarNames: m_eLockonState (ELockonState)
            // NetworkVarNames: m_hTarget (EHANDLE)
            namespace LockonTarget_t {
                constexpr std::ptrdiff_t m_flGainRate = 0x30; // float32
                constexpr std::ptrdiff_t m_flDrainRate = 0x34; // float32
                constexpr std::ptrdiff_t m_flMaxValue = 0x38; // float32
                constexpr std::ptrdiff_t m_nPrevFullStacks = 0x3C; // int32
                constexpr std::ptrdiff_t m_flLatchedValue = 0x40; // float32
                constexpr std::ptrdiff_t m_flLatchedTime = 0x44; // GameTime_t
                constexpr std::ptrdiff_t m_eLockonState = 0x48; // ELockonState
                constexpr std::ptrdiff_t m_hTarget = 0x4C; // CHandle<CBaseEntity>
            }
            // Parent: CEntityComponent
            // Field count: 67
            //
            // Metadata:
            // NetworkVarNames: m_Color (Color)
            // NetworkVarNames: m_SecondaryColor (Color)
            // NetworkVarNames: m_flBrightness (float)
            // NetworkVarNames: m_flBrightnessScale (float)
            // NetworkVarNames: m_flBrightnessMult (float)
            // NetworkVarNames: m_flRange (float)
            // NetworkVarNames: m_flFalloff (float)
            // NetworkVarNames: m_flAttenuation0 (float)
            // NetworkVarNames: m_flAttenuation1 (float)
            // NetworkVarNames: m_flAttenuation2 (float)
            // NetworkVarNames: m_flTheta (float)
            // NetworkVarNames: m_flPhi (float)
            // NetworkVarNames: m_hLightCookie (HRenderTextureStrong)
            // NetworkVarNames: m_nCascades (int)
            // NetworkVarNames: m_nCastShadows (int)
            // NetworkVarNames: m_nShadowWidth (int)
            // NetworkVarNames: m_nShadowHeight (int)
            // NetworkVarNames: m_bRenderDiffuse (bool)
            // NetworkVarNames: m_nRenderSpecular (int)
            // NetworkVarNames: m_bRenderTransmissive (bool)
            // NetworkVarNames: m_flOrthoLightWidth (float)
            // NetworkVarNames: m_flOrthoLightHeight (float)
            // NetworkVarNames: m_nStyle (int)
            // NetworkVarNames: m_Pattern (CUtlString)
            // NetworkVarNames: m_nCascadeRenderStaticObjects (int)
            // NetworkVarNames: m_flShadowCascadeCrossFade (float)
            // NetworkVarNames: m_flShadowCascadeDistanceFade (float)
            // NetworkVarNames: m_flShadowCascadeDistance0 (float)
            // NetworkVarNames: m_flShadowCascadeDistance1 (float)
            // NetworkVarNames: m_flShadowCascadeDistance2 (float)
            // NetworkVarNames: m_flShadowCascadeDistance3 (float)
            // NetworkVarNames: m_nShadowCascadeResolution0 (int)
            // NetworkVarNames: m_nShadowCascadeResolution1 (int)
            // NetworkVarNames: m_nShadowCascadeResolution2 (int)
            // NetworkVarNames: m_nShadowCascadeResolution3 (int)
            // NetworkVarNames: m_bUsesBakedShadowing (bool)
            // NetworkVarNames: m_nShadowPriority (int)
            // NetworkVarNames: m_nBakedShadowIndex (int)
            // NetworkVarNames: m_bRenderToCubemaps (bool)
            // NetworkVarNames: m_nDirectLight (int)
            // NetworkVarNames: m_nIndirectLight (int)
            // NetworkVarNames: m_flFadeMinDist (float)
            // NetworkVarNames: m_flFadeMaxDist (float)
            // NetworkVarNames: m_flShadowFadeMinDist (float)
            // NetworkVarNames: m_flShadowFadeMaxDist (float)
            // NetworkVarNames: m_bEnabled (bool)
            // NetworkVarNames: m_bFlicker (bool)
            // NetworkVarNames: m_bPrecomputedFieldsValid (bool)
            // NetworkVarNames: m_vPrecomputedBoundsMins (Vector)
            // NetworkVarNames: m_vPrecomputedBoundsMaxs (Vector)
            // NetworkVarNames: m_vPrecomputedOBBOrigin (Vector)
            // NetworkVarNames: m_vPrecomputedOBBAngles (QAngle)
            // NetworkVarNames: m_vPrecomputedOBBExtent (Vector)
            // NetworkVarNames: m_flPrecomputedMaxRange (float)
            // NetworkVarNames: m_nFogLightingMode (int)
            // NetworkVarNames: m_flFogContributionStength (float)
            // NetworkVarNames: m_flNearClipPlane (float)
            // NetworkVarNames: m_SkyColor (Color)
            // NetworkVarNames: m_flSkyIntensity (float)
            // NetworkVarNames: m_SkyAmbientBounce (Color)
            // NetworkVarNames: m_bUseSecondaryColor (bool)
            // NetworkVarNames: m_bMixedShadows (bool)
            // NetworkVarNames: m_flLightStyleStartTime (GameTime_t)
            // NetworkVarNames: m_flCapsuleLength (float)
            // NetworkVarNames: m_flMinRoughness (float)
            namespace CLightComponent {
                constexpr std::ptrdiff_t __m_pChainEntity = 0x38; // CNetworkVarChainer
                constexpr std::ptrdiff_t m_Color = 0x75; // Color
                constexpr std::ptrdiff_t m_SecondaryColor = 0x79; // Color
                constexpr std::ptrdiff_t m_flBrightness = 0x80; // float32
                constexpr std::ptrdiff_t m_flBrightnessScale = 0x84; // float32
                constexpr std::ptrdiff_t m_flBrightnessMult = 0x88; // float32
                constexpr std::ptrdiff_t m_flRange = 0x8C; // float32
                constexpr std::ptrdiff_t m_flFalloff = 0x90; // float32
                constexpr std::ptrdiff_t m_flAttenuation0 = 0x94; // float32
                constexpr std::ptrdiff_t m_flAttenuation1 = 0x98; // float32
                constexpr std::ptrdiff_t m_flAttenuation2 = 0x9C; // float32
                constexpr std::ptrdiff_t m_flTheta = 0xA0; // float32
                constexpr std::ptrdiff_t m_flPhi = 0xA4; // float32
                constexpr std::ptrdiff_t m_hLightCookie = 0xA8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_nCascades = 0xB0; // int32
                constexpr std::ptrdiff_t m_nCastShadows = 0xB4; // int32
                constexpr std::ptrdiff_t m_nShadowWidth = 0xB8; // int32
                constexpr std::ptrdiff_t m_nShadowHeight = 0xBC; // int32
                constexpr std::ptrdiff_t m_bRenderDiffuse = 0xC0; // bool
                constexpr std::ptrdiff_t m_nRenderSpecular = 0xC4; // int32
                constexpr std::ptrdiff_t m_bRenderTransmissive = 0xC8; // bool
                constexpr std::ptrdiff_t m_flOrthoLightWidth = 0xCC; // float32
                constexpr std::ptrdiff_t m_flOrthoLightHeight = 0xD0; // float32
                constexpr std::ptrdiff_t m_nStyle = 0xD4; // int32
                constexpr std::ptrdiff_t m_Pattern = 0xD8; // CUtlString
                constexpr std::ptrdiff_t m_nCascadeRenderStaticObjects = 0xE0; // int32
                constexpr std::ptrdiff_t m_flShadowCascadeCrossFade = 0xE4; // float32
                constexpr std::ptrdiff_t m_flShadowCascadeDistanceFade = 0xE8; // float32
                constexpr std::ptrdiff_t m_flShadowCascadeDistance0 = 0xEC; // float32
                constexpr std::ptrdiff_t m_flShadowCascadeDistance1 = 0xF0; // float32
                constexpr std::ptrdiff_t m_flShadowCascadeDistance2 = 0xF4; // float32
                constexpr std::ptrdiff_t m_flShadowCascadeDistance3 = 0xF8; // float32
                constexpr std::ptrdiff_t m_nShadowCascadeResolution0 = 0xFC; // int32
                constexpr std::ptrdiff_t m_nShadowCascadeResolution1 = 0x100; // int32
                constexpr std::ptrdiff_t m_nShadowCascadeResolution2 = 0x104; // int32
                constexpr std::ptrdiff_t m_nShadowCascadeResolution3 = 0x108; // int32
                constexpr std::ptrdiff_t m_bUsesBakedShadowing = 0x10C; // bool
                constexpr std::ptrdiff_t m_nShadowPriority = 0x110; // int32
                constexpr std::ptrdiff_t m_nBakedShadowIndex = 0x114; // int32
                constexpr std::ptrdiff_t m_bRenderToCubemaps = 0x118; // bool
                constexpr std::ptrdiff_t m_nDirectLight = 0x11C; // int32
                constexpr std::ptrdiff_t m_nIndirectLight = 0x120; // int32
                constexpr std::ptrdiff_t m_flFadeMinDist = 0x124; // float32
                constexpr std::ptrdiff_t m_flFadeMaxDist = 0x128; // float32
                constexpr std::ptrdiff_t m_flShadowFadeMinDist = 0x12C; // float32
                constexpr std::ptrdiff_t m_flShadowFadeMaxDist = 0x130; // float32
                constexpr std::ptrdiff_t m_bEnabled = 0x134; // bool
                constexpr std::ptrdiff_t m_bFlicker = 0x135; // bool
                constexpr std::ptrdiff_t m_bPrecomputedFieldsValid = 0x136; // bool
                constexpr std::ptrdiff_t m_vPrecomputedBoundsMins = 0x138; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedBoundsMaxs = 0x144; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBOrigin = 0x150; // Vector
                constexpr std::ptrdiff_t m_vPrecomputedOBBAngles = 0x15C; // QAngle
                constexpr std::ptrdiff_t m_vPrecomputedOBBExtent = 0x168; // Vector
                constexpr std::ptrdiff_t m_flPrecomputedMaxRange = 0x174; // float32
                constexpr std::ptrdiff_t m_nFogLightingMode = 0x178; // int32
                constexpr std::ptrdiff_t m_flFogContributionStength = 0x17C; // float32
                constexpr std::ptrdiff_t m_flNearClipPlane = 0x180; // float32
                constexpr std::ptrdiff_t m_SkyColor = 0x184; // Color
                constexpr std::ptrdiff_t m_flSkyIntensity = 0x188; // float32
                constexpr std::ptrdiff_t m_SkyAmbientBounce = 0x18C; // Color
                constexpr std::ptrdiff_t m_bUseSecondaryColor = 0x190; // bool
                constexpr std::ptrdiff_t m_bMixedShadows = 0x191; // bool
                constexpr std::ptrdiff_t m_flLightStyleStartTime = 0x194; // GameTime_t
                constexpr std::ptrdiff_t m_flCapsuleLength = 0x198; // float32
                constexpr std::ptrdiff_t m_flMinRoughness = 0x19C; // float32
                constexpr std::ptrdiff_t m_bPvsModifyEntity = 0x1B0; // bool
            }
            // Parent: CBaseAnimGraph
            // Field count: 1
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_nHitIndex (int)
            namespace CCitadel_BreakableProp {
                constexpr std::ptrdiff_t m_nHitIndex = 0xA48; // int32
            }
            // Parent: CTriggerMultiple
            // Field count: 1
            namespace CScriptTriggerMultiple {
                constexpr std::ptrdiff_t m_vExtent = 0x9B8; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_LifeSteal_Watcher {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_GooGrenade {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_IcePath_Buff {
            }
            // Parent: CCitadelModifier
            // Field count: 7
            namespace CCitadel_Modifier_ProjectMind {
                constexpr std::ptrdiff_t m_particleStart = 0xC0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleEnd = 0xC4; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleTrail = 0xC8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecEndLocation = 0xCC; // Vector
                constexpr std::ptrdiff_t m_vecStartPosition = 0xD8; // Vector
                constexpr std::ptrdiff_t m_flStartDelay = 0xE4; // float32
                constexpr std::ptrdiff_t m_vecApplyOffset = 0xE8; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MetalSkinVData {
                constexpr std::ptrdiff_t m_BuffStartParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffEndParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strHitProcSound = 0x7C8; // CSoundEventName
            }
            // Parent: CTier3BossAbility
            // Field count: 0
            namespace CCitadel_Ability_Tier3Boss_DamagePulse {
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_Core_PushTarget {
                constexpr std::ptrdiff_t m_flImpulseAmount = 0xC0; // float32
                constexpr std::ptrdiff_t m_flTossTime = 0xC4; // GameTime_t
                constexpr std::ptrdiff_t m_bShouldToss = 0xC8; // bool
            }
            // Parent: CSoundOpvarSetPointEntity
            // Field count: 5
            namespace CSoundOpvarSetAutoRoomEntity {
                constexpr std::ptrdiff_t m_traceResults = 0x670; // CUtlVector<SoundOpvarTraceResult_t>
                constexpr std::ptrdiff_t m_doorwayPairs = 0x688; // CUtlVector<AutoRoomDoorwayPairs_t>
                constexpr std::ptrdiff_t m_flSize = 0x6A0; // float32
                constexpr std::ptrdiff_t m_flHeightTolerance = 0x6A4; // float32
                constexpr std::ptrdiff_t m_flSizeSqr = 0x6A8; // float32
            }
            // Parent: None
            // Field count: 0
            namespace CEntityComponent {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifer_Viscous_Goo_Aura_VData {
            }
            // Parent: CCitadelModelEntity
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_bAllowRotatingUp (bool)
            // NetworkVarNames: m_bFixedPosition (bool)
            // NetworkVarNames: m_flShieldOffset (float)
            namespace CCitadel_Shield {
                constexpr std::ptrdiff_t m_bAllowRotatingUp = 0x940; // bool
                constexpr std::ptrdiff_t m_bFixedPosition = 0x941; // bool
                constexpr std::ptrdiff_t m_flShieldOffset = 0x944; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTokamakHotShotVData {
                constexpr std::ptrdiff_t m_LaserModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strLaserStartSound = 0x1570; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserEndSound = 0x1580; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserLoopSound = 0x1590; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserHitSound = 0x15A0; // CSoundEventName
                constexpr std::ptrdiff_t m_ChargeParticle = 0x15B0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BeamParticle = 0x1690; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x1770; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_GroundParticle = 0x1850; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_tDrainLifeStopTime (GameTime_t)
            namespace CCitadel_Ability_LifeDrain {
                constexpr std::ptrdiff_t m_hTarget = 0xB00; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_tDrainLifeStopTime = 0xB04; // GameTime_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_StormCloud {
                constexpr std::ptrdiff_t m_bApplyingVerticalAirDrag = 0xB00; // bool
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SuperAcolytesGlove_VData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_SwingParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FistReadyEffect = 0x808; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBaseAnimGraph
            // Field count: 0
            namespace CCitadel_DeployablePreview {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Rutger_ForceField_Aura {
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace FilterDamageType {
                constexpr std::ptrdiff_t m_iDamageType = 0x540; // int32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Chrono_PulseGrenade {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB0C; // QAngle
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Hornet_Sting {
                constexpr std::ptrdiff_t m_flLastTickTime = 0xC0; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_VeilWalkerWatcher {
                constexpr std::ptrdiff_t m_vPreviousPos = 0xC0; // Vector
            }
            // Parent: CAI_CitadelNPC
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_hOwner (EHANDLE)
            namespace CNPC_HeroCloneTrooper {
                constexpr std::ptrdiff_t m_hOwner = 0x17F4; // CHandle<CBaseEntity>
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CCitadelShopTunnelTrigger {
                constexpr std::ptrdiff_t m_tModifier = 0x990; // CUtlStringToken
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierNikumanVData {
                constexpr std::ptrdiff_t m_SelfParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AOEFriendParticle = 0x728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAmbientLoopingLocalPlayerSound = 0x808; // CSoundEventName
            }
            // Parent: CLogicalEntity
            // Field count: 7
            namespace CPhysMotor {
                constexpr std::ptrdiff_t m_nameAttach = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hAttachedObject = 0x4F0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_spinUp = 0x4F4; // float32
                constexpr std::ptrdiff_t m_additionalAcceleration = 0x4F8; // float32
                constexpr std::ptrdiff_t m_angularAcceleration = 0x4FC; // float32
                constexpr std::ptrdiff_t m_lastTime = 0x500; // GameTime_t
                constexpr std::ptrdiff_t m_motor = 0x518; // CMotorController
            }
            // Parent: CBaseEntity
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_bDisabled (bool)
            // NetworkVarNames: m_iszSoundAreaType (string_t)
            // NetworkVarNames: m_vPos (Vector)
            namespace CSoundAreaEntityBase {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_iszSoundAreaType = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vPos = 0x4F8; // Vector
            }
            // Parent: CCitadel_Modifier_InvisVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_LurkersAmbush_InvisVData {
                constexpr std::ptrdiff_t m_flMaxCameraAngleForSeeing = 0x8D0; // float32
                constexpr std::ptrdiff_t m_flMaxDistanceForSeeing = 0x8D4; // float32
                constexpr std::ptrdiff_t m_flInvisBias = 0x8D8; // float32
                constexpr std::ptrdiff_t m_flSpottedMinTimeToStart = 0x8DC; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Thumper_4 {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_SilenceContraptions {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_bInGround (bool)
            // NetworkVarNames: m_SpinEndTime (GameTime_t)
            namespace CCitadel_Ability_Burrow {
                constexpr std::ptrdiff_t m_bInGround = 0xBE0; // bool
                constexpr std::ptrdiff_t m_SpinEndTime = 0xBE4; // GameTime_t
                constexpr std::ptrdiff_t m_nBurrowEffect = 0xBE8; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Citadel_Bull_Leap_LandingBonuses {
            }
            // Parent: CCitadel_Item_TrackingProjectileApplyModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_Disarm_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x16A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x16B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityProperty_BaseWeaponDamage {
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityProperty_TechDuration {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_nWeaponPower (int)
            namespace CCitadel_WeaponUpgrade_WeaponEater {
                constexpr std::ptrdiff_t m_nWeaponPower = 0xC00; // int32
            }
            // Parent: CBaseTrigger
            // Field count: 14
            namespace CTriggerHurt {
                constexpr std::ptrdiff_t m_flOriginalDamage = 0x990; // float32
                constexpr std::ptrdiff_t m_flDamage = 0x994; // float32
                constexpr std::ptrdiff_t m_flDamageCap = 0x998; // float32
                constexpr std::ptrdiff_t m_flLastDmgTime = 0x99C; // GameTime_t
                constexpr std::ptrdiff_t m_flForgivenessDelay = 0x9A0; // float32
                constexpr std::ptrdiff_t m_bitsDamageInflict = 0x9A4; // DamageTypes_t
                constexpr std::ptrdiff_t m_damageModel = 0x9A8; // int32
                constexpr std::ptrdiff_t m_bNoDmgForce = 0x9AC; // bool
                constexpr std::ptrdiff_t m_vDamageForce = 0x9B0; // Vector
                constexpr std::ptrdiff_t m_thinkAlways = 0x9BC; // bool
                constexpr std::ptrdiff_t m_hurtThinkPeriod = 0x9C0; // float32
                constexpr std::ptrdiff_t m_OnHurt = 0x9C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnHurtPlayer = 0x9F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_hurtEntities = 0xA18; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CLogicalEntity
            // Field count: 13
            namespace CPhysConstraint {
                constexpr std::ptrdiff_t m_nameAttach1 = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nameAttach2 = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hAttach1 = 0x500; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hAttach2 = 0x504; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nameAttachment1 = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nameAttachment2 = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_breakSound = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_forceLimit = 0x520; // float32
                constexpr std::ptrdiff_t m_torqueLimit = 0x524; // float32
                constexpr std::ptrdiff_t m_teleportTick = 0x528; // uint32
                constexpr std::ptrdiff_t m_minTeleportDistance = 0x52C; // float32
                constexpr std::ptrdiff_t m_bSnapObjectPositions = 0x530; // bool
                constexpr std::ptrdiff_t m_OnBreak = 0x538; // CEntityIOOutput
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_FireRateAura {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ComboBreakerHeal {
                constexpr std::ptrdiff_t m_flAmountPerSecond = 0xC0; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BonusDamagePercent {
            }
            // Parent: None
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_flLatchTime (GameTime_t)
            // NetworkVarNames: m_flLatchValue (float)
            namespace AbilityResource_t {
                constexpr std::ptrdiff_t m_flCurrentValue = 0x8; // float32
                constexpr std::ptrdiff_t m_flPrevRegenRate = 0xC; // float32
                constexpr std::ptrdiff_t m_flMaxValue = 0x10; // float32
                constexpr std::ptrdiff_t m_flLatchTime = 0x14; // GameTime_t
                constexpr std::ptrdiff_t m_flLatchValue = 0x18; // float32
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_AnthemAOEVData {
                constexpr std::ptrdiff_t m_AuraParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_BulletArmorReductionAura {
            }
            // Parent: CPointEntity
            // Field count: 4
            namespace CSoundEnt {
                constexpr std::ptrdiff_t m_iFreeSound = 0x4E8; // int32
                constexpr std::ptrdiff_t m_iActiveSound = 0x4EC; // int32
                constexpr std::ptrdiff_t m_cLastActiveSounds = 0x4F0; // int32
                constexpr std::ptrdiff_t m_SoundPool = 0x4F4; // CSound[128]
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoSpawnGroupLandmark {
            }
            // Parent: None
            // Field count: 2
            namespace CCitadel_Ability_CardToss__Card_t {
                constexpr std::ptrdiff_t m_nCardNum = 0x0; // int32
                constexpr std::ptrdiff_t m_nFxIdx = 0x4; // ParticleIndex_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flScopeStartTime (GameTime_t)
            namespace CCitadel_Ability_Hornet_Snipe {
                constexpr std::ptrdiff_t m_flScopeStartTime = 0xDB4; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_HornetMark {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FlameDashBurnVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Near_Climbable_Rope {
            }
            // Parent: CCitadelModifierVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Backdoor_ProtectionVData {
                constexpr std::ptrdiff_t m_flActivationTime = 0x608; // float32
                constexpr std::ptrdiff_t m_flBackdoorProtectionDamageMitigationFromPlayers = 0x60C; // float32
                constexpr std::ptrdiff_t m_flHealthPerSecondRegen = 0x610; // float32
                constexpr std::ptrdiff_t m_flOutOfCombatHealthRegen = 0x614; // float32
                constexpr std::ptrdiff_t m_flOutOfCombatRegenDelay = 0x618; // float32
                constexpr std::ptrdiff_t m_flEffectsLingerTime = 0x61C; // float32
                constexpr std::ptrdiff_t m_ShieldImpactParticle = 0x620; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShieldActiveParticle = 0x700; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strActiveEffectConfigName = 0x7E0; // CUtlString
                constexpr std::ptrdiff_t flShieldImpactDirectionOffset = 0x7E8; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_RootVData {
            }
            // Parent: CAI_Component
            // Field count: 4
            namespace CAI_MotorTransition {
                constexpr std::ptrdiff_t m_nTransitionState = 0x48; // AIMotorTransitionState_t
                constexpr std::ptrdiff_t m_vNavLinkStartPos = 0x4C; // Vector
                constexpr std::ptrdiff_t m_flNavLinkFaceStartTime = 0x58; // GameTime_t
                constexpr std::ptrdiff_t m_bTransitionAnimgraphHasTicked = 0x5C; // bool
            }
            // Parent: CServerOnlyEntity
            // Field count: 17
            namespace CAI_Hint {
                constexpr std::ptrdiff_t m_NodeData = 0x4E8; // HintNodeData
                constexpr std::ptrdiff_t m_hHintOwner = 0x528; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flNextUseTime = 0x52C; // GameTime_t
                constexpr std::ptrdiff_t m_OnNPCStartedUsing = 0x530; // CEntityOutputTemplate<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_OnNPCStoppedUsing = 0x558; // CEntityOutputTemplate<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nodeFOV = 0x580; // float32
                constexpr std::ptrdiff_t m_bNodeFOVCheckBehind = 0x584; // bool
                constexpr std::ptrdiff_t m_vecForward = 0x588; // Vector
                constexpr std::ptrdiff_t m_iszAnimgraphEntryAction = 0x598; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszAnimgraphExitAction = 0x5A0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszAnimgraphEntryCmd = 0x5A8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszAnimgraphExitCmd = 0x5B0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszNavlinkTargetName = 0x5B8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bRemoveOnUnreserved = 0x5C0; // bool
                constexpr std::ptrdiff_t m_hAssociatedEntity = 0x5C4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flInteractionDistance = 0x5C8; // float32
                constexpr std::ptrdiff_t m_flCooldown = 0x5CC; // float32
            }
            // Parent: CPlayerPawnComponent
            // Field count: 15
            //
            // Metadata:
            // NetworkVarNames: m_nToggleButtonDownMask (ButtonBitMask_t)
            // NetworkVarNames: m_flMaxspeed (float32)
            // NetworkVarNames: m_arrForceSubtickMoveWhen (float32)
            namespace CPlayer_MovementServices {
                constexpr std::ptrdiff_t m_nImpulse = 0x40; // int32
                constexpr std::ptrdiff_t m_nButtons = 0x48; // CInButtonState
                constexpr std::ptrdiff_t m_nQueuedButtonDownMask = 0x68; // uint64
                constexpr std::ptrdiff_t m_nQueuedButtonChangeMask = 0x70; // uint64
                constexpr std::ptrdiff_t m_nButtonDoublePressed = 0x78; // uint64
                constexpr std::ptrdiff_t m_pButtonPressedCmdNumber = 0x80; // uint32[64]
                constexpr std::ptrdiff_t m_nLastCommandNumberProcessed = 0x180; // uint32
                constexpr std::ptrdiff_t m_nToggleButtonDownMask = 0x188; // uint64
                constexpr std::ptrdiff_t m_flMaxspeed = 0x198; // float32
                constexpr std::ptrdiff_t m_arrForceSubtickMoveWhen = 0x19C; // float32[4]
                constexpr std::ptrdiff_t m_flForwardMove = 0x1AC; // float32
                constexpr std::ptrdiff_t m_flLeftMove = 0x1B0; // float32
                constexpr std::ptrdiff_t m_flUpMove = 0x1B4; // float32
                constexpr std::ptrdiff_t m_vecLastMovementImpulses = 0x1B8; // Vector
                constexpr std::ptrdiff_t m_vecOldViewAngles = 0x1C4; // QAngle
            }
            // Parent: CBaseTrigger
            // Field count: 3
            namespace CTriggerSave {
                constexpr std::ptrdiff_t m_bForceNewLevelUnit = 0x990; // bool
                constexpr std::ptrdiff_t m_fDangerousTimer = 0x994; // float32
                constexpr std::ptrdiff_t m_minHitPoints = 0x998; // int32
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierKnockdownVData {
                constexpr std::ptrdiff_t m_flSatVolumeRadius = 0x6E8; // float32
                constexpr std::ptrdiff_t m_flSatVolumeFadeOut = 0x6EC; // float32
                constexpr std::ptrdiff_t m_flGravityScale = 0x6F0; // float32
                constexpr std::ptrdiff_t m_flGetUpSeqDuration = 0x6F4; // float32
                constexpr std::ptrdiff_t m_cameraSequenceGetUp = 0x6F8; // CitadelCameraOperationsSequence_t
            }
            // Parent: CPhysConstraint
            // Field count: 12
            namespace CPhysWheelConstraint {
                constexpr std::ptrdiff_t m_flSuspensionFrequency = 0x560; // float32
                constexpr std::ptrdiff_t m_flSuspensionDampingRatio = 0x564; // float32
                constexpr std::ptrdiff_t m_flSuspensionHeightOffset = 0x568; // float32
                constexpr std::ptrdiff_t m_bEnableSuspensionLimit = 0x56C; // bool
                constexpr std::ptrdiff_t m_flMinSuspensionOffset = 0x570; // float32
                constexpr std::ptrdiff_t m_flMaxSuspensionOffset = 0x574; // float32
                constexpr std::ptrdiff_t m_bEnableSteeringLimit = 0x578; // bool
                constexpr std::ptrdiff_t m_flMinSteeringAngle = 0x57C; // float32
                constexpr std::ptrdiff_t m_flMaxSteeringAngle = 0x580; // float32
                constexpr std::ptrdiff_t m_flSteeringAxisFriction = 0x584; // float32
                constexpr std::ptrdiff_t m_flSpinAxisFriction = 0x588; // float32
                constexpr std::ptrdiff_t m_hSteeringMimicsEntity = 0x58C; // CHandle<CBaseEntity>
            }
            // Parent: CPhysConstraint
            // Field count: 6
            namespace CPhysFixed {
                constexpr std::ptrdiff_t m_flLinearFrequency = 0x560; // float32
                constexpr std::ptrdiff_t m_flLinearDampingRatio = 0x564; // float32
                constexpr std::ptrdiff_t m_flAngularFrequency = 0x568; // float32
                constexpr std::ptrdiff_t m_flAngularDampingRatio = 0x56C; // float32
                constexpr std::ptrdiff_t m_bEnableLinearConstraint = 0x570; // bool
                constexpr std::ptrdiff_t m_bEnableAngularConstraint = 0x571; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Mirage_FireBeetles_Debuff_VData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_TangoTether_TetherReceiver {
                constexpr std::ptrdiff_t m_nFXIndex = 0xC0; // ParticleIndex_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_IncendiaryThinkerVData {
                constexpr std::ptrdiff_t m_GroundParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Tier3Boss_Base {
            }
            // Parent: CAI_Component
            // Field count: 8
            namespace CAI_EnemyServices {
                constexpr std::ptrdiff_t m_hEnemy = 0x40; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hLastEnemy = 0x44; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flTimeEnemyAcquired = 0x48; // GameTime_t
                constexpr std::ptrdiff_t m_bHasEnemyAcquired = 0x4C; // bool
                constexpr std::ptrdiff_t m_flTimeLastHadEnemy = 0x50; // GameTime_t
                constexpr std::ptrdiff_t m_bHasLastHadEnemy = 0x54; // bool
                constexpr std::ptrdiff_t m_nEnemiesSerialNumber = 0x58; // int32
                constexpr std::ptrdiff_t m_hEnemyOccluder = 0x5C; // CHandle<CBaseEntity>
            }
            // Parent: CPhysicsProp
            // Field count: 0
            namespace CItemParachute {
            }
            // Parent: CBaseTrigger
            // Field count: 2
            namespace CTriggerNeutralShield {
                constexpr std::ptrdiff_t m_vecPlayers = 0x990; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vecNeutrals = 0x9A8; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadelProjectile
            // Field count: 2
            namespace CCitadel_Projectile_Tier2Boss_RocketBarrage {
                constexpr std::ptrdiff_t m_nLaserParticleIndex = 0x870; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecSmoothedVelocity = 0x874; // Vector
            }
            // Parent: CBaseEntity
            // Field count: 11
            namespace CEnvSoundscape {
                constexpr std::ptrdiff_t m_OnPlay = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_flRadius = 0x510; // float32
                constexpr std::ptrdiff_t m_soundEventName = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bOverrideWithEvent = 0x520; // bool
                constexpr std::ptrdiff_t m_soundscapeIndex = 0x524; // int32
                constexpr std::ptrdiff_t m_soundscapeEntityListId = 0x528; // int32
                constexpr std::ptrdiff_t m_positionNames = 0x530; // CUtlSymbolLarge[8]
                constexpr std::ptrdiff_t m_hProxySoundscape = 0x570; // CHandle<CEnvSoundscape>
                constexpr std::ptrdiff_t m_bDisabled = 0x574; // bool
                constexpr std::ptrdiff_t m_soundscapeName = 0x578; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_soundEventHash = 0x580; // uint32
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 15
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CBasePlayerVData {
                constexpr std::ptrdiff_t m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_vecIntrinsicModifiers = 0x108; // CUtlVector<CEmbeddedSubclass<CCitadelModifier>>
                constexpr std::ptrdiff_t m_flHeadDamageMultiplier = 0x120; // CSkillFloat
                constexpr std::ptrdiff_t m_flChestDamageMultiplier = 0x130; // CSkillFloat
                constexpr std::ptrdiff_t m_flStomachDamageMultiplier = 0x140; // CSkillFloat
                constexpr std::ptrdiff_t m_flArmDamageMultiplier = 0x150; // CSkillFloat
                constexpr std::ptrdiff_t m_flLegDamageMultiplier = 0x160; // CSkillFloat
                constexpr std::ptrdiff_t m_flHoldBreathTime = 0x170; // float32
                constexpr std::ptrdiff_t m_flDrowningDamageInterval = 0x174; // float32
                constexpr std::ptrdiff_t m_nDrowningDamageInitial = 0x178; // int32
                constexpr std::ptrdiff_t m_nDrowningDamageMax = 0x17C; // int32
                constexpr std::ptrdiff_t m_nWaterSpeed = 0x180; // int32
                constexpr std::ptrdiff_t m_flUseRange = 0x184; // float32
                constexpr std::ptrdiff_t m_flUseAngleTolerance = 0x188; // float32
                constexpr std::ptrdiff_t m_flCrouchTime = 0x18C; // float32
            }
            // Parent: CCitadelBaseShivAbility
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_hCurrentTarget (EHANDLE)
            // NetworkVarNames: m_vStartPosition (Vector)
            // NetworkVarNames: m_vDeparturePosition (Vector)
            // NetworkVarNames: m_flDepartureTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flArrivalTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flDrainSuppressEndTime (GameTime_t)
            namespace CCitadel_Ability_Shiv_KillingBlow {
                constexpr std::ptrdiff_t m_bActive = 0xCC0; // bool
                constexpr std::ptrdiff_t m_hCurrentTarget = 0xCC4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vStartPosition = 0xCC8; // Vector
                constexpr std::ptrdiff_t m_vDeparturePosition = 0xCD4; // Vector
                constexpr std::ptrdiff_t m_flDepartureTime = 0xCE0; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flArrivalTime = 0xCF8; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_vLastKnownSafePos = 0xD10; // Vector
                constexpr std::ptrdiff_t m_ChannelParticle = 0xD20; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flDrainSuppressEndTime = 0xD30; // GameTime_t
                constexpr std::ptrdiff_t m_BuffModifier = 0xEF8; // CModifierHandleTyped<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityWreckerSalvageVData {
                constexpr std::ptrdiff_t m_SalvageEnemyModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_StunEnemyModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Chrono_TimeWall_EffectVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffParticle = 0x6F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDamageSound = 0x7D8; // CSoundEventName
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TechBleed_ProcVData {
                constexpr std::ptrdiff_t m_BleedModifier = 0x638; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x648; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            namespace CCitadel_Ability_RocketBarrage {
                constexpr std::ptrdiff_t m_flCurrentTimeScale = 0xCF8; // float32
                constexpr std::ptrdiff_t m_vecAimPos = 0xCFC; // Vector
                constexpr std::ptrdiff_t m_vecAimVel = 0xD08; // Vector
                constexpr std::ptrdiff_t m_flLastUpdateTime = 0xD14; // GameTime_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityBloodShardsVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Upgrade_KineticSash_VData {
                constexpr std::ptrdiff_t m_KineticSashTriggeredModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ClimbRopeSpeedVData {
                constexpr std::ptrdiff_t m_flRampUpTime = 0x608; // float32
                constexpr std::ptrdiff_t m_flPercentageMultiplierStart = 0x60C; // float32
                constexpr std::ptrdiff_t m_flPercentageMultiplierEnd = 0x610; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_DummyUnit {
            }
            // Parent: CEntityComponent
            // Field count: 14
            //
            // Metadata:
            // NetworkVarNames: m_vecAbilities (CHandle<CCitadelBaseAbility>)
            // NetworkVarNames: m_vecUniversalItems (EntitySubclassID_t)
            // NetworkVarNames: m_arPendingAsyncAbilityReservationSlots (int32)
            // NetworkVarNames: m_arPendingAsyncAbilityReservationAbilityIDs (int32)
            // NetworkVarNames: m_hSelectedAbility (CHandle<CCitadelBaseAbility>)
            // NetworkVarNames: m_hPreviouslySelectedAbility (EHANDLE)
            // NetworkVarNames: m_bPreviousAbilityQueued (bool)
            // NetworkVarNames: m_flTimeScale (float)
            // NetworkVarNames: m_flParticleTimeScale (float)
            // NetworkVarNames: m_bInInterruptState (bool)
            // NetworkVarNames: m_ResourceStamina (AbilityResource_t)
            // NetworkVarNames: m_ResourceAbility (AbilityResource_t)
            namespace CCitadelAbilityComponent {
                constexpr std::ptrdiff_t m_vecAbilities = 0x88; // CNetworkUtlVectorBase<CHandle<CCitadelBaseAbility>>
                constexpr std::ptrdiff_t m_vecUniversalItems = 0xA0; // CNetworkUtlVectorBase<CUtlStringToken>
                constexpr std::ptrdiff_t m_arPendingAsyncAbilityReservationSlots = 0xB8; // CNetworkUtlVectorBase<int32>
                constexpr std::ptrdiff_t m_arPendingAsyncAbilityReservationAbilityIDs = 0xD0; // CNetworkUtlVectorBase<int32>
                constexpr std::ptrdiff_t m_hSelectedAbility = 0xE8; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_hPreviouslySelectedAbility = 0xEC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bPreviousAbilityQueued = 0xF0; // bool
                constexpr std::ptrdiff_t m_flTimeScale = 0xF4; // float32
                constexpr std::ptrdiff_t m_flParticleTimeScale = 0xF8; // float32
                constexpr std::ptrdiff_t m_bInInterruptState = 0xFC; // bool
                constexpr std::ptrdiff_t m_ResourceStamina = 0x100; // AbilityResource_t
                constexpr std::ptrdiff_t m_ResourceAbility = 0x120; // AbilityResource_t
                constexpr std::ptrdiff_t m_nExecuteAbilityMask = 0x188; // uint32
                constexpr std::ptrdiff_t m_bSelectedEffectsStarted = 0x190; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_WeaponUpgrade_InstantReload {
                constexpr std::ptrdiff_t m_bIsManualReloading = 0xB20; // bool
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadelModifierAura_Cone {
            }
            // Parent: CSprite
            // Field count: 0
            namespace CSpriteOriented {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTokamakBreachVData {
                constexpr std::ptrdiff_t m_AllySmokeAOEModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_EnemySmokeAOEModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PurgeParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTokamakHeatSinksVData {
                constexpr std::ptrdiff_t m_HeatDotModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_GrandFinale_Buff {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ThrownShiv_Damage_Debuff {
                constexpr std::ptrdiff_t m_nNumTicksRemaining = 0xC0; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_FlameDashVData {
                constexpr std::ptrdiff_t m_FlameDashModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DashBurstSound = 0x1570; // CSoundEventName
                constexpr std::ptrdiff_t m_ChargeHitSound = 0x1580; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSpeedBoost = 0x1590; // CitadelCameraOperationsSequence_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_PrimaryWeaponVData {
                constexpr std::ptrdiff_t m_DOFWhileZoomed = 0x1568; // DOFDesc_t
                constexpr std::ptrdiff_t m_bDOFFarSettingsAreOffsetByGunRange = 0x1578; // bool
                constexpr std::ptrdiff_t m_sDisarmedSound = 0x1580; // CSoundEventName
                constexpr std::ptrdiff_t m_flMinDisarmedSoundInterval = 0x1590; // float32
                constexpr std::ptrdiff_t m_sObstructedShotSound = 0x1598; // CSoundEventName
                constexpr std::ptrdiff_t m_flActionReloadTimingStart = 0x15A8; // float32
                constexpr std::ptrdiff_t m_flActionReloadTimingDuration = 0x15AC; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_Tech_Defender_Shredders_Proc {
            }
            // Parent: CCitadel_Modifier_Out_Of_Combat_Health_Regen
            // Field count: 1
            namespace CCitadel_Modifier_Apex_Watcher {
                constexpr std::ptrdiff_t m_bShouldEnableBuff = 0x138; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ColdFrontAOE_VData {
                constexpr std::ptrdiff_t m_TargetModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ReloadSpeedVData {
                constexpr std::ptrdiff_t m_flReloadSpeedPercent = 0x608; // float32
                constexpr std::ptrdiff_t m_bDestroyAfterReload = 0x60C; // bool
            }
            // Parent: CSoundOpvarSetAABBEntity
            // Field count: 0
            namespace CSoundOpvarSetOBBEntity {
            }
            // Parent: CBeam
            // Field count: 5
            namespace CEnvLaser {
                constexpr std::ptrdiff_t m_iszLaserTarget = 0x860; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_pSprite = 0x868; // CSprite*
                constexpr std::ptrdiff_t m_iszSpriteName = 0x870; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_firePosition = 0x878; // Vector
                constexpr std::ptrdiff_t m_flStartFrame = 0x884; // float32
            }
            // Parent: CTriggerNeutralShield
            // Field count: 0
            namespace CTriggerTier3Phase2Shield {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            namespace CCitadel_Ability_SettingSun {
                constexpr std::ptrdiff_t m_bProjectileActive = 0xB00; // bool
                constexpr std::ptrdiff_t m_TargetPreviews = 0xC90; // CUtlVector<ParticleIndex_t>
                constexpr std::ptrdiff_t m_bWasSelected = 0xD58; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_SilenceProc_Immunity {
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_RegenerativeArmorVData {
                constexpr std::ptrdiff_t m_RegenModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 1
            namespace CCitadel_Modifier_QuickSilver_Watcher {
                constexpr std::ptrdiff_t m_bProcNextHit = 0x210; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_BaseEventProc {
                constexpr std::ptrdiff_t m_vecProcdUnitsThisShot = 0xC0; // CUtlVector<CBaseEntity*>
                constexpr std::ptrdiff_t m_vecTrackedUnitsThisFrame = 0xD8; // CUtlVector<CBaseEntity*>
                constexpr std::ptrdiff_t m_nLastShotId = 0xF0; // ShotID_t
            }
            // Parent: CAI_BaseNPCVData
            // Field count: 49
            //
            // Metadata:
            // MGetKV3ClassDefaults
            // MPropertySuppressBaseClassField
            // MPropertySuppressBaseClassField
            // MPropertySuppressBaseClassField
            // MPropertySuppressBaseClassField
            // MPropertySuppressBaseClassField
            // MPropertySuppressBaseClassField
            namespace CAI_CitadelNPCVData {
                constexpr std::ptrdiff_t m_sAG2VariationName = 0x270; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCNmGraphVariation>>
                constexpr std::ptrdiff_t m_mapBoundAbilities = 0x350; // CUtlOrderedMap<EAbilitySlots_t,CSubclassName<4>>
                constexpr std::ptrdiff_t m_flSightRangePlayers = 0x378; // float32
                constexpr std::ptrdiff_t m_flSightRangeNPCs = 0x37C; // float32
                constexpr std::ptrdiff_t m_MeleeAnimName = 0x380; // CGlobalSymbol
                constexpr std::ptrdiff_t m_flMeleeAttemptRange = 0x388; // float32
                constexpr std::ptrdiff_t m_flMeleeHitRange = 0x38C; // float32
                constexpr std::ptrdiff_t m_MeleeAttackPoints = 0x390; // CUtlVector<float32>
                constexpr std::ptrdiff_t m_flMaxHealthBarDrawDistance = 0x3A8; // float32
                constexpr std::ptrdiff_t m_flWalkSpeed = 0x3AC; // float32
                constexpr std::ptrdiff_t m_flRunSpeed = 0x3B0; // float32
                constexpr std::ptrdiff_t m_flTurnRate = 0x3B4; // float32
                constexpr std::ptrdiff_t m_flAcceleration = 0x3B8; // float32
                constexpr std::ptrdiff_t m_flStepHeight = 0x3BC; // float32
                constexpr std::ptrdiff_t m_navHull = 0x3C0; // int8
                constexpr std::ptrdiff_t m_BeamStartSound = 0x3C8; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamStopSound = 0x3D8; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamPointStartLoopSound = 0x3E8; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamPointEndLoopSound = 0x3F8; // CSoundEventName
                constexpr std::ptrdiff_t m_BeamPointClosestLoopSound = 0x408; // CSoundEventName
                constexpr std::ptrdiff_t m_strAmbientLoopSound = 0x418; // CSoundEventName
                constexpr std::ptrdiff_t m_DeathSound = 0x428; // CSoundEventName
                constexpr std::ptrdiff_t m_strLastHitSound = 0x438; // CSoundEventName
                constexpr std::ptrdiff_t m_bPlayLastHitSound = 0x448; // bool
                constexpr std::ptrdiff_t m_MeleeHitSound = 0x450; // CSoundEventName
                constexpr std::ptrdiff_t m_MeleeHitPlayerSound = 0x460; // CSoundEventName
                constexpr std::ptrdiff_t m_sDefaultMaterialGroupName = 0x470; // CUtlString
                constexpr std::ptrdiff_t m_sEnemyMaterialGroupName = 0x478; // CUtlString
                constexpr std::ptrdiff_t m_sTeam1MaterialGroupName = 0x480; // CUtlString
                constexpr std::ptrdiff_t m_sTeam2MaterialGroupName = 0x488; // CUtlString
                constexpr std::ptrdiff_t m_MeleeSwingParticle = 0x490; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_MeleeActivateParticle = 0x570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flModelScale = 0x650; // float32
                constexpr std::ptrdiff_t m_DeathParticle = 0x658; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealthBarParticle = 0x738; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sHealthBarAttachment = 0x818; // CUtlString
                constexpr std::ptrdiff_t m_HealthBarColorFriend = 0x820; // Color
                constexpr std::ptrdiff_t m_HealthBarColorEnemy = 0x824; // Color
                constexpr std::ptrdiff_t m_HealthBarColorTeam1 = 0x828; // Color
                constexpr std::ptrdiff_t m_HealthBarColorTeam2 = 0x82C; // Color
                constexpr std::ptrdiff_t m_HealthBarColorTeamNeutral = 0x830; // Color
                constexpr std::ptrdiff_t m_flHealthBarOffset = 0x834; // float32
                constexpr std::ptrdiff_t m_bSpawnBreakablesOnDeath = 0x838; // bool
                constexpr std::ptrdiff_t m_flBreakableForceScale = 0x83C; // float32
                constexpr std::ptrdiff_t m_flPhysicsImpulseMultiplier = 0x840; // float32
                constexpr std::ptrdiff_t m_flBeamWeaponWidth = 0x844; // float32
                constexpr std::ptrdiff_t m_flBeamTurnRate = 0x848; // float32
                constexpr std::ptrdiff_t m_BeamWeaponParticle = 0x850; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WeaponInfo = 0x930; // CCitadelWeaponInfo
            }
            // Parent: CSprite
            // Field count: 0
            namespace CCommentaryViewPosition {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_Crescendo_AOE_VData {
                constexpr std::ptrdiff_t m_AuraParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilitySpiderShieldVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Burrow {
                constexpr std::ptrdiff_t m_pUndergroundTrigger = 0xC0; // CHandle<CTriggerBurrowUnderground>
                constexpr std::ptrdiff_t m_flLastDamageTime = 0xC4; // GameTime_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierLashGrappleTargetVData {
                constexpr std::ptrdiff_t m_LockingOnParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LockedOnParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_HornetMark {
                constexpr std::ptrdiff_t m_nFXIndex = 0xB00; // ParticleIndex_t
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_UtilityUpgrade_HealthNova_VData {
                constexpr std::ptrdiff_t m_HealingModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_DebuffImmunityVData {
                constexpr std::ptrdiff_t m_ShieldParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PlayerShieldParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flProgress (float)
            // NetworkVarNames: m_nNumPushers (int)
            namespace CCitadelPayload {
                constexpr std::ptrdiff_t m_hPusherAura = 0xBE0; // CModifierHandleTyped<CCitadelModifierAura>
                constexpr std::ptrdiff_t m_hBlockerAura = 0xBF8; // CModifierHandleTyped<CCitadelModifierAura>
                constexpr std::ptrdiff_t m_flProgress = 0xC28; // float32
                constexpr std::ptrdiff_t m_nNumPushers = 0xC2C; // int32
            }
            // Parent: CTonemapController2
            // Field count: 0
            namespace CTonemapController2Alias_env_tonemap_controller2 {
            }
            // Parent: CNPC_SimpleAnimatingAIVData
            // Field count: 17
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_ShieldedSentryVData {
                constexpr std::ptrdiff_t m_flZShootPostionOffset = 0x108; // float32
                constexpr std::ptrdiff_t m_LaserSightParticle = 0x110; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_KillExplosionParticle = 0x1F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DeployProgressModifier = 0x2D0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_NearDeathModifier = 0x2E0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_IntrinsicModifier = 0x2F0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_sSpawnSound = 0x300; // CSoundEventName
                constexpr std::ptrdiff_t m_sKillExplosionSound = 0x310; // CSoundEventName
                constexpr std::ptrdiff_t m_sTargetAcquiredLocalSound = 0x320; // CSoundEventName
                constexpr std::ptrdiff_t m_sTargetAcquiredSound = 0x330; // CSoundEventName
                constexpr std::ptrdiff_t m_flIdleTurnSpeed = 0x340; // float32
                constexpr std::ptrdiff_t m_flIdleTurnAngles = 0x344; // float32
                constexpr std::ptrdiff_t m_flTrooperTakeDamageMult = 0x348; // float32
                constexpr std::ptrdiff_t m_flNeutralTakeDamageMulti = 0x34C; // float32
                constexpr std::ptrdiff_t m_flNotifyEventTime = 0x350; // float32
                constexpr std::ptrdiff_t m_flNearDeathDuration = 0x354; // float32
                constexpr std::ptrdiff_t m_flMinimapRevealTime = 0x358; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SleepDaggerAsleepVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PostSleepModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityImmobilizeTrapVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PreviewRingParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TrapHighlightParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ArmedParticle = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strTripSound = 0x18E0; // CSoundEventName
                constexpr std::ptrdiff_t m_strExplodeSound = 0x18F0; // CSoundEventName
                constexpr std::ptrdiff_t m_strExpiredSound = 0x1900; // CSoundEventName
                constexpr std::ptrdiff_t m_strImmobilizeTargetSound = 0x1910; // CSoundEventName
                constexpr std::ptrdiff_t m_strArmingSound = 0x1920; // CSoundEventName
                constexpr std::ptrdiff_t m_TrapModifier = 0x1930; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1940; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x1950; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_flDetonateTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flStartTime (GameTime_t)
            namespace CCitadel_Ability_FireBomb {
                constexpr std::ptrdiff_t m_flDetonateTime = 0xC58; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flStartTime = 0xC70; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Item_SmokeBomb_PreCast {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MagicShock_ProcVData {
                constexpr std::ptrdiff_t m_ProcParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_hDamageTrackModifier = 0x718; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CBaseEntity
            // Field count: 4
            namespace CAI_SpeechFilter {
                constexpr std::ptrdiff_t m_iszSubject = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flIdleModifier = 0x4F8; // float32
                constexpr std::ptrdiff_t m_bNeverSayHello = 0x4FC; // bool
                constexpr std::ptrdiff_t m_bDisabled = 0x4FD; // bool
            }
            // Parent: CPhysConstraint
            // Field count: 4
            namespace CPhysPulley {
                constexpr std::ptrdiff_t m_position2 = 0x560; // Vector
                constexpr std::ptrdiff_t m_offset = 0x56C; // Vector[2]
                constexpr std::ptrdiff_t m_addLength = 0x584; // float32
                constexpr std::ptrdiff_t m_gearRatio = 0x588; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Shiv_KillingBlowVData {
                constexpr std::ptrdiff_t m_LeapModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ActiveBuff = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_KillableModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AttackParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1670; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlashParticle = 0x1750; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_KillingBlowCastParticle = 0x1830; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChargeUpSound = 0x1910; // CSoundEventName
                constexpr std::ptrdiff_t m_OnKillSound = 0x1920; // CSoundEventName
                constexpr std::ptrdiff_t m_flPreArrivalAttackStartTime = 0x1930; // float32
                constexpr std::ptrdiff_t m_flKillableGlowRange = 0x1934; // float32
                constexpr std::ptrdiff_t m_flGlowMinTime = 0x1938; // float32
            }
            // Parent: CCitadelBaseShivAbility
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_vStartPosition (Vector)
            // NetworkVarNames: m_vDashDirection (Vector)
            // NetworkVarNames: m_bIsDashing (bool)
            // NetworkVarNames: m_bStartedInAir (bool)
            namespace CCitadel_Ability_ShivDash {
                constexpr std::ptrdiff_t m_vStartPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_vDashDirection = 0xB0C; // Vector
                constexpr std::ptrdiff_t m_bIsDashing = 0xB18; // bool
                constexpr std::ptrdiff_t m_bStartedInAir = 0xB19; // bool
                constexpr std::ptrdiff_t m_vecHitEnemies = 0xB20; // CUtlVector<CEntityIndex>
                constexpr std::ptrdiff_t m_vecLastPosition = 0xB38; // Vector
                constexpr std::ptrdiff_t m_nReductionsLeft = 0xB44; // int32
                constexpr std::ptrdiff_t m_flStuckTime = 0xD78; // GameTime_t
                constexpr std::ptrdiff_t m_hEchoThinker = 0xD7C; // CHandle<CPointModifierThinker>
                constexpr std::ptrdiff_t m_EchoStartTime = 0xD80; // GameTime_t
                constexpr std::ptrdiff_t m_bLetEchoPlay = 0xD84; // bool
            }
            // Parent: CCitadel_Ability_TrooperGrenade
            // Field count: 0
            namespace CCitadel_Ability_TrooperNeutralGrenade {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PlayerPinged {
            }
            // Parent: CServerOnlyEntity
            // Field count: 3
            namespace CCitadelEnergyTower {
                constexpr std::ptrdiff_t m_bEnabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_flDamage = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flRadius = 0x4F0; // float32
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CGameRulesProxy {
            }
            // Parent: CBaseAnimGraph
            // Field count: 8
            //
            // Metadata:
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkIncludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByUserGroup
            // MNetworkUserGroupProxy
            // NetworkVarNames: m_nNextPrimaryAttackTick (GameTick_t)
            // NetworkVarNames: m_flNextPrimaryAttackTickRatio (float32)
            // NetworkVarNames: m_nNextSecondaryAttackTick (GameTick_t)
            // NetworkVarNames: m_flNextSecondaryAttackTickRatio (float32)
            // NetworkVarNames: m_iClip1 (int32)
            // NetworkVarNames: m_iClip2 (int32)
            // NetworkVarNames: m_pReserveAmmo (int)
            namespace CBasePlayerWeapon {
                constexpr std::ptrdiff_t m_nNextPrimaryAttackTick = 0xA48; // GameTick_t
                constexpr std::ptrdiff_t m_flNextPrimaryAttackTickRatio = 0xA4C; // float32
                constexpr std::ptrdiff_t m_nNextSecondaryAttackTick = 0xA50; // GameTick_t
                constexpr std::ptrdiff_t m_flNextSecondaryAttackTickRatio = 0xA54; // float32
                constexpr std::ptrdiff_t m_iClip1 = 0xA58; // int32
                constexpr std::ptrdiff_t m_iClip2 = 0xA5C; // int32
                constexpr std::ptrdiff_t m_pReserveAmmo = 0xA60; // int32[2]
                constexpr std::ptrdiff_t m_OnPlayerUse = 0xA68; // CEntityIOOutput
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_TrackingProjectileApplyModifier {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Rutger_Pulse_Target {
                constexpr std::ptrdiff_t m_vAuraCenter = 0x1A0; // Vector
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGenericPerson3VData {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityPsychicLiftVData {
                constexpr std::ptrdiff_t m_LiftModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TargetParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetCastSound = 0x1650; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ColossusActive_VData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x608; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ShieldParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Discord_Enemy {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_BulletArmorShredder_Proc {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Bullet_Shield {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BonusDamagePercentVData {
                constexpr std::ptrdiff_t m_bSelfish = 0x608; // bool
            }
            // Parent: CEntityComponent
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_bvDisabledHitGroups (uint32)
            namespace CHitboxComponent {
                constexpr std::ptrdiff_t m_bvDisabledHitGroups = 0x24; // uint32[1]
            }
            // Parent: CBaseFlex
            // Field count: 0
            namespace CBaseFlexAlias_funCBaseFlex {
            }
            // Parent: CBaseAnimGraph
            // Field count: 24
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_x (float32)
            // NetworkVarNames: m_y (float32)
            // NetworkVarNames: m_z (float32)
            // NetworkVarNames: m_angle (float32)
            // NetworkVarNames: m_poolOrigin (Vector)
            // NetworkVarNames: m_waterLevel (float32)
            namespace CFish {
                constexpr std::ptrdiff_t m_pool = 0xA48; // CHandle<CFishPool>
                constexpr std::ptrdiff_t m_id = 0xA4C; // uint32
                constexpr std::ptrdiff_t m_x = 0xA50; // float32
                constexpr std::ptrdiff_t m_y = 0xA54; // float32
                constexpr std::ptrdiff_t m_z = 0xA58; // float32
                constexpr std::ptrdiff_t m_angle = 0xA5C; // float32
                constexpr std::ptrdiff_t m_angleChange = 0xA60; // float32
                constexpr std::ptrdiff_t m_forward = 0xA64; // Vector
                constexpr std::ptrdiff_t m_perp = 0xA70; // Vector
                constexpr std::ptrdiff_t m_poolOrigin = 0xA7C; // Vector
                constexpr std::ptrdiff_t m_waterLevel = 0xA88; // float32
                constexpr std::ptrdiff_t m_speed = 0xA8C; // float32
                constexpr std::ptrdiff_t m_desiredSpeed = 0xA90; // float32
                constexpr std::ptrdiff_t m_calmSpeed = 0xA94; // float32
                constexpr std::ptrdiff_t m_panicSpeed = 0xA98; // float32
                constexpr std::ptrdiff_t m_avoidRange = 0xA9C; // float32
                constexpr std::ptrdiff_t m_turnTimer = 0xAA0; // CountdownTimer
                constexpr std::ptrdiff_t m_turnClockwise = 0xAB8; // bool
                constexpr std::ptrdiff_t m_goTimer = 0xAC0; // CountdownTimer
                constexpr std::ptrdiff_t m_moveTimer = 0xAD8; // CountdownTimer
                constexpr std::ptrdiff_t m_panicTimer = 0xAF0; // CountdownTimer
                constexpr std::ptrdiff_t m_disperseTimer = 0xB08; // CountdownTimer
                constexpr std::ptrdiff_t m_proximityTimer = 0xB20; // CountdownTimer
                constexpr std::ptrdiff_t m_visible = 0xB38; // CUtlVector<CFish*>
            }
            // Parent: CCitadelModelEntity
            // Field count: 0
            namespace CLaneNode {
            }
            // Parent: CBaseEntity
            // Field count: 3
            namespace CEnvFireSource {
                constexpr std::ptrdiff_t m_bEnabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_radius = 0x4EC; // float32
                constexpr std::ptrdiff_t m_damage = 0x4F0; // float32
            }
            // Parent: CAI_CitadelNPCVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_HeroCloneTrooperVData {
                constexpr std::ptrdiff_t m_bMeleeOnly = 0xFB0; // bool
                constexpr std::ptrdiff_t m_bChargeForward = 0xFB1; // bool
                constexpr std::ptrdiff_t m_flMeleeChargeRange = 0xFB4; // float32
                constexpr std::ptrdiff_t m_bCloneOwnerWeapon = 0xFB8; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_Gun_Spikes {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_vBeamAimPos (Vector)
            // NetworkVarNames: m_angBeamAngles (QAngle)
            namespace CCitadel_Ability_IceBeam {
                constexpr std::ptrdiff_t m_flNextDamageTick = 0x1118; // GameTime_t
                constexpr std::ptrdiff_t m_vStart = 0x111C; // Vector
                constexpr std::ptrdiff_t m_vEnd = 0x1128; // Vector
                constexpr std::ptrdiff_t m_vecEntitiesHit = 0x1170; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vBeamAimPos = 0x1188; // Vector
                constexpr std::ptrdiff_t m_angBeamAngles = 0x1194; // QAngle
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_Sleep {
                constexpr std::ptrdiff_t m_vecSleepModifiers = 0xC0; // CUtlVector<CModifierHandleTyped<CCitadelModifier>>
                constexpr std::ptrdiff_t m_bIsWakingUp = 0xD8; // bool
                constexpr std::ptrdiff_t m_flMinSleepTime = 0xDC; // float32
                constexpr std::ptrdiff_t m_flWakeUpDelay = 0xE0; // float32
            }
            // Parent: CModifierVData
            // Field count: 25
            //
            // Metadata:
            // MGetKV3ClassDefaults
            // MPropertySuppressBaseClassField
            // MPropertySuppressBaseClassField
            namespace CCitadelModifierVData {
                constexpr std::ptrdiff_t m_bIsBuildup = 0x3E8; // bool
                constexpr std::ptrdiff_t m_bNetworkValuesForStatsPreview = 0x3E9; // bool
                constexpr std::ptrdiff_t m_vecAutoRegisterModifierValueFromAbilityPropertyName = 0x3F0; // CUtlVector<CUtlString>
                constexpr std::ptrdiff_t m_bCasterCountsAsAssister = 0x408; // bool
                constexpr std::ptrdiff_t m_flLingeringAssistWindow = 0x40C; // float32
                constexpr std::ptrdiff_t m_bDurationCanBeTimeScaled = 0x410; // bool
                constexpr std::ptrdiff_t m_bDurationReducible = 0x411; // bool
                constexpr std::ptrdiff_t m_eTimeScaleSource = 0x414; // ModifierTimeScaleSource_t
                constexpr std::ptrdiff_t m_bDurationAffectedByEffectiveness = 0x418; // bool
                constexpr std::ptrdiff_t m_vecSetAndTrackedAnimGraphParams = 0x420; // CUtlVector<CCitadelTrackedAnimGraphModifierState_t>
                constexpr std::ptrdiff_t m_vecSetAndTrackedBodyGroups = 0x438; // CUtlVector<CCitadelTrackedBodygroupModifierState_t>
                constexpr std::ptrdiff_t m_eDrawOverheadStatus = 0x450; // ModifierOverheadDrawType_t
                constexpr std::ptrdiff_t m_bReverseHudProgressBar = 0x454; // bool
                constexpr std::ptrdiff_t m_strSmallIconCssClass = 0x458; // CUtlString
                constexpr std::ptrdiff_t m_strHintText = 0x460; // CUtlString
                constexpr std::ptrdiff_t m_strHudIcon = 0x468; // CPanoramaImageName
                constexpr std::ptrdiff_t m_eHudDisplayLocation = 0x478; // HudDisplayLocation_t
                constexpr std::ptrdiff_t m_strHudMessageText = 0x480; // CUtlString
                constexpr std::ptrdiff_t m_bIsHiddenOverhead = 0x488; // bool
                constexpr std::ptrdiff_t m_vecAlwaysShowInStatModifierUI = 0x490; // CUtlVector<EModifierValue>
                constexpr std::ptrdiff_t m_OnCreateResponse = 0x4A8; // CCitadelModifierResponseRules_t
                constexpr std::ptrdiff_t m_cameraSequenceCreated = 0x4E0; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_bEndCreatedSequenceOnRemove = 0x568; // bool
                constexpr std::ptrdiff_t m_cameraSequenceRemoved = 0x570; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_sExpiredSound = 0x5F8; // CSoundEventName
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CInfoLadderDismount {
            }
            // Parent: CBaseTrigger
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_strStartTouchEventName (CUtlString)
            // NetworkVarNames: m_strEndTouchEventName (CUtlString)
            // NetworkVarNames: m_strTriggerID (CUtlString)
            namespace CTriggerGameEvent {
                constexpr std::ptrdiff_t m_strStartTouchEventName = 0x990; // CUtlString
                constexpr std::ptrdiff_t m_strEndTouchEventName = 0x998; // CUtlString
                constexpr std::ptrdiff_t m_strTriggerID = 0x9A0; // CUtlString
            }
            // Parent: CBaseTrigger
            // Field count: 2
            namespace CTriggerItemShopSafeZone {
                constexpr std::ptrdiff_t m_OnContested = 0x9B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnNotContested = 0x9D8; // CEntityIOOutput
            }
            // Parent: CPhysConstraint
            // Field count: 10
            namespace CPhysSlideConstraint {
                constexpr std::ptrdiff_t m_axisEnd = 0x568; // Vector
                constexpr std::ptrdiff_t m_slideFriction = 0x574; // float32
                constexpr std::ptrdiff_t m_systemLoadScale = 0x578; // float32
                constexpr std::ptrdiff_t m_initialOffset = 0x57C; // float32
                constexpr std::ptrdiff_t m_bEnableLinearConstraint = 0x580; // bool
                constexpr std::ptrdiff_t m_bEnableAngularConstraint = 0x581; // bool
                constexpr std::ptrdiff_t m_flMotorFrequency = 0x584; // float32
                constexpr std::ptrdiff_t m_flMotorDampingRatio = 0x588; // float32
                constexpr std::ptrdiff_t m_bUseEntityPivot = 0x58C; // bool
                constexpr std::ptrdiff_t m_soundInfo = 0x590; // ConstraintSoundInfo
            }
            // Parent: CBaseEntity
            // Field count: 1
            namespace CDebugHistory {
                constexpr std::ptrdiff_t m_nNpcEvents = 0x3E8528; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierLockDownDebuffVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AOEParticleCaster = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AOEParticleEnemy = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AOEParticleOthers = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strFollowLoop = 0x988; // CSoundEventName
                constexpr std::ptrdiff_t m_strExplodeSound = 0x998; // CSoundEventName
                constexpr std::ptrdiff_t m_strEscapedSound = 0x9A8; // CSoundEventName
                constexpr std::ptrdiff_t m_RootModifier = 0x9B8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BulletResistModifier = 0x9C8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Bounce_Pad_Ally {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierAirRaidVData {
                constexpr std::ptrdiff_t m_SlowModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strWeaponShootSound = 0x648; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Bull_HealVData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Passive_Cloak {
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_ComboBreakerVData {
                constexpr std::ptrdiff_t m_ComboBreakerModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HealModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_HalloweenMask {
                constexpr std::ptrdiff_t m_nMaskToUse = 0xC0; // int32
                constexpr std::ptrdiff_t m_nMaskFX = 0xC4; // ParticleIndex_t
            }
            // Parent: CServerOnlyEntity
            // Field count: 0
            namespace CInfoData {
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_CLightComponent (CLightComponent::Storage_t)
            namespace CLightEntity {
                constexpr std::ptrdiff_t m_CLightComponent = 0x7C0; // CLightComponent*
            }
            // Parent: CCitadelProjectile
            // Field count: 1
            namespace CCitadelBoomerangProjectile {
                constexpr std::ptrdiff_t m_bReturning = 0x9C0; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SettingSunThinker_VData {
                constexpr std::ptrdiff_t m_TargetParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LingerParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LayerParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x988; // CSoundEventName
                constexpr std::ptrdiff_t m_strTargetingCompletedSound = 0x998; // CSoundEventName
            }
            // Parent: CCitadel_Modifier_Base
            // Field count: 2
            namespace CCitadel_Modifier_Haunt_Damage {
                constexpr std::ptrdiff_t m_bCheckForExplosion = 0xC0; // bool
                constexpr std::ptrdiff_t m_flLastBurnTime = 0xC4; // GameTime_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PsychicDagger_MakeDaggers_VData {
                constexpr std::ptrdiff_t m_flDesatAmount = 0x608; // float32
                constexpr std::ptrdiff_t m_DesatTint = 0x60C; // Color
                constexpr std::ptrdiff_t m_SatTint = 0x610; // Color
                constexpr std::ptrdiff_t m_Outline = 0x614; // Color
                constexpr std::ptrdiff_t m_DaggerShot = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerSpawn = 0x6F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerAoE = 0x7D8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerTargetPreview = 0x8B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerShotFail = 0x998; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerFireSound = 0xA78; // CSoundEventName
                constexpr std::ptrdiff_t m_DaggerMissSound = 0xA88; // CSoundEventName
                constexpr std::ptrdiff_t m_LastDaggerMissSound = 0xA98; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_GhostBloodShard {
                constexpr std::ptrdiff_t m_flMinSlowAmount = 0x168; // float32
                constexpr std::ptrdiff_t m_flMoveSpeedPenaltyPerStack = 0x16C; // float32
                constexpr std::ptrdiff_t m_flSlowDuration = 0x170; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_LifestrikeGauntlets_VData {
                constexpr std::ptrdiff_t m_SwingParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x718; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_AmmoScavenger {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Objective_RegenVData {
                constexpr std::ptrdiff_t m_flOutOfCombatHealthRegen = 0x608; // float32
                constexpr std::ptrdiff_t m_flOutOfCombatRegenDelay = 0x60C; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_ApplyDebuff_Proc {
            }
            // Parent: CBaseAnimGraph
            // Field count: 0
            namespace CCitadel_HeroTestOrbSpawner {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_Item_RescueBeam {
                constexpr std::ptrdiff_t m_bCanPull = 0xB20; // bool
            }
            // Parent: CBaseModelEntity
            // Field count: 18
            //
            // Metadata:
            // MNetworkOverride
            // MNetworkOverride
            namespace CFuncRotating {
                constexpr std::ptrdiff_t m_OnStopped = 0x7C0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnStarted = 0x7E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnReachedStart = 0x810; // CEntityIOOutput
                constexpr std::ptrdiff_t m_localRotationVector = 0x838; // RotationVector
                constexpr std::ptrdiff_t m_flFanFriction = 0x844; // float32
                constexpr std::ptrdiff_t m_flAttenuation = 0x848; // float32
                constexpr std::ptrdiff_t m_flVolume = 0x84C; // float32
                constexpr std::ptrdiff_t m_flTargetSpeed = 0x850; // float32
                constexpr std::ptrdiff_t m_flMaxSpeed = 0x854; // float32
                constexpr std::ptrdiff_t m_flBlockDamage = 0x858; // float32
                constexpr std::ptrdiff_t m_NoiseRunning = 0x860; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bReversed = 0x868; // bool
                constexpr std::ptrdiff_t m_bAccelDecel = 0x869; // bool
                constexpr std::ptrdiff_t m_prevLocalAngles = 0x874; // QAngle
                constexpr std::ptrdiff_t m_angStart = 0x880; // QAngle
                constexpr std::ptrdiff_t m_bStopAtStartPos = 0x88C; // bool
                constexpr std::ptrdiff_t m_vecClientOrigin = 0x890; // Vector
                constexpr std::ptrdiff_t m_vecClientAngles = 0x89C; // QAngle
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCadenceLullabyVData {
                constexpr std::ptrdiff_t m_SleepAOEModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Chrono_TimeWall_Effect {
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_SurgingPowerVData {
                constexpr std::ptrdiff_t m_ModifierSurgingPower = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CastTargetEffect = 0x15B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FireRateAuraVData {
                constexpr std::ptrdiff_t m_FireRateAuraSourceParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 0
            namespace CCitadel_Modifier_MagicClarityWatcher {
            }
            // Parent: CAI_Component
            // Field count: 1
            namespace CAI_MoveProbe {
                constexpr std::ptrdiff_t m_hLastBlockingEnt = 0x40; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Metal {
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CFuncTrainControls {
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGangActivityVData {
                constexpr std::ptrdiff_t m_AbilitySwap = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_SettingSun_VData {
                constexpr std::ptrdiff_t m_BeamTargetParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_UnitTargetParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SettingSunThinkerModifier = 0x1720; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_flSSCameraPreviewOffset = 0x1730; // float32
                constexpr std::ptrdiff_t m_flSSCameraPreviewSpeed = 0x1734; // float32
                constexpr std::ptrdiff_t m_flSSCameraPreviewDistance = 0x1738; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Vandal_Ability03 {
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Burrow_VData {
                constexpr std::ptrdiff_t m_BurrowPlayerParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flDesatAmount = 0x6E8; // float32
                constexpr std::ptrdiff_t m_DesatTint = 0x6EC; // Color
                constexpr std::ptrdiff_t m_SatTint = 0x6F0; // Color
                constexpr std::ptrdiff_t m_Outline = 0x6F4; // Color
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_BansheeSlugs_Headshot {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ReturnFire {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BulletResistReductionStack {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CFuncFoliageVData {
                constexpr std::ptrdiff_t m_BulletImpactParticle = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BulletExitParticle = 0x108; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBaseModelEntity
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_flFadeInStart (float32)
            // NetworkVarNames: m_flFadeInLength (float32)
            // NetworkVarNames: m_flFadeOutModelStart (float32)
            // NetworkVarNames: m_flFadeOutModelLength (float32)
            // NetworkVarNames: m_flFadeOutStart (float32)
            // NetworkVarNames: m_flFadeOutLength (float32)
            // NetworkVarNames: m_flStartTime (GameTime_t)
            // NetworkVarNames: m_nDissolveType (EntityDisolveType_t)
            // NetworkVarNames: m_vDissolverOrigin (Vector)
            // NetworkVarNames: m_nMagnitude (uint32)
            namespace CEntityDissolve {
                constexpr std::ptrdiff_t m_flFadeInStart = 0x7C0; // float32
                constexpr std::ptrdiff_t m_flFadeInLength = 0x7C4; // float32
                constexpr std::ptrdiff_t m_flFadeOutModelStart = 0x7C8; // float32
                constexpr std::ptrdiff_t m_flFadeOutModelLength = 0x7CC; // float32
                constexpr std::ptrdiff_t m_flFadeOutStart = 0x7D0; // float32
                constexpr std::ptrdiff_t m_flFadeOutLength = 0x7D4; // float32
                constexpr std::ptrdiff_t m_flStartTime = 0x7D8; // GameTime_t
                constexpr std::ptrdiff_t m_nDissolveType = 0x7DC; // EntityDisolveType_t
                constexpr std::ptrdiff_t m_vDissolverOrigin = 0x7E0; // Vector
                constexpr std::ptrdiff_t m_nMagnitude = 0x7EC; // uint32
            }
            // Parent: CPointEntity
            // Field count: 12
            namespace CPointAngleSensor {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_nLookAtName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hTargetEntity = 0x4F8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hLookAtEntity = 0x4FC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flDuration = 0x500; // float32
                constexpr std::ptrdiff_t m_flDotTolerance = 0x504; // float32
                constexpr std::ptrdiff_t m_flFacingTime = 0x508; // GameTime_t
                constexpr std::ptrdiff_t m_bFired = 0x50C; // bool
                constexpr std::ptrdiff_t m_OnFacingLookat = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnNotFacingLookat = 0x538; // CEntityIOOutput
                constexpr std::ptrdiff_t m_TargetDir = 0x560; // CEntityOutputTemplate<Vector>
                constexpr std::ptrdiff_t m_FacingPercentage = 0x588; // CEntityOutputTemplate<float32>
            }
            // Parent: CSoundEventEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_vMins (Vector)
            // NetworkVarNames: m_vMaxs (Vector)
            namespace CSoundEventOBBEntity {
                constexpr std::ptrdiff_t m_vMins = 0x5A0; // Vector
                constexpr std::ptrdiff_t m_vMaxs = 0x5AC; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_Teleport {
                constexpr std::ptrdiff_t m_vDest = 0xC0; // Vector
                constexpr std::ptrdiff_t m_angDestAngles = 0xCC; // QAngle
                constexpr std::ptrdiff_t m_vDestVelocity = 0xD8; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Arcane_Eater_Debuff {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 2
            namespace CCitadel_Modifier_BaseBulletPreRollProc {
                constexpr std::ptrdiff_t m_nSuppressProcShotID = 0x168; // ShotID_t
                constexpr std::ptrdiff_t m_vecProcdBulletIDs = 0x170; // CUtlVector<BulletID_t>
            }
            // Parent: CBaseEntity
            // Field count: 10
            namespace CCitadelZipLinePathNode {
                constexpr std::ptrdiff_t m_bCornerNode = 0x4F0; // bool
                constexpr std::ptrdiff_t m_bDisableZippingToByPlayers = 0x4F1; // bool
                constexpr std::ptrdiff_t m_bEnabled = 0x4F2; // bool
                constexpr std::ptrdiff_t m_bCapturable = 0x4F3; // bool
                constexpr std::ptrdiff_t m_bAlwaysUsable = 0x4F4; // bool
                constexpr std::ptrdiff_t m_bOneWay = 0x4F5; // bool
                constexpr std::ptrdiff_t m_strGuardBossName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strGuardBossName2 = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strGuardBossName3 = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bUseForMinimapDrawing = 0x514; // bool
            }
            // Parent: CPlayer_MovementServices_Humanoid
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_vPositionDeltaVelocity (CNetworkVelocityVector)
            namespace CCitadelPlayer_MovementServices {
                constexpr std::ptrdiff_t m_vPositionDeltaVelocity = 0x228; // CNetworkVelocityVector
                constexpr std::ptrdiff_t m_vecPogoVelocity = 0x258; // Vector
                constexpr std::ptrdiff_t m_vecSupport = 0x264; // Vector
                constexpr std::ptrdiff_t m_bColliding = 0x270; // bool
                constexpr std::ptrdiff_t m_bLandedOnGround = 0x271; // bool
                constexpr std::ptrdiff_t m_bHasFreeCursor = 0x272; // bool
            }
            // Parent: None
            // Field count: 3
            namespace CEconEntity__AttachedParticleInfo_t {
                constexpr std::ptrdiff_t m_nAttachedParticleIndex = 0x0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_customType = 0x4; // CUtlStringToken
                constexpr std::ptrdiff_t m_bShouldDestroyImmediately = 0x8; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityWreckingBallVData {
                constexpr std::ptrdiff_t m_SummonParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SummonReadyParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SummonParticleAttachment = 0x1720; // CUtlString
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AutoThrowModifier = 0x1808; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HoldingBallLoop = 0x1818; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Gravity_Lasso_Self {
                constexpr std::ptrdiff_t m_bHasUsedBouncePad = 0xC0; // bool
                constexpr std::ptrdiff_t m_vCastTargets = 0xC8; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_PsychicLift {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Burning {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_InFountain {
            }
            // Parent: CBaseEntity
            // Field count: 18
            //
            // Metadata:
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_vBoxMins (Vector)
            // NetworkVarNames: m_vBoxMaxs (Vector)
            // NetworkVarNames: m_bStartDisabled (bool)
            // NetworkVarNames: m_flStrength (float)
            // NetworkVarNames: m_nFalloffShape (int)
            // NetworkVarNames: m_flFalloffExponent (float)
            // NetworkVarNames: m_flHeightFogDepth (float)
            // NetworkVarNames: m_fHeightFogEdgeWidth (float)
            // NetworkVarNames: m_fIndirectLightStrength (float)
            // NetworkVarNames: m_fSunLightStrength (float)
            // NetworkVarNames: m_fNoiseStrength (float)
            // NetworkVarNames: m_TintColor (Color)
            // NetworkVarNames: m_bOverrideTintColor (bool)
            // NetworkVarNames: m_bOverrideIndirectLightStrength (bool)
            // NetworkVarNames: m_bOverrideSunLightStrength (bool)
            // NetworkVarNames: m_bOverrideNoiseStrength (bool)
            // NetworkVarNames: m_bAllowLPVIndirect (bool)
            namespace CEnvVolumetricFogVolume {
                constexpr std::ptrdiff_t m_bActive = 0x4E8; // bool
                constexpr std::ptrdiff_t m_vBoxMins = 0x4EC; // Vector
                constexpr std::ptrdiff_t m_vBoxMaxs = 0x4F8; // Vector
                constexpr std::ptrdiff_t m_bStartDisabled = 0x504; // bool
                constexpr std::ptrdiff_t m_flStrength = 0x508; // float32
                constexpr std::ptrdiff_t m_nFalloffShape = 0x50C; // int32
                constexpr std::ptrdiff_t m_flFalloffExponent = 0x510; // float32
                constexpr std::ptrdiff_t m_flHeightFogDepth = 0x514; // float32
                constexpr std::ptrdiff_t m_fHeightFogEdgeWidth = 0x518; // float32
                constexpr std::ptrdiff_t m_fIndirectLightStrength = 0x51C; // float32
                constexpr std::ptrdiff_t m_fSunLightStrength = 0x520; // float32
                constexpr std::ptrdiff_t m_fNoiseStrength = 0x524; // float32
                constexpr std::ptrdiff_t m_TintColor = 0x528; // Color
                constexpr std::ptrdiff_t m_bOverrideTintColor = 0x52C; // bool
                constexpr std::ptrdiff_t m_bOverrideIndirectLightStrength = 0x52D; // bool
                constexpr std::ptrdiff_t m_bOverrideSunLightStrength = 0x52E; // bool
                constexpr std::ptrdiff_t m_bOverrideNoiseStrength = 0x52F; // bool
                constexpr std::ptrdiff_t m_bAllowLPVIndirect = 0x530; // bool
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_PickupItemSpawnerVData {
                constexpr std::ptrdiff_t m_hModel = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_flModelScale = 0x108; // float32
                constexpr std::ptrdiff_t m_InactiveParticle = 0x110; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ActiveParticle = 0x1F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_vecPrimaryPickups = 0x2D0; // CUtlVector<BreakablePowerupDropDefinition_t>
                constexpr std::ptrdiff_t m_flInitialSpawnTime = 0x2E8; // float32
                constexpr std::ptrdiff_t m_flRespawnTime = 0x2EC; // float32
                constexpr std::ptrdiff_t m_flInitialSpawnTimeTest = 0x2F0; // float32
                constexpr std::ptrdiff_t m_flRespawnTimeTest = 0x2F4; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_Crescendo_PostAOE {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ChargedTackleActive {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_MobileResupply {
            }
            // Parent: CCitadel_Modifier_Base
            // Field count: 0
            namespace CCitadel_Modifier_MagicCarpet_Summon {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_RescueBeamVData {
                constexpr std::ptrdiff_t m_BeamParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBaseModelEntity
            // Field count: 24
            //
            // Metadata:
            // MNetworkIncludeByUserGroup
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkOverride
            // NetworkVarNames: m_flFrameRate (float32)
            // NetworkVarNames: m_flHDRColorScale (float32)
            // NetworkVarNames: m_nNumBeamEnts (uint8)
            // NetworkVarNames: m_hBaseMaterial (HMaterialStrong)
            // NetworkVarNames: m_nHaloIndex (HMaterialStrong)
            // NetworkVarNames: m_nBeamType (BeamType_t)
            // NetworkVarNames: m_nBeamFlags (uint32)
            // NetworkVarNames: m_hAttachEntity (CHandle<CBaseEntity>)
            // NetworkVarNames: m_nAttachIndex (AttachmentHandle_t)
            // NetworkVarNames: m_fWidth (float32)
            // NetworkVarNames: m_fEndWidth (float32)
            // NetworkVarNames: m_fFadeLength (float32)
            // NetworkVarNames: m_fHaloScale (float32)
            // NetworkVarNames: m_fAmplitude (float32)
            // NetworkVarNames: m_fStartFrame (float32)
            // NetworkVarNames: m_fSpeed (float32)
            // NetworkVarNames: m_flFrame (float32)
            // NetworkVarNames: m_nClipStyle (BeamClipStyle_t)
            // NetworkVarNames: m_bTurnedOff (bool)
            // NetworkVarNames: m_vecEndPos (Vector)
            namespace CBeam {
                constexpr std::ptrdiff_t m_flFrameRate = 0x7C0; // float32
                constexpr std::ptrdiff_t m_flHDRColorScale = 0x7C4; // float32
                constexpr std::ptrdiff_t m_flFireTime = 0x7C8; // GameTime_t
                constexpr std::ptrdiff_t m_flDamage = 0x7CC; // float32
                constexpr std::ptrdiff_t m_nNumBeamEnts = 0x7D0; // uint8
                constexpr std::ptrdiff_t m_hBaseMaterial = 0x7D8; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_nHaloIndex = 0x7E0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_nBeamType = 0x7E8; // BeamType_t
                constexpr std::ptrdiff_t m_nBeamFlags = 0x7EC; // uint32
                constexpr std::ptrdiff_t m_hAttachEntity = 0x7F0; // CHandle<CBaseEntity>[10]
                constexpr std::ptrdiff_t m_nAttachIndex = 0x818; // AttachmentHandle_t[10]
                constexpr std::ptrdiff_t m_fWidth = 0x824; // float32
                constexpr std::ptrdiff_t m_fEndWidth = 0x828; // float32
                constexpr std::ptrdiff_t m_fFadeLength = 0x82C; // float32
                constexpr std::ptrdiff_t m_fHaloScale = 0x830; // float32
                constexpr std::ptrdiff_t m_fAmplitude = 0x834; // float32
                constexpr std::ptrdiff_t m_fStartFrame = 0x838; // float32
                constexpr std::ptrdiff_t m_fSpeed = 0x83C; // float32
                constexpr std::ptrdiff_t m_flFrame = 0x840; // float32
                constexpr std::ptrdiff_t m_nClipStyle = 0x844; // BeamClipStyle_t
                constexpr std::ptrdiff_t m_bTurnedOff = 0x848; // bool
                constexpr std::ptrdiff_t m_vecEndPos = 0x84C; // Vector
                constexpr std::ptrdiff_t m_hEndEntity = 0x858; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nDissolveType = 0x85C; // int32
            }
            // Parent: CBaseEntity
            // Field count: 40
            //
            // Metadata:
            // NetworkVarNames: m_CRenderComponent (CRenderComponent::Storage_t)
            // NetworkVarNames: m_CHitboxComponent (CHitboxComponent::Storage_t)
            // NetworkVarNames: m_nRenderMode (RenderMode_t)
            // NetworkVarNames: m_nRenderFX (RenderFx_t)
            // NetworkVarNames: m_clrRender (Color)
            // NetworkVarNames: m_vecRenderAttributes (EntityRenderAttribute_t)
            // NetworkVarNames: m_bRenderToCubemaps (bool)
            // NetworkVarNames: m_bNoInterpolate (bool)
            // NetworkVarNames: m_Collision (CCollisionProperty)
            // NetworkVarNames: m_Glow (CGlowProperty)
            // NetworkVarNames: m_flGlowBackfaceMult (float)
            // NetworkVarNames: m_fadeMinDist (float32)
            // NetworkVarNames: m_fadeMaxDist (float32)
            // NetworkVarNames: m_flFadeScale (float32)
            // NetworkVarNames: m_flShadowStrength (float32)
            // NetworkVarNames: m_nObjectCulling (uint8)
            // NetworkVarNames: m_nAddDecal (int)
            // NetworkVarNames: m_vDecalPosition (Vector)
            // NetworkVarNames: m_vDecalForwardAxis (Vector)
            // NetworkVarNames: m_flDecalHealBloodRate (float)
            // NetworkVarNames: m_flDecalHealHeightRate (float)
            // NetworkVarNames: m_ConfigEntitiesToPropagateMaterialDecalsTo (CHandle<CBaseModelEntity>)
            // NetworkVarNames: m_vecViewOffset (CNetworkViewOffsetVector)
            namespace CBaseModelEntity {
                constexpr std::ptrdiff_t m_CRenderComponent = 0x4E8; // CRenderComponent*
                constexpr std::ptrdiff_t m_CHitboxComponent = 0x4F0; // CHitboxComponent
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed0 = 0x518; // HitGroup_t
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed1 = 0x51C; // HitGroup_t
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed2 = 0x520; // HitGroup_t
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed3 = 0x524; // HitGroup_t
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed4 = 0x528; // HitGroup_t
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed0_PartIndex = 0x52C; // int32
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed1_PartIndex = 0x530; // int32
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed2_PartIndex = 0x534; // int32
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed3_PartIndex = 0x538; // int32
                constexpr std::ptrdiff_t m_nDestructiblePartInitialStateDestructed4_PartIndex = 0x53C; // int32
                constexpr std::ptrdiff_t m_LastHitGroup = 0x548; // HitGroup_t
                constexpr std::ptrdiff_t m_flDissolveStartTime = 0x54C; // GameTime_t
                constexpr std::ptrdiff_t m_OnIgnite = 0x550; // CEntityIOOutput
                constexpr std::ptrdiff_t m_nRenderMode = 0x578; // RenderMode_t
                constexpr std::ptrdiff_t m_nRenderFX = 0x579; // RenderFx_t
                constexpr std::ptrdiff_t m_szAddModifier = 0x580; // CUtlString
                constexpr std::ptrdiff_t m_bAllowFadeInView = 0x588; // bool
                constexpr std::ptrdiff_t m_bHasCollision = 0x5A8; // bool
                constexpr std::ptrdiff_t m_vSupport = 0x5AC; // Vector
                constexpr std::ptrdiff_t m_clrRender = 0x5B8; // Color
                constexpr std::ptrdiff_t m_vecRenderAttributes = 0x5C0; // CUtlVectorEmbeddedNetworkVar<EntityRenderAttribute_t>
                constexpr std::ptrdiff_t m_bRenderToCubemaps = 0x628; // bool
                constexpr std::ptrdiff_t m_bNoInterpolate = 0x629; // bool
                constexpr std::ptrdiff_t m_Collision = 0x630; // CCollisionProperty
                constexpr std::ptrdiff_t m_Glow = 0x6E0; // CGlowProperty
                constexpr std::ptrdiff_t m_flGlowBackfaceMult = 0x738; // float32
                constexpr std::ptrdiff_t m_fadeMinDist = 0x73C; // float32
                constexpr std::ptrdiff_t m_fadeMaxDist = 0x740; // float32
                constexpr std::ptrdiff_t m_flFadeScale = 0x744; // float32
                constexpr std::ptrdiff_t m_flShadowStrength = 0x748; // float32
                constexpr std::ptrdiff_t m_nObjectCulling = 0x74C; // uint8
                constexpr std::ptrdiff_t m_nAddDecal = 0x750; // int32
                constexpr std::ptrdiff_t m_vDecalPosition = 0x754; // Vector
                constexpr std::ptrdiff_t m_vDecalForwardAxis = 0x760; // Vector
                constexpr std::ptrdiff_t m_flDecalHealBloodRate = 0x76C; // float32
                constexpr std::ptrdiff_t m_flDecalHealHeightRate = 0x770; // float32
                constexpr std::ptrdiff_t m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x778; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                constexpr std::ptrdiff_t m_vecViewOffset = 0x790; // CNetworkViewOffsetVector
            }
            // Parent: CCitadelModifier
            // Field count: 6
            namespace CModifier_Mirage_SandPhantom {
                constexpr std::ptrdiff_t m_particleStart = 0xC0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleEnd = 0xC4; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleTrail = 0xC8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecStartPosition = 0xCC; // Vector
                constexpr std::ptrdiff_t m_flStartDelay = 0xD8; // float32
                constexpr std::ptrdiff_t m_vecApplyOffset = 0xDC; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_Synth_Grasp_Victim {
                constexpr std::ptrdiff_t m_vecOrigin = 0xC0; // Vector
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Cadence_Lullaby {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_GangActivity {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ShieldedSentry_VData {
                constexpr std::ptrdiff_t m_InnateModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1570; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_flDamageFalloffEndScale = 0x1580; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Hornet_Snipe {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadelBaseAbilityServerOnly {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            // MVDataNodeType
            // MVDataOverlayType
            namespace CScaleFunctionVData {
                constexpr std::ptrdiff_t m_eSpecificStatScaleType = 0x28; // EStatsType
                constexpr std::ptrdiff_t m_flStatScale = 0x2C; // float32
                constexpr std::ptrdiff_t m_bFunctionDisabled = 0x30; // bool
            }
            // Parent: CBaseAnimGraph
            // Field count: 12
            namespace CPhysMagnet {
                constexpr std::ptrdiff_t m_OnMagnetAttach = 0xA48; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMagnetDetach = 0xA70; // CEntityIOOutput
                constexpr std::ptrdiff_t m_massScale = 0xA98; // float32
                constexpr std::ptrdiff_t m_forceLimit = 0xA9C; // float32
                constexpr std::ptrdiff_t m_torqueLimit = 0xAA0; // float32
                constexpr std::ptrdiff_t m_MagnettedEntities = 0xAA8; // CUtlVector<magnetted_objects_t>
                constexpr std::ptrdiff_t m_bActive = 0xAC0; // bool
                constexpr std::ptrdiff_t m_bHasHitSomething = 0xAC1; // bool
                constexpr std::ptrdiff_t m_flTotalMass = 0xAC4; // float32
                constexpr std::ptrdiff_t m_flRadius = 0xAC8; // float32
                constexpr std::ptrdiff_t m_flNextSuckTime = 0xACC; // GameTime_t
                constexpr std::ptrdiff_t m_iMaxObjectsAttached = 0xAD0; // int32
            }
            // Parent: CSceneEntity
            // Field count: 0
            namespace CSceneEntityAlias_logic_choreographed_scene {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Thumper_2_AuraVData {
                constexpr std::ptrdiff_t m_AoEParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 11
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ItemWalkBackVData {
                constexpr std::ptrdiff_t m_IdleParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RunningParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flStopDistance = 0x7C8; // float32
                constexpr std::ptrdiff_t m_flMaxSpeedDistance = 0x7CC; // float32
                constexpr std::ptrdiff_t m_flSlowSpeed = 0x7D0; // float32
                constexpr std::ptrdiff_t m_flFastSpeed = 0x7D4; // float32
                constexpr std::ptrdiff_t m_flVerticalOffset = 0x7D8; // float32
                constexpr std::ptrdiff_t m_flTolerance = 0x7DC; // float32
                constexpr std::ptrdiff_t m_flRepathTime = 0x7E0; // float32
                constexpr std::ptrdiff_t m_flAutoRunTime = 0x7E4; // float32
                constexpr std::ptrdiff_t m_flTimeToStartAutoRun = 0x7E8; // float32
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CCitadelItemPickupRejuvHeroTestInfoSpawn {
            }
            // Parent: CBaseModelEntity
            // Field count: 2
            namespace CFuncNavBlocker {
                constexpr std::ptrdiff_t m_bDisabled = 0x7C0; // bool
                constexpr std::ptrdiff_t m_nBlockedTeamNumber = 0x7C4; // int32
            }
            // Parent: CPointEntity
            // Field count: 4
            namespace CRagdollMagnet {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_radius = 0x4EC; // float32
                constexpr std::ptrdiff_t m_force = 0x4F0; // float32
                constexpr std::ptrdiff_t m_axis = 0x4F4; // Vector
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_hActiveProjectile (EHANDLE)
            namespace CAbility_Synth_PlasmaFlux {
                constexpr std::ptrdiff_t m_bTeleported = 0xB10; // bool
                constexpr std::ptrdiff_t m_vecUniqueHitList = 0xB18; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vLastValidTeleportPosition = 0xB30; // Vector
                constexpr std::ptrdiff_t m_flProjectileLaunchTime = 0xB3C; // GameTime_t
                constexpr std::ptrdiff_t m_flProjectileExpireTime = 0xB40; // GameTime_t
                constexpr std::ptrdiff_t m_hActiveProjectile = 0xB44; // CHandle<CBaseEntity>
            }
            // Parent: CCitadel_Ability_PrimaryWeaponVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ShivWeapon_VData {
                constexpr std::ptrdiff_t m_flPushForce = 0x15B0; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_Nano_PredatoryStatue {
                constexpr std::ptrdiff_t m_GameTimeEnabled = 0xEC; // GameTime_t
                constexpr std::ptrdiff_t m_LastCatInAreaTime = 0xF0; // GameTime_t
                constexpr std::ptrdiff_t m_bIsAttacking = 0xF4; // bool
                constexpr std::ptrdiff_t m_iTargetID = 0xF8; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Guiding_ArrowVData {
                constexpr std::ptrdiff_t m_GlowEnemeyModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_DeathTax {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Low_Health_GlowVData {
                constexpr std::ptrdiff_t m_GlowParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ParriedStun {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_HunterAuraTarget {
                constexpr std::ptrdiff_t m_flDebuffScale = 0x168; // float32
                constexpr std::ptrdiff_t m_AuraModifierHandle = 0x170; // CModifierHandleTyped<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_CQC_Proc {
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_SlowImmunityVData {
                constexpr std::ptrdiff_t m_ImmunityModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Discord_Friendly {
                constexpr std::ptrdiff_t m_flHealPerSecond = 0xC0; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierObscuredVData {
                constexpr std::ptrdiff_t m_flHideDuration = 0x608; // float32
                constexpr std::ptrdiff_t m_flRevealDuration = 0x60C; // float32
            }
            // Parent: CAI_CitadelNPC
            // Field count: 0
            namespace CNPC_CarpetBombDrone {
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_eLootType (int32)
            // NetworkVarNames: m_nCurrencyValue (int32)
            // NetworkVarNames: m_iszModelName (string_t)
            // NetworkVarNames: m_flModelScale (float)
            // NetworkVarNames: m_hTargetPlayer (EHANDLE)
            // NetworkVarNames: m_flFallRate (float)
            namespace CCitadelItemPickup {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0xBD0; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_eLootType = 0xBE8; // int32
                constexpr std::ptrdiff_t m_nCurrencyValue = 0xBEC; // int32
                constexpr std::ptrdiff_t m_iszModelName = 0xBF0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flModelScale = 0xBF8; // float32
                constexpr std::ptrdiff_t m_hTargetPlayer = 0xBFC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flFallRate = 0xC00; // float32
                constexpr std::ptrdiff_t m_vHomePosition = 0xC10; // Vector
                constexpr std::ptrdiff_t m_vDropPosition = 0xC1C; // Vector
                constexpr std::ptrdiff_t m_tFirstPickupTime = 0xC28; // GameTime_t
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HeldItemPickupAuraVData {
                constexpr std::ptrdiff_t m_strFilterAbilityName = 0x648; // CSubclassName<4>
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_DamageRecycler {
            }
            // Parent: CBaseModelEntity
            // Field count: 6
            namespace CFuncBrush {
                constexpr std::ptrdiff_t m_iSolidity = 0x7C0; // BrushSolidities_e
                constexpr std::ptrdiff_t m_iDisabled = 0x7C4; // int32
                constexpr std::ptrdiff_t m_bSolidBsp = 0x7C8; // bool
                constexpr std::ptrdiff_t m_iszExcludedClass = 0x7D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bInvertExclusion = 0x7D8; // bool
                constexpr std::ptrdiff_t m_bScriptedMovement = 0x7D9; // bool
            }
            // Parent: CPointEntity
            // Field count: 3
            namespace CPointProximitySensor {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_hTargetEntity = 0x4EC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_Distance = 0x4F0; // CEntityOutputTemplate<float32>
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Magician_BigBoltVData {
                constexpr std::ptrdiff_t m_ChargeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShootDelayParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CasterModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BoltHitModifier = 0x1730; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strBoltDelay = 0x1740; // CSoundEventName
                constexpr std::ptrdiff_t m_strBoltFire = 0x1750; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTargetdummy2VData {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Wrecker_Ultimate {
                constexpr std::ptrdiff_t m_vecGrabbed = 0xC0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nFXIndex = 0xD8; // ParticleIndex_t
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BulletArmorShredder_ProcVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Obscured {
                constexpr std::ptrdiff_t m_flStartObscuredAmount = 0xC0; // float32
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterClass {
                constexpr std::ptrdiff_t m_iFilterClass = 0x540; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_ItemPickupAura {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Thumper_PullAOE {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_Camouflage {
            }
            // Parent: CAI_NPC_TrooperVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_TrooperBossVData {
                constexpr std::ptrdiff_t m_bMitigateDamageFromPlayers = 0x1690; // bool
                constexpr std::ptrdiff_t m_flPlayerAutoAttackRange = 0x1694; // float32
                constexpr std::ptrdiff_t m_flMinMeleeAttackTime = 0x1698; // float32
                constexpr std::ptrdiff_t m_flInvulRange = 0x169C; // float32
                constexpr std::ptrdiff_t m_sAngryStart = 0x16A0; // CSoundEventName
                constexpr std::ptrdiff_t m_sAngryLoop = 0x16B0; // CSoundEventName
                constexpr std::ptrdiff_t m_sAngryStop = 0x16C0; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTokamakRadianceVData {
                constexpr std::ptrdiff_t m_RadianceModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_hActiveProjectile (EHANDLE)
            namespace CCitadel_Ability_Perched_Predator {
                constexpr std::ptrdiff_t m_hActiveProjectile = 0xC18; // CHandle<CBaseEntity>
            }
            // Parent: None
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_nModelID (int32)
            // NetworkVarNames: m_vecPanelSize (Vector2D)
            // NetworkVarNames: m_vecPanelVertices (Vector)
            // NetworkVarNames: m_flThickness (float)
            // NetworkVarNames: m_SurfacePropStringToken (CUtlStringToken)
            namespace ice_path_shard_model_desc_t {
                constexpr std::ptrdiff_t m_nModelID = 0x8; // int32
                constexpr std::ptrdiff_t m_vecPanelSize = 0xC; // Vector2D
                constexpr std::ptrdiff_t m_vecPanelVertices = 0x18; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_flThickness = 0x30; // float32
                constexpr std::ptrdiff_t m_SurfacePropStringToken = 0x34; // CUtlStringToken
            }
            // Parent: CCitadel_Modifier_Root
            // Field count: 0
            namespace CCitadel_Modifier_ImmobilizeTrap_Immobilize {
            }
            // Parent: CMultiplayRules
            // Field count: 0
            namespace CTeamplayRules {
            }
            // Parent: CBaseFilter
            // Field count: 0
            namespace CFilterLOS {
            }
            // Parent: None
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_duration (float32)
            // NetworkVarNames: m_timestamp (float32)
            // NetworkVarNames: m_timescale (float32)
            namespace EngineCountdownTimer {
                constexpr std::ptrdiff_t m_duration = 0x8; // float32
                constexpr std::ptrdiff_t m_timestamp = 0xC; // float32
                constexpr std::ptrdiff_t m_timescale = 0x10; // float32
            }
            // Parent: CTriggerNeutralShield
            // Field count: 0
            namespace CTriggerMidBossShield {
            }
            // Parent: CCitadelModifierAura_Cone
            // Field count: 2
            namespace CCitadel_Modifier_Bull_Heal_Aura {
                constexpr std::ptrdiff_t m_playerAngles = 0xE0; // QAngle
                constexpr std::ptrdiff_t m_ConeParticle = 0xEC; // ParticleIndex_t
            }
            // Parent: CBreakable
            // Field count: 14
            namespace CPhysBox {
                constexpr std::ptrdiff_t m_damageType = 0x898; // int32
                constexpr std::ptrdiff_t m_damageToEnableMotion = 0x89C; // int32
                constexpr std::ptrdiff_t m_flForceToEnableMotion = 0x8A0; // float32
                constexpr std::ptrdiff_t m_angPreferredCarryAngles = 0x8A4; // QAngle
                constexpr std::ptrdiff_t m_bNotSolidToWorld = 0x8B0; // bool
                constexpr std::ptrdiff_t m_bEnableUseOutput = 0x8B1; // bool
                constexpr std::ptrdiff_t m_iExploitableByPlayer = 0x8B4; // int32
                constexpr std::ptrdiff_t m_flTouchOutputPerEntityDelay = 0x8B8; // float32
                constexpr std::ptrdiff_t m_OnDamaged = 0x8C0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAwakened = 0x8E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMotionEnabled = 0x910; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPlayerUse = 0x938; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnStartTouch = 0x960; // CEntityIOOutput
                constexpr std::ptrdiff_t m_hCarryingPlayer = 0x988; // CHandle<CBasePlayerPawn>
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ShadowCloneVData {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Nano_Shadow_Debuff {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_WreckerScrapBlast {
                constexpr std::ptrdiff_t m_BlastParticle = 0xB00; // ParticleIndex_t
            }
            // Parent: None
            // Field count: 4
            namespace CCitadel_Modifier_PsychicDagger_MakeDaggers__Dagger_t {
                constexpr std::ptrdiff_t m_nDaggerNum = 0x0; // int32
                constexpr std::ptrdiff_t m_Target = 0x4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_Dagger = 0x8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_TargetPreview = 0xC; // ParticleIndex_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 15
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityMeleeParryVData {
                constexpr std::ptrdiff_t m_flWhiffDuration = 0x1560; // float32
                constexpr std::ptrdiff_t m_flMovementRestrictionTime = 0x1564; // float32
                constexpr std::ptrdiff_t m_flActiveTime = 0x1568; // float32
                constexpr std::ptrdiff_t m_flParryEndVisualTime = 0x156C; // float32
                constexpr std::ptrdiff_t m_flSuccessActiveTime = 0x1570; // float32
                constexpr std::ptrdiff_t m_flBossVictimNoMeleeTime = 0x1574; // float32
                constexpr std::ptrdiff_t m_flBossVictimCalmTime = 0x1578; // float32
                constexpr std::ptrdiff_t m_SuccessfulParryParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strSuccessfulParrySound = 0x1660; // CSoundEventName
                constexpr std::ptrdiff_t m_ParryActiveModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ParryVictimModifier = 0x1680; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ParryCooldownModifier = 0x1690; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ParryEndVisualModifier = 0x16A0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ParryBossVictimNoMeleeModifier = 0x16B0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ParryBossVictimCalmModifier = 0x16C0; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CFuncBrush
            // Field count: 0
            namespace CCitadelSpawnBlocker {
            }
            // Parent: CLogicalEntity
            // Field count: 13
            namespace CTimerEntity {
                constexpr std::ptrdiff_t m_OnTimer = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTimerHigh = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTimerLow = 0x538; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iDisabled = 0x560; // int32
                constexpr std::ptrdiff_t m_flInitialDelay = 0x564; // float32
                constexpr std::ptrdiff_t m_flRefireTime = 0x568; // float32
                constexpr std::ptrdiff_t m_bUpDownState = 0x56C; // bool
                constexpr std::ptrdiff_t m_iUseRandomTime = 0x570; // int32
                constexpr std::ptrdiff_t m_bPauseAfterFiring = 0x574; // bool
                constexpr std::ptrdiff_t m_flLowerRandomBound = 0x578; // float32
                constexpr std::ptrdiff_t m_flUpperRandomBound = 0x57C; // float32
                constexpr std::ptrdiff_t m_flRemainingTime = 0x580; // float32
                constexpr std::ptrdiff_t m_bPaused = 0x584; // bool
            }
            // Parent: CCitadelBaseYamatoAbility
            // Field count: 22
            //
            // Metadata:
            // NetworkVarNames: m_bShadowFormCast (bool)
            // NetworkVarNames: m_vYamatoCastPos (Vector)
            // NetworkVarNames: m_vTargetCastPos (Vector)
            // NetworkVarNames: m_flFlyingToTargetStartTime (GameTime_t)
            // NetworkVarNames: m_flEndAttackTime (GameTime_t)
            // NetworkVarNames: m_flGrappleStartTime (GameTime_t)
            // NetworkVarNames: m_flGrappleArriveTime (GameTime_t)
            // NetworkVarNames: m_flAttackLatchTime (GameTime_t)
            // NetworkVarNames: m_vAttackLatchPos (Vector)
            // NetworkVarNames: m_hTarget (EHANDLE)
            // NetworkVarNames: m_flGrappleShotAttackTime (GameTime_t)
            // NetworkVarNames: m_rgPath (Vector)
            // NetworkVarNames: m_nPathIdx (int)
            // NetworkVarNames: m_nPathSize (int)
            // NetworkVarNames: m_flPathLength (float)
            // NetworkVarNames: m_vFlyingInitialOffsetToPath (Vector)
            // NetworkVarNames: flDistFlown (float)
            namespace CCitadel_Ability_FlyingStrike {
                constexpr std::ptrdiff_t m_iTargetPosIndex = 0xB18; // int32
                constexpr std::ptrdiff_t m_bShadowFormCast = 0xB1C; // bool
                constexpr std::ptrdiff_t m_vYamatoCastPos = 0xB20; // Vector
                constexpr std::ptrdiff_t m_vTargetCastPos = 0xB2C; // Vector
                constexpr std::ptrdiff_t m_flFlyingToTargetStartTime = 0xB38; // GameTime_t
                constexpr std::ptrdiff_t m_flEndAttackTime = 0xB3C; // GameTime_t
                constexpr std::ptrdiff_t m_flGrappleStartTime = 0xB40; // GameTime_t
                constexpr std::ptrdiff_t m_flGrappleArriveTime = 0xB44; // GameTime_t
                constexpr std::ptrdiff_t m_flAttackLatchTime = 0xB48; // GameTime_t
                constexpr std::ptrdiff_t m_vAttackLatchPos = 0xB4C; // Vector
                constexpr std::ptrdiff_t m_hTarget = 0xB58; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flGrappleShotAttackTime = 0xB5C; // GameTime_t
                constexpr std::ptrdiff_t m_hAttackTarget = 0xB60; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_rgPath = 0xB64; // Vector[20]
                constexpr std::ptrdiff_t m_nPathIdx = 0xC54; // int32
                constexpr std::ptrdiff_t m_nPathSize = 0xC58; // int32
                constexpr std::ptrdiff_t m_flPathLength = 0xC5C; // float32
                constexpr std::ptrdiff_t m_vFlyingInitialOffsetToPath = 0xC60; // Vector
                constexpr std::ptrdiff_t flDistFlown = 0xC6C; // float32
                constexpr std::ptrdiff_t m_vLastSafePos = 0xC70; // Vector
                constexpr std::ptrdiff_t m_nGrappleTravelEffect = 0xD28; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bPathDirty = 0xD80; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_ShivDash {
                constexpr std::ptrdiff_t m_bUseTrail = 0xF8; // bool
                constexpr std::ptrdiff_t m_bUseEchoEffect = 0xF9; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TargetPracticeSelfVData {
                constexpr std::ptrdiff_t m_TracerParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strWeaponShootSound = 0x6E8; // CSoundEventName
                constexpr std::ptrdiff_t m_strBulletWhizSound = 0x6F8; // CSoundEventName
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_SleepAOEVData {
                constexpr std::ptrdiff_t m_AuraParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBaseEntity
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_EnvWindShared (CEnvWindShared)
            namespace CEnvWind {
                constexpr std::ptrdiff_t m_EnvWindShared = 0x4E8; // CEnvWindShared
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_Crescendo_InAOE {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Viper_SlideBuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Astro_ShotgunBuffVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Bull_Heal_TargetVData {
                constexpr std::ptrdiff_t m_DrainParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_Intrinsic_BaseVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_NapalmProjectileVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_WeaponEaterVData {
                constexpr std::ptrdiff_t m_WeaponEaterTracker = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_ChainLightningEffect
            // Field count: 0
            namespace CCitadel_Modifier_Galvanic_Storm_Effect {
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemAOERootVData {
                constexpr std::ptrdiff_t m_AOEParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strRootTargetSound = 0x1688; // CSoundEventName
                constexpr std::ptrdiff_t m_TetherModifier = 0x1698; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_TrackingProjectileApplyModifierVData {
                constexpr std::ptrdiff_t m_ProjectileImpactParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetModifier = 0x1688; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_FriendlyOnlyModifier = 0x1698; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CNPC_Trooper
            // Field count: 0
            namespace CNPC_SuperTrooper {
            }
            // Parent: CCitadelTrackedProjectile
            // Field count: 1
            namespace CCitadel_Projectile_HookBlade {
                constexpr std::ptrdiff_t bIsReturning = 0x8A0; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Rutger_CheatDeath_Activated_VData {
                constexpr std::ptrdiff_t m_ActivatedParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadelBaseShivAbility {
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ReturnFireVData {
                constexpr std::ptrdiff_t m_AttackerHitFx = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SpiritReflectTracerReplacement = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAttackerHitSound = 0x8A8; // CSoundEventName
                constexpr std::ptrdiff_t m_strHitProcSound = 0x8B8; // CSoundEventName
            }
            // Parent: None
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_timestamp (GameTime_t)
            // NetworkVarNames: m_nWorldGroupId (WorldGroupId_t)
            namespace IntervalTimer {
                constexpr std::ptrdiff_t m_timestamp = 0x8; // GameTime_t
                constexpr std::ptrdiff_t m_nWorldGroupId = 0xC; // WorldGroupId_t
            }
            // Parent: CCitadel_Modifier_SilencedVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BubbleVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x988; // CSoundEventName
                constexpr std::ptrdiff_t m_BuffModifier = 0x998; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CNPC_SimpleAnimatingAIVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_FieldSentryVData {
                constexpr std::ptrdiff_t m_LaserSightParticle = 0x108; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_KillExplosionParticle = 0x1E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DeployProgressModifier = 0x2C8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_sSpawnSound = 0x2D8; // CSoundEventName
                constexpr std::ptrdiff_t m_sKillExplosionSound = 0x2E8; // CSoundEventName
                constexpr std::ptrdiff_t m_sTargetAcquiredLocalSound = 0x2F8; // CSoundEventName
                constexpr std::ptrdiff_t m_sTargetAcquiredSound = 0x308; // CSoundEventName
                constexpr std::ptrdiff_t m_flIdleTurnSpeed = 0x318; // float32
                constexpr std::ptrdiff_t m_flIdleTurnAngles = 0x31C; // float32
                constexpr std::ptrdiff_t m_flTrooperTakeDamageMult = 0x320; // float32
                constexpr std::ptrdiff_t m_flNeutralTakeDamageMulti = 0x324; // float32
                constexpr std::ptrdiff_t m_flNotifyEventTime = 0x328; // float32
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CHandleDummy {
            }
            // Parent: CPhysConstraint
            // Field count: 9
            namespace CRagdollConstraint {
                constexpr std::ptrdiff_t m_xmin = 0x560; // float32
                constexpr std::ptrdiff_t m_xmax = 0x564; // float32
                constexpr std::ptrdiff_t m_ymin = 0x568; // float32
                constexpr std::ptrdiff_t m_ymax = 0x56C; // float32
                constexpr std::ptrdiff_t m_zmin = 0x570; // float32
                constexpr std::ptrdiff_t m_zmax = 0x574; // float32
                constexpr std::ptrdiff_t m_xfriction = 0x578; // float32
                constexpr std::ptrdiff_t m_yfriction = 0x57C; // float32
                constexpr std::ptrdiff_t m_zfriction = 0x580; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_HookSelf {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_VoidSphereVData {
                constexpr std::ptrdiff_t m_BubbleModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_strCastEffect = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAllyPositionPreview = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_ExplosiveShots {
                constexpr std::ptrdiff_t m_vecHitEnts = 0xC0; // CUtlVector<CCitadel_Modifier_ExplosiveShots::BulletEntityPair_t>
                constexpr std::ptrdiff_t m_bExplosionCanHitMultipleTimes = 0xD8; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Upgrade_AerialAssault {
            }
            // Parent: CBaseTrigger
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_vLaunchTarget (Vector)
            // NetworkVarNames: m_flLaunchSpeed (float)
            namespace CCitadelCatapultTrigger {
                constexpr std::ptrdiff_t m_vLaunchTarget = 0x990; // Vector
                constexpr std::ptrdiff_t m_flLaunchSpeed = 0x99C; // float32
                constexpr std::ptrdiff_t m_nameTarget = 0x9A0; // CUtlSymbolLarge
            }
            // Parent: CNodeEnt
            // Field count: 0
            namespace CNodeEnt_InfoHint {
            }
            // Parent: CPointEntity
            // Field count: 9
            namespace CPhysExplosion {
                constexpr std::ptrdiff_t m_bExplodeOnSpawn = 0x4E8; // bool
                constexpr std::ptrdiff_t m_flMagnitude = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flDamage = 0x4F0; // float32
                constexpr std::ptrdiff_t m_radius = 0x4F4; // float32
                constexpr std::ptrdiff_t m_targetEntityName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flInnerRadius = 0x500; // float32
                constexpr std::ptrdiff_t m_flPushScale = 0x504; // float32
                constexpr std::ptrdiff_t m_bConvertToDebrisWhenPossible = 0x508; // bool
                constexpr std::ptrdiff_t m_OnPushedPlayer = 0x510; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Field count: 7
            namespace CPointPush {
                constexpr std::ptrdiff_t m_bEnabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_flMagnitude = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flRadius = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flInnerRadius = 0x4F4; // float32
                constexpr std::ptrdiff_t m_flConeOfInfluence = 0x4F8; // float32
                constexpr std::ptrdiff_t m_iszFilterName = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hFilter = 0x508; // CHandle<CBaseFilter>
            }
            // Parent: CPointEntity
            // Field count: 3
            namespace CCredits {
                constexpr std::ptrdiff_t m_OnCreditsDone = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bRolledOutroCredits = 0x510; // bool
                constexpr std::ptrdiff_t m_flLogoLength = 0x514; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_Affliction_Debuff_VData {
                constexpr std::ptrdiff_t m_EffectParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Synth_PlasmaFlux_WeaponDamage {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_SilenceContraptionsVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_TangoTether_Tether {
                constexpr std::ptrdiff_t m_fHealingSoundBuildup = 0x1F8; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_MeleeCharge {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Fervor_Bonuses_VData {
                constexpr std::ptrdiff_t m_BonusesParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ActivateBonusesSound = 0x6E8; // CSoundEventName
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SilencerProcActiveVData {
                constexpr std::ptrdiff_t m_TracerParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SilencerActiveParticle = 0x718; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SilenceActiveModifier = 0x7F8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HalloweenMaskVData {
                constexpr std::ptrdiff_t m_nNumMasks = 0x608; // int32
                constexpr std::ptrdiff_t m_HalloweenMask = 0x610; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CPlayerPawnComponent
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_hMyWeapons (CHandle<CBasePlayerWeapon>)
            // NetworkVarNames: m_hActiveWeapon (CHandle<CBasePlayerWeapon>)
            // NetworkVarNames: m_hLastWeapon (CHandle<CBasePlayerWeapon>)
            // NetworkVarNames: m_iAmmo (uint16)
            namespace CPlayer_WeaponServices {
                constexpr std::ptrdiff_t m_hMyWeapons = 0x40; // CNetworkUtlVectorBase<CHandle<CBasePlayerWeapon>>
                constexpr std::ptrdiff_t m_hActiveWeapon = 0x58; // CHandle<CBasePlayerWeapon>
                constexpr std::ptrdiff_t m_hLastWeapon = 0x5C; // CHandle<CBasePlayerWeapon>
                constexpr std::ptrdiff_t m_iAmmo = 0x60; // uint16[32]
                constexpr std::ptrdiff_t m_bPreventWeaponPickup = 0xA0; // bool
            }
            // Parent: None
            // Field count: 3
            namespace CAttributeManager__cached_attribute_float_t {
                constexpr std::ptrdiff_t flIn = 0x0; // float32
                constexpr std::ptrdiff_t iAttribHook = 0x8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t flOut = 0x10; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Trapper_SpiderShield {
                constexpr std::ptrdiff_t m_flNextPulseTime = 0xC0; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Bolo {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierDustStormAuraApplyVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BulletFlurryWindup {
            }
            // Parent: CBaseAnimGraph
            // Field count: 1
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_CCitadelRegenComponent (CCitadelRegenComponent::Storage_t)
            namespace CCitadelAnimatingModelEntity {
                constexpr std::ptrdiff_t m_CCitadelRegenComponent = 0xA48; // CCitadelRegenComponent
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_TargetPracticeDebuff {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Chrono_PulseGrenade_PulseArea {
                constexpr std::ptrdiff_t m_iPulseCount = 0xC0; // int32
                constexpr std::ptrdiff_t m_hPreviewRingParticle = 0xC4; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Wraith_ProjectMind_Shield {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_FlameDashBurn {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ZipLineBoost_VData {
                constexpr std::ptrdiff_t m_ZipboostModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flTimeToActivate = 0x1570; // float32
                constexpr std::ptrdiff_t m_flTimeForHint = 0x1574; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_bPreparing (bool)
            // NetworkVarNames: m_bTackling (bool)
            // NetworkVarNames: m_flTackleStartTime (GameTime_t)
            // NetworkVarNames: m_flTackleDuration (float)
            // NetworkVarNames: m_vecTackleDir (Vector)
            namespace CCitadel_Ability_SuperNeutralCharge {
                constexpr std::ptrdiff_t m_bPreparing = 0xCC0; // bool
                constexpr std::ptrdiff_t m_bTackling = 0xCC1; // bool
                constexpr std::ptrdiff_t m_flTackleStartTime = 0xCC4; // GameTime_t
                constexpr std::ptrdiff_t m_flTackleDuration = 0xCC8; // float32
                constexpr std::ptrdiff_t m_vecTackleDir = 0xCCC; // Vector
                constexpr std::ptrdiff_t m_vecLastPosition = 0xCD8; // Vector
                constexpr std::ptrdiff_t m_nStuckFramesCount = 0xCE4; // int32
                constexpr std::ptrdiff_t m_vecHitEnemies = 0xCE8; // CUtlVector<CEntityIndex>
                constexpr std::ptrdiff_t m_flPrepareStartTime = 0xD00; // GameTime_t
                constexpr std::ptrdiff_t m_nDistancePreview = 0xD04; // ParticleIndex_t
            }
            // Parent: None
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_nEntIndex (CEntityIndex)
            // NetworkVarNames: m_nTeam (int8)
            // NetworkVarNames: m_nPositionXY (uint16)
            namespace STrooperFOWEntity {
                constexpr std::ptrdiff_t m_nEntIndex = 0x30; // CEntityIndex
                constexpr std::ptrdiff_t m_nTeam = 0x34; // int8
                constexpr std::ptrdiff_t m_nPositionXY = 0x36; // uint16
            }
            // Parent: None
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_nInteractsAs (uint64)
            // NetworkVarNames: m_nInteractsWith (uint64)
            // NetworkVarNames: m_nInteractsExclude (uint64)
            // NetworkVarNames: m_nEntityId (uint32)
            // NetworkVarNames: m_nOwnerId (uint32)
            // NetworkVarNames: m_nHierarchyId (uint16)
            // NetworkVarNames: m_nCollisionGroup (uint8)
            // NetworkVarNames: m_nCollisionFunctionMask (uint8)
            namespace VPhysicsCollisionAttribute_t {
                constexpr std::ptrdiff_t m_nInteractsAs = 0x8; // uint64
                constexpr std::ptrdiff_t m_nInteractsWith = 0x10; // uint64
                constexpr std::ptrdiff_t m_nInteractsExclude = 0x18; // uint64
                constexpr std::ptrdiff_t m_nEntityId = 0x20; // uint32
                constexpr std::ptrdiff_t m_nOwnerId = 0x24; // uint32
                constexpr std::ptrdiff_t m_nHierarchyId = 0x28; // uint16
                constexpr std::ptrdiff_t m_nCollisionGroup = 0x2A; // uint8
                constexpr std::ptrdiff_t m_nCollisionFunctionMask = 0x2B; // uint8
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_HeldItemPickupAura {
            }
            // Parent: CTriggerMultiple
            // Field count: 4
            namespace CTriggerImpact {
                constexpr std::ptrdiff_t m_flMagnitude = 0x9B8; // float32
                constexpr std::ptrdiff_t m_flNoise = 0x9BC; // float32
                constexpr std::ptrdiff_t m_flViewkick = 0x9C0; // float32
                constexpr std::ptrdiff_t m_pOutputForce = 0x9C8; // CEntityOutputTemplate<Vector>
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CCitadel_Projectile_Petrify {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flEndTime (GameTime_t)
            namespace CCitadel_Item_Bubble {
                constexpr std::ptrdiff_t m_flEndTime = 0xB20; // GameTime_t
            }
            // Parent: CBaseModelEntity
            // Field count: 14
            //
            // Metadata:
            // MNetworkIncludeByName
            // NetworkVarNames: m_vDirection (Vector)
            // NetworkVarNames: m_clrOverlay (Color)
            // NetworkVarNames: m_iszEffectName (string_t)
            // NetworkVarNames: m_iszSSEffectName (string_t)
            // NetworkVarNames: m_bOn (bool)
            // NetworkVarNames: m_bmaxColor (bool)
            // NetworkVarNames: m_flSize (float32)
            // NetworkVarNames: m_flRotation (float32)
            // NetworkVarNames: m_flHazeScale (float32)
            // NetworkVarNames: m_flAlphaHaze (float32)
            // NetworkVarNames: m_flAlphaHdr (float32)
            // NetworkVarNames: m_flAlphaScale (float32)
            // NetworkVarNames: m_flHDRColorScale (float32)
            // NetworkVarNames: m_flFarZScale (float32)
            namespace CSun {
                constexpr std::ptrdiff_t m_vDirection = 0x7C0; // Vector
                constexpr std::ptrdiff_t m_clrOverlay = 0x7CC; // Color
                constexpr std::ptrdiff_t m_iszEffectName = 0x7D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSSEffectName = 0x7D8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bOn = 0x7E0; // bool
                constexpr std::ptrdiff_t m_bmaxColor = 0x7E1; // bool
                constexpr std::ptrdiff_t m_flSize = 0x7E4; // float32
                constexpr std::ptrdiff_t m_flRotation = 0x7E8; // float32
                constexpr std::ptrdiff_t m_flHazeScale = 0x7EC; // float32
                constexpr std::ptrdiff_t m_flAlphaHaze = 0x7F0; // float32
                constexpr std::ptrdiff_t m_flAlphaHdr = 0x7F4; // float32
                constexpr std::ptrdiff_t m_flAlphaScale = 0x7F8; // float32
                constexpr std::ptrdiff_t m_flHDRColorScale = 0x7FC; // float32
                constexpr std::ptrdiff_t m_flFarZScale = 0x800; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ShieldGuy_Ability01 {
            }
            // Parent: CitadelAbilityVData
            // Field count: 14
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Nano_Pounce_InstantVData {
                constexpr std::ptrdiff_t m_LeapModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ActiveBuff = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AttackParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlashParticle = 0x1670; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1750; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSlowParticle = 0x1830; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PrimaryHitParticle = 0x1910; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AttackSound = 0x19F0; // CSoundEventName
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1A00; // CSoundEventName
                constexpr std::ptrdiff_t m_flAttackTimePhase01 = 0x1A10; // float32
                constexpr std::ptrdiff_t m_flAttackTimePhase02 = 0x1A14; // float32
                constexpr std::ptrdiff_t m_flAllyMinTargetRange = 0x1A18; // float32
                constexpr std::ptrdiff_t m_flTargetVerticalOffset = 0x1A1C; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_bHoldingBall (bool)
            namespace CCitadel_Ability_WreckingBall {
                constexpr std::ptrdiff_t m_nBallParticle = 0xB08; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nCastCompleteParticle = 0xB0C; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecTargetsHit = 0xB10; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_bHoldingBall = 0xC08; // bool
            }
            // Parent: CCitadel_Ability_PrimaryWeapon
            // Field count: 0
            namespace CCitadel_Ability_PrimaryWeapon_BeamWeapon {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ArcaneEaterProcVData {
                constexpr std::ptrdiff_t m_StealWatcherModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_SuperNeutralChargePrepare {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            // MPropertySuppressBaseClassField
            namespace CCitadel_Modifier_BaseBulletPreRollProcVData {
                constexpr std::ptrdiff_t m_bRollOnceForAllBulletsInAShot = 0x638; // bool
                constexpr std::ptrdiff_t m_flMaxBulletsToProcInShot = 0x63C; // float32
                constexpr std::ptrdiff_t m_bCanProcMultipleTimesFromSameShot = 0x640; // bool
                constexpr std::ptrdiff_t m_bRequiresTargetFilter = 0x641; // bool
                constexpr std::ptrdiff_t m_bCanBeEvaded = 0x642; // bool
                constexpr std::ptrdiff_t m_TracerAdditionParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_OnBulletRolledProcSound = 0x728; // CSoundEventName
            }
            // Parent: CBaseTrigger
            // Field count: 2
            namespace CTriggerDetectBulletFire {
                constexpr std::ptrdiff_t m_bPlayerFireOnly = 0x990; // bool
                constexpr std::ptrdiff_t m_OnDetectedBulletFire = 0x998; // CEntityIOOutput
            }
            // Parent: CBaseModelEntity
            // Field count: 0
            namespace CWorld {
            }
            // Parent: CPointEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_eType (EMiniMapMarkerType_t)
            namespace CMiniMapMarker {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x4E8; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_eType = 0x500; // EMiniMapMarkerType_t
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CProjectile_Rutger_Rocket {
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CTriggerRemoveModifier {
                constexpr std::ptrdiff_t m_strModifier = 0x990; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierTangoTetherTargetVData {
                constexpr std::ptrdiff_t m_GrappleRopeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Vandal_PillarVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PetrifyModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CFuncMoveLinear
            // Field count: 0
            namespace CFuncMoveLinearAlias_momentary_door {
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Tokamak_AllySmokeAOE_VData {
                constexpr std::ptrdiff_t m_AuraParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_ActiveReload {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierTier3BossInvulnVData {
                constexpr std::ptrdiff_t m_ShieldParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flShieldRadius = 0x6E8; // float32
            }
            // Parent: CCitadelProjectile
            // Field count: 9
            namespace CCitadelTrackedProjectile {
                constexpr std::ptrdiff_t m_hTarget = 0x870; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flTrackingStartTime = 0x874; // GameTime_t
                constexpr std::ptrdiff_t m_flTrackingDampingCoefficient = 0x878; // float32
                constexpr std::ptrdiff_t m_flTrackingSpeed = 0x87C; // float32
                constexpr std::ptrdiff_t m_flTrackingDuration = 0x880; // float32
                constexpr std::ptrdiff_t m_flTrackingWindowStart = 0x884; // GameTime_t
                constexpr std::ptrdiff_t m_flTrackingWindowEnd = 0x888; // GameTime_t
                constexpr std::ptrdiff_t m_flTrackingStopDuration = 0x88C; // float32
                constexpr std::ptrdiff_t m_vLastValidPosition = 0x890; // Vector
            }
            // Parent: CAI_Component
            // Field count: 3
            namespace CAI_AnimGraphServices {
                constexpr std::ptrdiff_t m_pHandshakeInfo = 0x40; // HandshakeInfo_t[2]
                constexpr std::ptrdiff_t m_flMinFaceTolerance = 0x70; // float32
                constexpr std::ptrdiff_t m_LastIncomingHit = 0x74; // LastIncomingHit_t
            }
            // Parent: CBaseEntity
            // Field count: 16
            //
            // Metadata:
            // NetworkVarNames: m_flParticleSpacing (float)
            // NetworkVarNames: m_flSlack (float)
            // NetworkVarNames: m_flRadius (float)
            // NetworkVarNames: m_ColorTint (Color)
            // NetworkVarNames: m_nEffectState (int)
            // NetworkVarNames: m_iEffectIndex (HParticleSystemDefinitionStrong)
            // NetworkVarNames: m_PathNodes_Position (Vector)
            // NetworkVarNames: m_PathNodes_TangentIn (Vector)
            // NetworkVarNames: m_PathNodes_TangentOut (Vector)
            // NetworkVarNames: m_PathNodes_Color (Vector)
            // NetworkVarNames: m_PathNodes_PinEnabled (bool)
            // NetworkVarNames: m_PathNodes_RadiusScale (float)
            namespace CPathParticleRope {
                constexpr std::ptrdiff_t m_bStartActive = 0x4F0; // bool
                constexpr std::ptrdiff_t m_flMaxSimulationTime = 0x4F4; // float32
                constexpr std::ptrdiff_t m_iszEffectName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_PathNodes_Name = 0x500; // CUtlVector<CUtlSymbolLarge>
                constexpr std::ptrdiff_t m_flParticleSpacing = 0x518; // float32
                constexpr std::ptrdiff_t m_flSlack = 0x51C; // float32
                constexpr std::ptrdiff_t m_flRadius = 0x520; // float32
                constexpr std::ptrdiff_t m_ColorTint = 0x524; // Color
                constexpr std::ptrdiff_t m_nEffectState = 0x528; // int32
                constexpr std::ptrdiff_t m_iEffectIndex = 0x530; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                constexpr std::ptrdiff_t m_PathNodes_Position = 0x538; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_PathNodes_TangentIn = 0x550; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_PathNodes_TangentOut = 0x568; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_PathNodes_Color = 0x580; // CNetworkUtlVectorBase<Vector>
                constexpr std::ptrdiff_t m_PathNodes_PinEnabled = 0x598; // CNetworkUtlVectorBase<bool>
                constexpr std::ptrdiff_t m_PathNodes_RadiusScale = 0x5B0; // CNetworkUtlVectorBase<float32>
            }
            // Parent: CBaseEntity
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_flVisibilityStrength (float)
            // NetworkVarNames: m_flFogDistanceMultiplier (float)
            // NetworkVarNames: m_flFogMaxDensityMultiplier (float)
            // NetworkVarNames: m_flFadeTime (float)
            // NetworkVarNames: m_bStartDisabled (bool)
            // NetworkVarNames: m_bIsEnabled (bool)
            namespace CPlayerVisibility {
                constexpr std::ptrdiff_t m_flVisibilityStrength = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flFogDistanceMultiplier = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flFogMaxDensityMultiplier = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flFadeTime = 0x4F4; // float32
                constexpr std::ptrdiff_t m_bStartDisabled = 0x4F8; // bool
                constexpr std::ptrdiff_t m_bIsEnabled = 0x4F9; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Fathom_ScaldingSpray_Target_VData {
                constexpr std::ptrdiff_t m_DrainParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Mirage_Teleport_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImmunityModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_FireRateModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TeleportStartParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportEndParticle = 0x1670; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strArriveSound = 0x1750; // CSoundEventName
                constexpr std::ptrdiff_t m_strDepartSound = 0x1760; // CSoundEventName
                constexpr std::ptrdiff_t m_strChannelDestinationSound = 0x1770; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CAbility_Rutger_RocketLauncher {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ChargedTacklePrepare {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_QuickSilverBuffVData {
                constexpr std::ptrdiff_t m_RapidFireParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityPropertyBase {
            }
            // Parent: CPlayer_ObserverServices
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_hOverrideObserverTarget (CHandle<CBaseEntity>)
            // NetworkVarNames: m_iOverrideObserverMode (ObserverMode_t)
            // NetworkVarNames: m_iSecondsAfterDeathToAllowObserving (int32)
            // NetworkVarNames: m_angTargetCamera (QAngle)
            // NetworkVarNames: m_vTargetCameraPos (Vector)
            namespace CCitadelPlayer_ObserverServices {
                constexpr std::ptrdiff_t m_nLastObservedTeam = 0x50; // int32
                constexpr std::ptrdiff_t m_nCurrentObservedTeam = 0x54; // int32
                constexpr std::ptrdiff_t m_hLastObserverTarget = 0x58; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hPreviousTeamTarget = 0x5C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hOverrideObserverTarget = 0x60; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iOverrideObserverMode = 0x64; // ObserverMode_t
                constexpr std::ptrdiff_t m_iSecondsAfterDeathToAllowObserving = 0x68; // int32
                constexpr std::ptrdiff_t m_angTargetCamera = 0x6C; // QAngle
                constexpr std::ptrdiff_t m_vTargetCameraPos = 0x78; // Vector
            }
            // Parent: CServerOnlyEntity
            // Field count: 0
            namespace CServerOnlyPointEntity {
            }
            // Parent: CBaseTrigger
            // Field count: 4
            namespace CTriggerTeleport {
                constexpr std::ptrdiff_t m_iLandmark = 0x990; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bUseLandmarkAngles = 0x998; // bool
                constexpr std::ptrdiff_t m_bMirrorPlayer = 0x999; // bool
                constexpr std::ptrdiff_t m_bCheckDestIfClearForPlayer = 0x99A; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_AnthemBuff {
            }
            // Parent: CCitadelModifier
            // Field count: 12
            namespace CCitadel_Modifier_StormCloud {
                constexpr std::ptrdiff_t m_flDamageInterval = 0xC8; // float32
                constexpr std::ptrdiff_t m_bGrowing = 0xCC; // bool
                constexpr std::ptrdiff_t m_flLastDamageWaveTime = 0xD0; // GameTime_t
                constexpr std::ptrdiff_t m_nNumPlayersKilled = 0xD4; // int32
                constexpr std::ptrdiff_t m_flNextRandomLightningStrike = 0xD8; // GameTime_t
                constexpr std::ptrdiff_t m_flStartTime = 0xDC; // GameTime_t
                constexpr std::ptrdiff_t m_flRadiusIncrementPerSecond = 0xE0; // float32
                constexpr std::ptrdiff_t m_vCastPosition = 0xE4; // Vector
                constexpr std::ptrdiff_t m_bFiredEndingSoonSound = 0xF0; // bool
                constexpr std::ptrdiff_t m_nLastTickForLightningCenterCalc = 0xF4; // int32
                constexpr std::ptrdiff_t m_vecLightningCenter = 0xF8; // Vector
                constexpr std::ptrdiff_t m_nSatVolumeIndex = 0x104; // SatVolumeIndex_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_LightningBallVData {
                constexpr std::ptrdiff_t m_ZapParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetScreenParticleEffect = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_Burning
            // Field count: 2
            namespace CCitadel_Modifier_Afterburn_DOT {
                constexpr std::ptrdiff_t m_bCheckForExplosion = 0xC0; // bool
                constexpr std::ptrdiff_t m_flLastBurnTime = 0xC4; // GameTime_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_IncendiaryProjectile {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Disarmed {
            }
            // Parent: CNPC_Trooper
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelPlayerClipComponent (CCitadelPlayerClipComponent::Storage_t)
            // NetworkVarNames: m_flFadeOutStart (GameTime_t)
            // NetworkVarNames: m_flFadeOutEnd (GameTime_t)
            namespace CNPC_TrooperBoss {
                constexpr std::ptrdiff_t m_CCitadelPlayerClipComponent = 0x1910; // CCitadelPlayerClipComponent
                constexpr std::ptrdiff_t m_LaneSide = 0x1938; // LaneSide_t
                constexpr std::ptrdiff_t m_flFadeOutStart = 0x1B18; // GameTime_t
                constexpr std::ptrdiff_t m_flFadeOutEnd = 0x1B1C; // GameTime_t
            }
            // Parent: CTeam
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_hPayload (EHANDLE)
            // NetworkVarNames: m_nBossesAlive (int)
            // NetworkVarNames: m_nBossesMax (int)
            // NetworkVarNames: m_nFlexSlotsUnlocked (EFlexSlotTypes_t)
            // NetworkVarNames: m_vecFOWEntities (STeamFOWEntity)
            namespace CCitadelTeam {
                constexpr std::ptrdiff_t m_hPayload = 0x5B8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nBossesAlive = 0x5BC; // int32
                constexpr std::ptrdiff_t m_nBossesMax = 0x5C0; // int32
                constexpr std::ptrdiff_t m_nFlexSlotsUnlocked = 0x5C4; // EFlexSlotTypes_t
                constexpr std::ptrdiff_t m_vecFOWEntities = 0x5C8; // CUtlVectorEmbeddedNetworkVar<STeamFOWEntity>
            }
            // Parent: CBaseModelEntity
            // Field count: 49
            namespace CFuncMover {
                constexpr std::ptrdiff_t m_iszPathName = 0x7C0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hPathMover = 0x7C8; // CHandle<CPathMover>
                constexpr std::ptrdiff_t m_iszPathNodeStart = 0x7D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_eMoveType = 0x7D8; // CFuncMover::Move_t
                constexpr std::ptrdiff_t m_bIsReversing = 0x7DC; // bool
                constexpr std::ptrdiff_t m_vTarget = 0x7E0; // Vector
                constexpr std::ptrdiff_t m_flStartSpeed = 0x7EC; // float32
                constexpr std::ptrdiff_t m_flPathLocation = 0x7F0; // float32
                constexpr std::ptrdiff_t m_flT = 0x7F4; // float32
                constexpr std::ptrdiff_t m_nCurrentNodeIndex = 0x7F8; // int32
                constexpr std::ptrdiff_t m_nPreviousNodeIndex = 0x7FC; // int32
                constexpr std::ptrdiff_t m_eSolidType = 0x800; // SolidType_t
                constexpr std::ptrdiff_t m_bIsMoving = 0x801; // bool
                constexpr std::ptrdiff_t m_flTimeToReachMaxSpeed = 0x804; // float32
                constexpr std::ptrdiff_t m_flDistanceToReachMaxSpeed = 0x808; // float32
                constexpr std::ptrdiff_t m_flTimeToReachZeroSpeed = 0x80C; // float32
                constexpr std::ptrdiff_t m_flDistanceToReachZeroSpeed = 0x810; // float32
                constexpr std::ptrdiff_t m_flTimeMovementStart = 0x814; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeMovementStop = 0x818; // GameTime_t
                constexpr std::ptrdiff_t m_hStopAtNode = 0x81C; // CHandle<CMoverPathNode>
                constexpr std::ptrdiff_t m_flPathLocationToBeginStop = 0x820; // float32
                constexpr std::ptrdiff_t m_iszStartForwardSound = 0x828; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszLoopForwardSound = 0x830; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszStopForwardSound = 0x838; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszStartReverseSound = 0x840; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszLoopReverseSound = 0x848; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszStopReverseSound = 0x850; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszArriveAtDestinationSound = 0x858; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnMovementEnd = 0x868; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bStartAtEnd = 0x890; // bool
                constexpr std::ptrdiff_t m_eOrientationUpdate = 0x894; // CFuncMover::OrientationUpdate_t
                constexpr std::ptrdiff_t m_flTimeStartOrientationChange = 0x898; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeToBlendToNewOrientation = 0x89C; // float32
                constexpr std::ptrdiff_t m_flDurationBlendToNewOrientationRan = 0x8A0; // float32
                constexpr std::ptrdiff_t m_qOriginalOrientation = 0x8B0; // Quaternion
                constexpr std::ptrdiff_t m_bCreateMovableNavMesh = 0x8C0; // bool
                constexpr std::ptrdiff_t m_OnNodePassed = 0x8C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iszOrientationMatchEntityName = 0x8F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hOrientationMatchEntity = 0x8F8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flTimeToTraverseToNextNode = 0x8FC; // float32
                constexpr std::ptrdiff_t m_vLerpToNewPositionStart = 0x900; // Vector
                constexpr std::ptrdiff_t m_vLerpToNewPositionEnd = 0x90C; // Vector
                constexpr std::ptrdiff_t m_flLerpToPositionT = 0x918; // float32
                constexpr std::ptrdiff_t m_flLerpToPositionDeltaT = 0x91C; // float32
                constexpr std::ptrdiff_t m_OnLerpToPositionComplete = 0x920; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bIsPaused = 0x948; // bool
                constexpr std::ptrdiff_t m_eTransitionedToPathNodeAction = 0x94C; // CFuncMover::TransitionToPathNodeAction_t
                constexpr std::ptrdiff_t m_nDelayedTeleportToNode = 0x950; // int32
                constexpr std::ptrdiff_t m_bIsVerboseLogging = 0x954; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            namespace CCitadel_Ability_Thumper_2 {
                constexpr std::ptrdiff_t m_vStompPos = 0xB00; // Vector
                constexpr std::ptrdiff_t m_vStompDir = 0xB0C; // Vector
                constexpr std::ptrdiff_t m_nStomps = 0xB18; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_GangActivity_AbilitySwap {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_UltCombo_Self {
                constexpr std::ptrdiff_t m_angles = 0xC0; // QAngle
                constexpr std::ptrdiff_t m_hTarget = 0xCC; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PoisonBullet_PoisonBuildup {
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Upgrade_ArcaneMedallion_VData {
                constexpr std::ptrdiff_t m_TriggeredModifier = 0x638; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_flDashAngle (float)
            // NetworkVarNames: m_nLastGroundDashTick (int)
            // NetworkVarNames: m_flGroundDashCastTime (GameTime_t)
            // NetworkVarNames: m_flGroundDashEndTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flAirDashCastTime (GameTime_t)
            // NetworkVarNames: m_flAirDashDragStartTime (GameTime_t)
            // NetworkVarNames: m_nConsecutiveAirDashes (int8)
            // NetworkVarNames: m_nConsecutiveDownDashes (int8)
            // NetworkVarNames: m_bDownAirDash (bool)
            namespace CCitadel_Ability_Dash {
                constexpr std::ptrdiff_t m_flDashAngle = 0xB00; // float32
                constexpr std::ptrdiff_t m_GroundDashExecuteTime = 0xB04; // GameTime_t
                constexpr std::ptrdiff_t m_nLastGroundDashTick = 0xB08; // int32
                constexpr std::ptrdiff_t m_flGroundDashCastTime = 0xB0C; // GameTime_t
                constexpr std::ptrdiff_t m_bTagCanActivateGroundDash = 0xB10; // bool
                constexpr std::ptrdiff_t m_flGroundDashEndTime = 0xB18; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flAirDashCastTime = 0xB30; // GameTime_t
                constexpr std::ptrdiff_t m_flAirDashDragStartTime = 0xB34; // GameTime_t
                constexpr std::ptrdiff_t m_nConsecutiveAirDashes = 0xB38; // int8
                constexpr std::ptrdiff_t m_nConsecutiveDownDashes = 0xB39; // int8
                constexpr std::ptrdiff_t m_bDownAirDash = 0xB3A; // bool
            }
            // Parent: CCitadel_Modifier_Bullet_Shield
            // Field count: 0
            namespace CCitadel_Modifier_Tech_Shield {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 28
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAI_BaseNPCVData {
                constexpr std::ptrdiff_t m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_hFootstepSounds = 0x108; // CFootstepTableHandle
                constexpr std::ptrdiff_t m_vecNavLinkMovementNames = 0x110; // CUtlVector<CGlobalSymbol>
                constexpr std::ptrdiff_t m_nMaxHealth = 0x128; // int32
                constexpr std::ptrdiff_t m_vecIntrinsicModifiers = 0x130; // CUtlVector<CEmbeddedSubclass<CCitadelModifier>>
                constexpr std::ptrdiff_t m_statusEffectMap = 0x148; // NPCStatusEffectMap_t
                constexpr std::ptrdiff_t m_vecAttachments = 0x150; // CUtlVector<NPCAttachmentDesc_t>
                constexpr std::ptrdiff_t m_flHeadDamageMultiplier = 0x168; // CSkillFloat
                constexpr std::ptrdiff_t m_flChestDamageMultiplier = 0x178; // CSkillFloat
                constexpr std::ptrdiff_t m_flStomachDamageMultiplier = 0x188; // CSkillFloat
                constexpr std::ptrdiff_t m_flArmDamageMultiplier = 0x198; // CSkillFloat
                constexpr std::ptrdiff_t m_flLegDamageMultiplier = 0x1A8; // CSkillFloat
                constexpr std::ptrdiff_t m_nMaxAdditionalAmmoBalancingShots = 0x1B8; // CSkillInt
                constexpr std::ptrdiff_t m_bTakesDamage = 0x1C8; // bool
                constexpr std::ptrdiff_t m_nRagdollHealth = 0x1CC; // int32
                constexpr std::ptrdiff_t m_DestructiblePartsOverrideByPartName = 0x1D0; // CUtlOrderedMap<CUtlString,CDestructiblePartsSystemData_PartRuntimeData>
                constexpr std::ptrdiff_t m_bAllowNonZUpMovement = 0x1F8; // bool
                constexpr std::ptrdiff_t m_bUseDynamicCollisionHull = 0x1F9; // bool
                constexpr std::ptrdiff_t m_bRequestCapsuleCollision = 0x1FA; // bool
                constexpr std::ptrdiff_t m_flCapsuleRadiusOverride = 0x1FC; // float32
                constexpr std::ptrdiff_t m_flCapsuleHeightOverride = 0x200; // float32
                constexpr std::ptrdiff_t m_bAllowAnimgraphMotorMovementStates = 0x204; // bool
                constexpr std::ptrdiff_t m_vecActionDesiredShared = 0x208; // CUtlVector<CGlobalSymbol>
                constexpr std::ptrdiff_t m_sPlayerKilledNpcSound = 0x220; // CSoundEventName
                constexpr std::ptrdiff_t m_sCustomDeathHandshake = 0x230; // CGlobalSymbol
                constexpr std::ptrdiff_t m_flMovementMaxPathEndDirectionAngleDifferenceForStop = 0x238; // float32
                constexpr std::ptrdiff_t m_flMovementPlantedTurnAngleThreshold = 0x23C; // float32
                constexpr std::ptrdiff_t m_movementHeadingSettings = 0x240; // AI_MovementHeadingSettings_t
            }
            // Parent: None
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: localSound (Vector)
            // NetworkVarNames: soundscapeIndex (int32)
            // NetworkVarNames: localBits (uint8)
            // NetworkVarNames: soundscapeEntityListIndex (int)
            // NetworkVarNames: soundEventHash (uint32)
            namespace audioparams_t {
                constexpr std::ptrdiff_t localSound = 0x8; // Vector[8]
                constexpr std::ptrdiff_t soundscapeIndex = 0x68; // int32
                constexpr std::ptrdiff_t localBits = 0x6C; // uint8
                constexpr std::ptrdiff_t soundscapeEntityListIndex = 0x70; // int32
                constexpr std::ptrdiff_t soundEventHash = 0x74; // uint32
            }
            // Parent: CCitadel_Item
            // Field count: 3
            namespace CCitadel_Item_BaseProjectileAOEModifier {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB20; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB2C; // QAngle
                constexpr std::ptrdiff_t m_projInfo = 0xB70; // CitadelAbilityProjectileCreateInfo_t
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CTriggerCallback {
            }
            // Parent: CBaseModelEntity
            // Field count: 3
            namespace CBubbling {
                constexpr std::ptrdiff_t m_density = 0x7C0; // int32
                constexpr std::ptrdiff_t m_frequency = 0x7C4; // int32
                constexpr std::ptrdiff_t m_state = 0x7C8; // int32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Trapper_Ability03 {
            }
            // Parent: CCitadelBaseYamatoAbility
            // Field count: 0
            namespace CCitadel_Ability_HealingSlash {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_DebugIsVisibleToEnemyTeam {
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CTestInputOutputCombinationsAPI {
            }
            // Parent: CCitadel_PointTalker_Base
            // Field count: 0
            namespace CCitadel_PointTalker {
            }
            // Parent: CPhysicsProp
            // Field count: 0
            namespace CPhysicsPropOverride {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_Item_DivinersKevlar {
                constexpr std::ptrdiff_t m_bExecuted = 0xB20; // bool
            }
            // Parent: CBaseEntity
            // Field count: 4
            namespace CAI_ChangeHintGroup {
                constexpr std::ptrdiff_t m_iSearchType = 0x4E8; // int32
                constexpr std::ptrdiff_t m_strSearchName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strNewHintGroup = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flRadius = 0x500; // float32
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 3
            namespace CInfoTrooperNeutralSpawn {
                constexpr std::ptrdiff_t m_iCoverGroupID = 0x4E8; // int32
                constexpr std::ptrdiff_t m_iszSquadName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_eTrooperType = 0x504; // ENeutralTrooperType
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_vecCastPosition (Vector)
            // NetworkVarNames: m_vecCastPositionNormal (Vector)
            // NetworkVarNames: m_vecEndPosition (Vector)
            // NetworkVarNames: m_vecEndPositionNormal (Vector)
            namespace CCitadel_Ability_Trapper_WebWall {
                constexpr std::ptrdiff_t m_vecCastPosition = 0xBE0; // Vector
                constexpr std::ptrdiff_t m_vecCastPositionNormal = 0xBEC; // Vector
                constexpr std::ptrdiff_t m_vecEndPosition = 0xBF8; // Vector
                constexpr std::ptrdiff_t m_vecEndPositionNormal = 0xC04; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Synth_Pulse_Escape {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Rutger_RocketLauncher_VData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShootParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Radiance {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_TeleportToGangster {
            }
            // Parent: CCitadel_Ability_PrimaryWeapon
            // Field count: 0
            namespace CCitadel_Ability_ShivWeapon {
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_PsychicDaggerVData {
                constexpr std::ptrdiff_t m_MakeDaggersModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierPowerJumpVData {
                constexpr std::ptrdiff_t m_FloatParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flAirDrag = 0x6E8; // float32
                constexpr std::ptrdiff_t m_flVerticalCameraOffset = 0x6EC; // float32
                constexpr std::ptrdiff_t m_flVerticalCameraOffsetLerpTime = 0x6F0; // float32
                constexpr std::ptrdiff_t m_flVerticalCameraOffsetBias = 0x6F4; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_anglesCharging (QAngle)
            // NetworkVarNames: m_flChargeStartTime (GameTime_t)
            // NetworkVarNames: m_flFastChargeEndTime (GameTime_t)
            // NetworkVarNames: m_bHitAPlayer (bool)
            namespace CCitadel_Ability_Bull_Charge {
                constexpr std::ptrdiff_t m_vecHitEntities = 0xB00; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_bGainedWeaponPowerBuff = 0xB18; // bool
                constexpr std::ptrdiff_t m_anglesCharging = 0xDC0; // QAngle
                constexpr std::ptrdiff_t m_flChargeStartTime = 0xDCC; // GameTime_t
                constexpr std::ptrdiff_t m_flFastChargeEndTime = 0xDD0; // GameTime_t
                constexpr std::ptrdiff_t m_bHitAPlayer = 0xDD4; // bool
                constexpr std::ptrdiff_t m_bFirstTick = 0xDD8; // bool
                constexpr std::ptrdiff_t m_vGoalDir = 0xDDC; // Vector
            }
            // Parent: CCitadel_Ability_PrimaryWeapon
            // Field count: 0
            namespace CCitadel_Ability_PrimaryWeapon_Empty {
            }
            // Parent: CitadelAbilityVData
            // Field count: 56
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilitySlideVData {
                constexpr std::ptrdiff_t m_flMinAngleToConsiderASlope = 0x1560; // float32
                constexpr std::ptrdiff_t m_flSlideMaxSlopeMaxAccSpeed = 0x1564; // float32
                constexpr std::ptrdiff_t m_flSlideMinSlopeMaxAccSpeed = 0x1568; // float32
                constexpr std::ptrdiff_t m_flButtonPressWindow = 0x156C; // float32
                constexpr std::ptrdiff_t m_flTurnSpeed = 0x1570; // float32
                constexpr std::ptrdiff_t m_flSlideMinSlopeAcceleration = 0x1574; // float32
                constexpr std::ptrdiff_t m_flSlideMaxSlopeAcceleration = 0x1578; // float32
                constexpr std::ptrdiff_t m_flTurnMinAngDiff = 0x157C; // float32
                constexpr std::ptrdiff_t m_flTurnMaxAngDiff = 0x1580; // float32
                constexpr std::ptrdiff_t m_flLandedFlatGroundFrictionGraceTime = 0x1584; // float32
                constexpr std::ptrdiff_t m_flFlatGroundFrictionGraceTime = 0x1588; // float32
                constexpr std::ptrdiff_t m_flFrictionFlatGroundGrace = 0x158C; // float32
                constexpr std::ptrdiff_t m_flFrictionFlatGround = 0x1590; // float32
                constexpr std::ptrdiff_t m_flFrictionMinSlope = 0x1594; // float32
                constexpr std::ptrdiff_t m_flFrictionMaxSlope = 0x1598; // float32
                constexpr std::ptrdiff_t m_flFrictionUphillMinSlope = 0x159C; // float32
                constexpr std::ptrdiff_t m_flFrictionUphillMaxSlope = 0x15A0; // float32
                constexpr std::ptrdiff_t m_flLandingSlopeScaleBias = 0x15A4; // float32
                constexpr std::ptrdiff_t m_flBoostMinTriggerSpeed = 0x15A8; // float32
                constexpr std::ptrdiff_t m_flBoostMaxTriggerSpeed = 0x15AC; // float32
                constexpr std::ptrdiff_t m_flBoostMinSpeed = 0x15B0; // float32
                constexpr std::ptrdiff_t m_flBoostMaxSpeed = 0x15B4; // float32
                constexpr std::ptrdiff_t m_flMinActivationSpeed = 0x15B8; // float32
                constexpr std::ptrdiff_t m_flMinSustainSpeed = 0x15BC; // float32
                constexpr std::ptrdiff_t m_flSprintBoostSpeed = 0x15C0; // float32
                constexpr std::ptrdiff_t m_flDashSlideStartTime = 0x15C4; // float32
                constexpr std::ptrdiff_t m_flDashSlideSpeed = 0x15C8; // float32
                constexpr std::ptrdiff_t m_flDashSlideFailSpeed = 0x15CC; // float32
                constexpr std::ptrdiff_t m_strDashSlideActivate = 0x15D0; // CSoundEventName
                constexpr std::ptrdiff_t m_flDashSlideFrictionTime = 0x15E0; // float32
                constexpr std::ptrdiff_t m_flDashSlideFriction = 0x15E4; // float32
                constexpr std::ptrdiff_t m_flDashMinActivationSpeed = 0x15E8; // float32
                constexpr std::ptrdiff_t m_flAccMinSlopeDeg = 0x15EC; // float32
                constexpr std::ptrdiff_t m_flAccMaxSlopeDeg = 0x15F0; // float32
                constexpr std::ptrdiff_t m_flAccMinSlopeScale = 0x15F4; // float32
                constexpr std::ptrdiff_t m_flSlideProbeForwardOffset = 0x15F8; // float32
                constexpr std::ptrdiff_t m_flSlideActivationProbeForwardOffset = 0x15FC; // float32
                constexpr std::ptrdiff_t m_flMaxDistanceBetweenProbeSamples = 0x1600; // float32
                constexpr std::ptrdiff_t m_flInitialSlideUseForwardProbeTime = 0x1604; // float32
                constexpr std::ptrdiff_t m_flCurrentSlopeSampleDistance = 0x1608; // float32
                constexpr std::ptrdiff_t m_flSampleVelDiffStdDevScaleCutoff = 0x160C; // float32
                constexpr std::ptrdiff_t m_flSlopeFacingAngleToActivate = 0x1610; // float32
                constexpr std::ptrdiff_t m_flAirDragAfterJump = 0x1614; // float32
                constexpr std::ptrdiff_t m_flAirDragAfterJumpTime = 0x1618; // float32
                constexpr std::ptrdiff_t m_flAirDragMaxAngle = 0x161C; // float32
                constexpr std::ptrdiff_t m_flAirDragResetTime = 0x1620; // float32
                constexpr std::ptrdiff_t m_flLateSlideJumpWindow = 0x1624; // float32
                constexpr std::ptrdiff_t m_SlideEffectRemap = 0x1628; // CRemapFloat
                constexpr std::ptrdiff_t m_GetupSpeedCurve = 0x1638; // CPiecewiseCurve
                constexpr std::ptrdiff_t m_flGetupBusyDuration = 0x1678; // float32
                constexpr std::ptrdiff_t m_cameraSequenceStartSliding = 0x1680; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceEndSliding = 0x1708; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_SlideParticle = 0x1790; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStartSound = 0x1870; // CSoundEventName
                constexpr std::ptrdiff_t m_strLoopingSound = 0x1880; // CSoundEventName
                constexpr std::ptrdiff_t m_strStopSound = 0x1890; // CSoundEventName
            }
            // Parent: CNPC_TrooperBoss
            // Field count: 0
            namespace CNPC_TrooperBarrackBoss {
            }
            // Parent: CBaseTrigger
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_bEnabled (bool)
            // NetworkVarNames: m_MaxWeight (float32)
            // NetworkVarNames: m_FadeDuration (float32)
            // NetworkVarNames: m_Weight (float32)
            // NetworkVarNames: m_lookupFilename (char)
            namespace CColorCorrectionVolume {
                constexpr std::ptrdiff_t m_bEnabled = 0x990; // bool
                constexpr std::ptrdiff_t m_MaxWeight = 0x994; // float32
                constexpr std::ptrdiff_t m_FadeDuration = 0x998; // float32
                constexpr std::ptrdiff_t m_bStartDisabled = 0x99C; // bool
                constexpr std::ptrdiff_t m_Weight = 0x9A0; // float32
                constexpr std::ptrdiff_t m_lookupFilename = 0x9A4; // char[512]
                constexpr std::ptrdiff_t m_LastEnterWeight = 0xBA4; // float32
                constexpr std::ptrdiff_t m_LastEnterTime = 0xBA8; // GameTime_t
                constexpr std::ptrdiff_t m_LastExitWeight = 0xBAC; // float32
                constexpr std::ptrdiff_t m_LastExitTime = 0xBB0; // GameTime_t
            }
            // Parent: CBaseFilter
            // Field count: 5
            namespace CFilterEnemy {
                constexpr std::ptrdiff_t m_iszEnemyName = 0x540; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flRadius = 0x548; // float32
                constexpr std::ptrdiff_t m_flOuterRadius = 0x54C; // float32
                constexpr std::ptrdiff_t m_nMaxSquadmatesPerEnemy = 0x550; // int32
                constexpr std::ptrdiff_t m_iszPlayerName = 0x558; // CUtlSymbolLarge
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Targetdummy_4 {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTargetPracticeVData {
                constexpr std::ptrdiff_t m_TargetPracticeSelfModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TargetPracticeEnemyModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Afterburn {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_MetalSkin {
            }
            // Parent: CCitadel_Ability_TrooperGrenade
            // Field count: 0
            namespace CCitadel_Ability_TrooperBossGrenade {
            }
            // Parent: None
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_hStableHandle (uint64)
            namespace CModifierHandleBase {
                constexpr std::ptrdiff_t m_hStableHandle = 0x8; // uint64
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ShieldGuy_Ability02 {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Killing_Blow_Glow {
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Nano_ShadowVData {
                constexpr std::ptrdiff_t m_ShadowModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PurgeModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_EnemyAura = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flAuraRadius = 0x1590; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_FissureWallVData {
                constexpr std::ptrdiff_t m_FriendlyWallParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyWallParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WallTravelSoundLoop = 0x1720; // CSoundEventName
                constexpr std::ptrdiff_t m_WallModifier = 0x1730; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Upgrade_WeaponPowerForHealthVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HollowPoint_ProcVData {
                constexpr std::ptrdiff_t m_TracerParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ParticleModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_DamageOnHitGround {
                constexpr std::ptrdiff_t m_flDamage = 0xC0; // float32
            }
            // Parent: None
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_SourceItemID (AbilityID_t)
            // NetworkVarNames: m_TargetAbilityID (AbilityID_t)
            namespace ItemImbuementPair_t {
                constexpr std::ptrdiff_t m_SourceItemID = 0x30; // CUtlStringToken
                constexpr std::ptrdiff_t m_TargetAbilityID = 0x34; // CUtlStringToken
            }
            // Parent: CNPC_TrooperNeutral
            // Field count: 0
            namespace CNPC_TrooperNeutralNodeMover {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_Upgrade_AmmoScavenger {
                constexpr std::ptrdiff_t m_hLastOrbTarget = 0xB20; // CHandle<CBaseEntity>
            }
            // Parent: CModelPointEntity
            // Field count: 0
            namespace CShower {
            }
            // Parent: CBaseEntity
            // Field count: 18
            //
            // Metadata:
            // NetworkVarNames: m_flEndDistance (float)
            // NetworkVarNames: m_flStartDistance (float)
            // NetworkVarNames: m_flFogFalloffExponent (float)
            // NetworkVarNames: m_bHeightFogEnabled (bool)
            // NetworkVarNames: m_flFogHeightWidth (float)
            // NetworkVarNames: m_flFogHeightEnd (float)
            // NetworkVarNames: m_flFogHeightStart (float)
            // NetworkVarNames: m_flFogHeightExponent (float)
            // NetworkVarNames: m_flLODBias (float)
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_bStartDisabled (bool)
            // NetworkVarNames: m_flFogMaxOpacity (float)
            // NetworkVarNames: m_nCubemapSourceType (int)
            // NetworkVarNames: m_hSkyMaterial (HMaterialStrong)
            // NetworkVarNames: m_iszSkyEntity (string_t)
            // NetworkVarNames: m_hFogCubemapTexture (HRenderTextureStrong)
            // NetworkVarNames: m_bHasHeightFogEnd (bool)
            namespace CEnvCubemapFog {
                constexpr std::ptrdiff_t m_flEndDistance = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flStartDistance = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flFogFalloffExponent = 0x4F0; // float32
                constexpr std::ptrdiff_t m_bHeightFogEnabled = 0x4F4; // bool
                constexpr std::ptrdiff_t m_flFogHeightWidth = 0x4F8; // float32
                constexpr std::ptrdiff_t m_flFogHeightEnd = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flFogHeightStart = 0x500; // float32
                constexpr std::ptrdiff_t m_flFogHeightExponent = 0x504; // float32
                constexpr std::ptrdiff_t m_flLODBias = 0x508; // float32
                constexpr std::ptrdiff_t m_bActive = 0x50C; // bool
                constexpr std::ptrdiff_t m_bStartDisabled = 0x50D; // bool
                constexpr std::ptrdiff_t m_flFogMaxOpacity = 0x510; // float32
                constexpr std::ptrdiff_t m_nCubemapSourceType = 0x514; // int32
                constexpr std::ptrdiff_t m_hSkyMaterial = 0x518; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_iszSkyEntity = 0x520; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hFogCubemapTexture = 0x528; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_bHasHeightFogEnd = 0x530; // bool
                constexpr std::ptrdiff_t m_bFirstTime = 0x531; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTeleportToGangsterVData {
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 0
            namespace CCitadel_Ability_MedicHeal {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Intrinsic_Base {
            }
            // Parent: CBaseButton
            // Field count: 0
            namespace CPhysicalButton {
            }
            // Parent: CModelPointEntity
            // Field count: 17
            namespace CEnvExplosion {
                constexpr std::ptrdiff_t m_iMagnitude = 0x7C0; // int32
                constexpr std::ptrdiff_t m_flPlayerDamage = 0x7C4; // float32
                constexpr std::ptrdiff_t m_iRadiusOverride = 0x7C8; // int32
                constexpr std::ptrdiff_t m_flInnerRadius = 0x7CC; // float32
                constexpr std::ptrdiff_t m_spriteScale = 0x7D0; // int32
                constexpr std::ptrdiff_t m_flDamageForce = 0x7D4; // float32
                constexpr std::ptrdiff_t m_hInflictor = 0x7D8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iCustomDamageType = 0x7DC; // DamageTypes_t
                constexpr std::ptrdiff_t m_bCreateDebris = 0x7E0; // bool
                constexpr std::ptrdiff_t m_iszExplosionType = 0x7E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszCustomEffectName = 0x7F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszCustomSoundName = 0x7F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bSuppressParticleImpulse = 0x800; // bool
                constexpr std::ptrdiff_t m_iClassIgnore = 0x804; // Class_T
                constexpr std::ptrdiff_t m_iClassIgnore2 = 0x808; // Class_T
                constexpr std::ptrdiff_t m_iszEntityIgnoreName = 0x810; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hEntityIgnore = 0x818; // CHandle<CBaseEntity>
            }
            // Parent: CSoundEventEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_vMins (Vector)
            // NetworkVarNames: m_vMaxs (Vector)
            namespace CSoundEventAABBEntity {
                constexpr std::ptrdiff_t m_vMins = 0x5A0; // Vector
                constexpr std::ptrdiff_t m_vMaxs = 0x5AC; // Vector
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_RegeneratingBulletShieldVData {
                constexpr std::ptrdiff_t m_ActiveModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_QuickSilverVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ProcParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_SimpleAnimatingAIVData {
                constexpr std::ptrdiff_t m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            }
            // Parent: CTriggerMultiple
            // Field count: 0
            namespace CTriggerOnce {
            }
            // Parent: CBaseDashCastAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityCadenceSilenceContraptionsVData {
                constexpr std::ptrdiff_t m_SilenceContraptionsModifier = 0x15E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CPrecipitationVData {
                constexpr std::ptrdiff_t m_szParticlePrecipitationEffect = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flInnerDistance = 0x108; // float32
                constexpr std::ptrdiff_t m_nAttachType = 0x10C; // ParticleAttachment_t
                constexpr std::ptrdiff_t m_bBatchSameVolumeType = 0x110; // bool
                constexpr std::ptrdiff_t m_nRTEnvCP = 0x114; // int32
                constexpr std::ptrdiff_t m_nRTEnvCPComponent = 0x118; // int32
                constexpr std::ptrdiff_t m_szModifier = 0x120; // CUtlString
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CLogicProximity {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Tengu_Urn {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB0C; // QAngle
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Killing_Blow_GlowVData {
                constexpr std::ptrdiff_t m_ShivOnlyDeathStatus = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShivOnlyDeathTrail = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strShivOnlyActivateSound = 0x7C8; // CSoundEventName
                constexpr std::ptrdiff_t m_strShivOnlyLoopSound = 0x7D8; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Astro_Rifle {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Decoy_Tracker {
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_ActiveBulletShieldVData {
                constexpr std::ptrdiff_t m_TempShieldModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FullSpectrumVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BonusDamageModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 0
            namespace CCitadel_Modifier_OneVsOne {
            }
            // Parent: CCitadelModifierAura
            // Field count: 2
            namespace CCitadel_Modifier_ControlPointCapturerAura {
                constexpr std::ptrdiff_t m_particle = 0xE0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_hCP = 0xE4; // CHandle<CCitadelControlPointTrigger>
            }
            // Parent: CBaseAnimGraph
            // Field count: 30
            //
            // Metadata:
            // NetworkVarNames: m_iszCommentaryFile (string_t)
            // NetworkVarNames: m_hViewPosition (CHandle<CBaseEntity>)
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_flStartTime (GameTime_t)
            // NetworkVarNames: m_flStartTimeInCommentary (float32)
            // NetworkVarNames: m_iszTitle (string_t)
            // NetworkVarNames: m_iszSpeakers (string_t)
            // NetworkVarNames: m_iNodeNumber (int)
            // NetworkVarNames: m_iNodeNumberMax (int)
            // NetworkVarNames: m_bListenedTo (bool)
            namespace CPointCommentaryNode {
                constexpr std::ptrdiff_t m_iszPreCommands = 0xA48; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszPostCommands = 0xA50; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszCommentaryFile = 0xA58; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszViewTarget = 0xA60; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hViewTarget = 0xA68; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hViewTargetAngles = 0xA6C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iszViewPosition = 0xA70; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hViewPosition = 0xA78; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hViewPositionMover = 0xA7C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bPreventMovement = 0xA80; // bool
                constexpr std::ptrdiff_t m_bUnderCrosshair = 0xA81; // bool
                constexpr std::ptrdiff_t m_bUnstoppable = 0xA82; // bool
                constexpr std::ptrdiff_t m_flFinishedTime = 0xA84; // GameTime_t
                constexpr std::ptrdiff_t m_vecFinishOrigin = 0xA88; // Vector
                constexpr std::ptrdiff_t m_vecOriginalAngles = 0xA94; // QAngle
                constexpr std::ptrdiff_t m_vecFinishAngles = 0xAA0; // QAngle
                constexpr std::ptrdiff_t m_bPreventChangesWhileMoving = 0xAAC; // bool
                constexpr std::ptrdiff_t m_bDisabled = 0xAAD; // bool
                constexpr std::ptrdiff_t m_vecTeleportOrigin = 0xAB0; // Vector
                constexpr std::ptrdiff_t m_flAbortedPlaybackAt = 0xABC; // GameTime_t
                constexpr std::ptrdiff_t m_pOnCommentaryStarted = 0xAC0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_pOnCommentaryStopped = 0xAE8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bActive = 0xB10; // bool
                constexpr std::ptrdiff_t m_flStartTime = 0xB14; // GameTime_t
                constexpr std::ptrdiff_t m_flStartTimeInCommentary = 0xB18; // float32
                constexpr std::ptrdiff_t m_iszTitle = 0xB20; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSpeakers = 0xB28; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iNodeNumber = 0xB30; // int32
                constexpr std::ptrdiff_t m_iNodeNumberMax = 0xB34; // int32
                constexpr std::ptrdiff_t m_bListenedTo = 0xB38; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_AccuracyTracker {
                constexpr std::ptrdiff_t m_flInterval = 0xD8; // float32
                constexpr std::ptrdiff_t m_flProgress = 0xDC; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_GenericPerson_1 {
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGenericPerson1VData {
            }
            // Parent: CCitadel_Modifier_Base_Buildup
            // Field count: 0
            namespace CCitadel_Modifier_Viper_Venom {
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_PerchedPredatorDrag {
                constexpr std::ptrdiff_t m_qRelativeOffset = 0x130; // QAngle
                constexpr std::ptrdiff_t m_flRelativeDist = 0x13C; // float32
                constexpr std::ptrdiff_t m_vecOffsetDir = 0x140; // Vector
                constexpr std::ptrdiff_t m_hFollowEnt = 0x14C; // CHandle<CBaseEntity>
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityPsychicPulseVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_PulseParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flCastEffectLifetime = 0x1650; // float32
                constexpr std::ptrdiff_t m_flConeAngle = 0x1654; // float32
                constexpr std::ptrdiff_t m_flConeHalfWidth = 0x1658; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Hornet_Chain_Connection {
                constexpr std::ptrdiff_t m_vecOrigin = 0xC0; // Vector
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_Savior_VData {
                constexpr std::ptrdiff_t m_SaviorModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CastParticle = 0x15B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBaseClientUIEntity
            // Field count: 23
            //
            // Metadata:
            // NetworkVarNames: m_bIgnoreInput (bool)
            // NetworkVarNames: m_bLit (bool)
            // NetworkVarNames: m_bFollowPlayerAcrossTeleport (bool)
            // NetworkVarNames: m_flWidth (float)
            // NetworkVarNames: m_flHeight (float)
            // NetworkVarNames: m_flDPI (float)
            // NetworkVarNames: m_flInteractDistance (float)
            // NetworkVarNames: m_flDepthOffset (float)
            // NetworkVarNames: m_unOwnerContext (uint32)
            // NetworkVarNames: m_unHorizontalAlign (uint32)
            // NetworkVarNames: m_unVerticalAlign (uint32)
            // NetworkVarNames: m_unOrientation (uint32)
            // NetworkVarNames: m_bAllowInteractionFromAllSceneWorlds (bool)
            // NetworkVarNames: m_vecCSSClasses (string_t)
            // NetworkVarNames: m_bOpaque (bool)
            // NetworkVarNames: m_bNoDepth (bool)
            // NetworkVarNames: m_bRenderBackface (bool)
            // NetworkVarNames: m_bUseOffScreenIndicator (bool)
            // NetworkVarNames: m_bExcludeFromSaveGames (bool)
            // NetworkVarNames: m_bGrabbable (bool)
            // NetworkVarNames: m_bOnlyRenderToTexture (bool)
            // NetworkVarNames: m_bDisableMipGen (bool)
            // NetworkVarNames: m_nExplicitImageLayout (int32)
            namespace CPointClientUIWorldPanel {
                constexpr std::ptrdiff_t m_bIgnoreInput = 0x970; // bool
                constexpr std::ptrdiff_t m_bLit = 0x971; // bool
                constexpr std::ptrdiff_t m_bFollowPlayerAcrossTeleport = 0x972; // bool
                constexpr std::ptrdiff_t m_flWidth = 0x974; // float32
                constexpr std::ptrdiff_t m_flHeight = 0x978; // float32
                constexpr std::ptrdiff_t m_flDPI = 0x97C; // float32
                constexpr std::ptrdiff_t m_flInteractDistance = 0x980; // float32
                constexpr std::ptrdiff_t m_flDepthOffset = 0x984; // float32
                constexpr std::ptrdiff_t m_unOwnerContext = 0x988; // uint32
                constexpr std::ptrdiff_t m_unHorizontalAlign = 0x98C; // uint32
                constexpr std::ptrdiff_t m_unVerticalAlign = 0x990; // uint32
                constexpr std::ptrdiff_t m_unOrientation = 0x994; // uint32
                constexpr std::ptrdiff_t m_bAllowInteractionFromAllSceneWorlds = 0x998; // bool
                constexpr std::ptrdiff_t m_vecCSSClasses = 0x9A0; // CNetworkUtlVectorBase<CUtlSymbolLarge>
                constexpr std::ptrdiff_t m_bOpaque = 0x9B8; // bool
                constexpr std::ptrdiff_t m_bNoDepth = 0x9B9; // bool
                constexpr std::ptrdiff_t m_bRenderBackface = 0x9BA; // bool
                constexpr std::ptrdiff_t m_bUseOffScreenIndicator = 0x9BB; // bool
                constexpr std::ptrdiff_t m_bExcludeFromSaveGames = 0x9BC; // bool
                constexpr std::ptrdiff_t m_bGrabbable = 0x9BD; // bool
                constexpr std::ptrdiff_t m_bOnlyRenderToTexture = 0x9BE; // bool
                constexpr std::ptrdiff_t m_bDisableMipGen = 0x9BF; // bool
                constexpr std::ptrdiff_t m_nExplicitImageLayout = 0x9C0; // int32
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterContext {
                constexpr std::ptrdiff_t m_iFilterContext = 0x540; // CUtlSymbolLarge
            }
            // Parent: CPathParticleRope
            // Field count: 0
            namespace CPathParticleRopeAlias_path_particle_rope_clientside {
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CCitadelFilterModifier {
                constexpr std::ptrdiff_t m_iModifierName = 0x540; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BulletFlurry {
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MedicBulletsVData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x738; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ProcSound = 0x818; // CSoundEventName
            }
            // Parent: CAI_Component
            // Field count: 4
            namespace CAI_FreePass {
                constexpr std::ptrdiff_t m_hTarget = 0x40; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_FreePassTimeRemaining = 0x44; // float32
                constexpr std::ptrdiff_t m_FreePassMoveMonitor = 0x48; // CAI_MoveMonitor
                constexpr std::ptrdiff_t m_Params = 0x58; // AI_FreePassParams_t
            }
            // Parent: None
            // Field count: 6
            namespace CBuoyancyHelper {
                constexpr std::ptrdiff_t m_nFluidType = 0x18; // CUtlStringToken
                constexpr std::ptrdiff_t m_flFluidDensity = 0x1C; // float32
                constexpr std::ptrdiff_t m_vecFractionOfWheelSubmergedForWheelFriction = 0x20; // CUtlVector<float32>
                constexpr std::ptrdiff_t m_vecWheelFrictionScales = 0x38; // CUtlVector<float32>
                constexpr std::ptrdiff_t m_vecFractionOfWheelSubmergedForWheelDrag = 0x50; // CUtlVector<float32>
                constexpr std::ptrdiff_t m_vecWheelDrag = 0x68; // CUtlVector<float32>
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_Aura_Base {
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterAttributeInt {
                constexpr std::ptrdiff_t m_sAttributeName = 0x540; // CUtlStringToken
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Mirage_SandPhantom_Proc {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilitySleepBombVData {
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AuraModifier = 0x1640; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_RocketLauncher {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_HighAlert {
            }
            // Parent: CCitadelModifierVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Bebop_LaserBeamVData {
                constexpr std::ptrdiff_t m_SlowModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BeamParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BeamParticleLocal = 0x6F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BeamHitParticle = 0x7D8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strLaserStartSound = 0x8B8; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserEndSound = 0x8C8; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserLoopSound = 0x8D8; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserHitSound = 0x8E8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Wraith_RapidFire {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Bull_Heal_Target {
                constexpr std::ptrdiff_t m_flTetherRangeSquared = 0x1D8; // float32
            }
            // Parent: CPlayer_CameraServices
            // Field count: 0
            namespace CCitadelPlayer_CameraServices {
            }
            // Parent: CPointEntity
            // Field count: 6
            namespace CAISound {
                constexpr std::ptrdiff_t m_iSoundType = 0x4E8; // SoundTypes_t
                constexpr std::ptrdiff_t m_iSoundFlags = 0x4EA; // SoundFlags_t
                constexpr std::ptrdiff_t m_iVolume = 0x4EC; // int32
                constexpr std::ptrdiff_t m_iSoundIndex = 0x4F0; // int32
                constexpr std::ptrdiff_t m_flDuration = 0x4F4; // float32
                constexpr std::ptrdiff_t m_iszProxyEntityName = 0x4F8; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Field count: 7
            namespace CPointEntityFinder {
                constexpr std::ptrdiff_t m_hEntity = 0x4E8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iFilterName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hFilter = 0x4F8; // CHandle<CBaseFilter>
                constexpr std::ptrdiff_t m_iRefName = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hReference = 0x508; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_FindMethod = 0x50C; // EntFinderMethod_t
                constexpr std::ptrdiff_t m_OnFoundEntity = 0x510; // CEntityIOOutput
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_WreckerSalvageBuffVData {
                constexpr std::ptrdiff_t m_WeaponBuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Astro_ShotgunBuff {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityAstroRifleVData {
                constexpr std::ptrdiff_t m_SelfModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_vStrikeVel (Vector)
            // NetworkVarNames: m_flStartHeight (float)
            namespace CCitadel_Ability_LashDownStrike {
                constexpr std::ptrdiff_t m_ImpactTime = 0xBA8; // GameTime_t
                constexpr std::ptrdiff_t m_vDamagePos = 0xBAC; // Vector
                constexpr std::ptrdiff_t m_vDamageDir = 0xBB8; // Vector
                constexpr std::ptrdiff_t m_vHitEnemies = 0xBC8; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vecHitEntities = 0xC00; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_PreviewEffect = 0xC18; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vStrikeVel = 0xDE0; // Vector
                constexpr std::ptrdiff_t m_flStartHeight = 0xDEC; // float32
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierPsychicLiftVData {
                constexpr std::ptrdiff_t m_LiftParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStartSound = 0x7C8; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityMeleeVData {
                constexpr std::ptrdiff_t m_flMeleeInputBufferTime = 0x1560; // float32
                constexpr std::ptrdiff_t m_flCollisionDistance = 0x1564; // float32
                constexpr std::ptrdiff_t m_flHeavyAttackRequiredHoldTime = 0x1568; // float32
                constexpr std::ptrdiff_t m_flLightAttackMaxHoldTime = 0x156C; // float32
                constexpr std::ptrdiff_t m_MeleeDamageFlags = 0x1570; // TakeDamageFlags_t
                constexpr std::ptrdiff_t m_strEffectsAttachName = 0x1578; // CUtlString
            }
            // Parent: None
            // Field count: 13
            //
            // Metadata:
            // NetworkVarNames: m_nModelID (int32)
            // NetworkVarNames: m_hMaterialBase (HMaterialStrong)
            // NetworkVarNames: m_hMaterialDamageOverlay (HMaterialStrong)
            // NetworkVarNames: m_solid (ShardSolid_t)
            // NetworkVarNames: m_vecPanelSize (Vector2D)
            // NetworkVarNames: m_vecStressPositionA (Vector2D)
            // NetworkVarNames: m_vecStressPositionB (Vector2D)
            // NetworkVarNames: m_vecPanelVertices (Vector2D)
            // NetworkVarNames: m_vInitialPanelVertices (Vector4D)
            // NetworkVarNames: m_flGlassHalfThickness (float)
            // NetworkVarNames: m_bHasParent (bool)
            // NetworkVarNames: m_bParentFrozen (bool)
            // NetworkVarNames: m_SurfacePropStringToken (CUtlStringToken)
            namespace shard_model_desc_t {
                constexpr std::ptrdiff_t m_nModelID = 0x8; // int32
                constexpr std::ptrdiff_t m_hMaterialBase = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_hMaterialDamageOverlay = 0x18; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_solid = 0x20; // ShardSolid_t
                constexpr std::ptrdiff_t m_vecPanelSize = 0x24; // Vector2D
                constexpr std::ptrdiff_t m_vecStressPositionA = 0x2C; // Vector2D
                constexpr std::ptrdiff_t m_vecStressPositionB = 0x34; // Vector2D
                constexpr std::ptrdiff_t m_vecPanelVertices = 0x40; // CNetworkUtlVectorBase<Vector2D>
                constexpr std::ptrdiff_t m_vInitialPanelVertices = 0x58; // CNetworkUtlVectorBase<Vector4D>
                constexpr std::ptrdiff_t m_flGlassHalfThickness = 0x70; // float32
                constexpr std::ptrdiff_t m_bHasParent = 0x74; // bool
                constexpr std::ptrdiff_t m_bParentFrozen = 0x75; // bool
                constexpr std::ptrdiff_t m_SurfacePropStringToken = 0x78; // CUtlStringToken
            }
            // Parent: CBaseAnimGraph
            // Field count: 4
            namespace CBaseProp {
                constexpr std::ptrdiff_t m_bModelOverrodeBlockLOS = 0xA48; // bool
                constexpr std::ptrdiff_t m_iShapeType = 0xA4C; // int32
                constexpr std::ptrdiff_t m_bConformToCollisionBounds = 0xA50; // bool
                constexpr std::ptrdiff_t m_mPreferredCatchTransform = 0xA54; // matrix3x4_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BreakablePropSpeedPickup {
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 2
            namespace CCitadel_Modifier_ThrowSandProjectile {
                constexpr std::ptrdiff_t m_vecHitEntities = 0xC0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vInitialCastPosition = 0x180; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PuddleVData {
                constexpr std::ptrdiff_t m_puddleAoeDamageFx = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetDamageFx = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHornetStingVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HitParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierStormCloudVData {
                constexpr std::ptrdiff_t m_ZapFriendly = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DrawFriendly = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AoEFriendly = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZapEnemy = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DrawEnemy = 0x988; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AoEEnemy = 0xA68; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strChannelEndingSoonSound = 0xB48; // CSoundEventName
                constexpr std::ptrdiff_t m_strChannelFinishedSound = 0xB58; // CSoundEventName
                constexpr std::ptrdiff_t m_strDamageRecievedSound = 0xB68; // CSoundEventName
                constexpr std::ptrdiff_t m_strAmbientZapSound = 0xB78; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_MidBossAggroEnemy {
                constexpr std::ptrdiff_t m_flLastActiveTime = 0xC0; // GameTime_t
            }
            // Parent: None
            // Field count: 22
            namespace CBaseModifier {
                constexpr std::ptrdiff_t m_nSerialNumber = 0x28; // ModifierSerialNumber_t
                constexpr std::ptrdiff_t m_flLastAppliedTime = 0x2C; // GameTime_t
                constexpr std::ptrdiff_t m_flCreationTime = 0x30; // GameTime_t
                constexpr std::ptrdiff_t m_flDuration = 0x34; // float32
                constexpr std::ptrdiff_t m_hCaster = 0x38; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hAbility = 0x3C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hAuraProvider = 0x40; // CModifierHandleBase
                constexpr std::ptrdiff_t m_nQueuedModifierRefreshHandle = 0x58; // ModifierQueuedRefreshHandle_t
                constexpr std::ptrdiff_t m_iAttributes = 0x5A; // uint8
                constexpr std::ptrdiff_t m_iTeam = 0x5B; // uint8
                constexpr std::ptrdiff_t m_iStackCount = 0x5C; // int16
                constexpr std::ptrdiff_t m_iMaxStackCount = 0x5E; // int16
                constexpr std::ptrdiff_t m_pVecStackDecayTimes = 0x60; // CUtlVector<GameTime_t>*
                constexpr std::ptrdiff_t m_eDestroyReason = 0x68; // uint8
                constexpr std::ptrdiff_t m_bDisabled = 0x69; // bool
                constexpr std::ptrdiff_t m_bSuppressSendModifier = 0x6A; // bool
                constexpr std::ptrdiff_t m_flThinkInterval = 0x6C; // float32
                constexpr std::ptrdiff_t m_flThinkIntervalStartTime = 0x70; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeScale = 0x74; // float32
                constexpr std::ptrdiff_t m_pVecTrackedObjects = 0x78; // CUtlVector<IModifierTrackedObject*>*
                constexpr std::ptrdiff_t m_hModifierListHandle = 0x80; // ModifierRuntimeHandle_t
                constexpr std::ptrdiff_t m_iStringIndex = 0x84; // int32
            }
            // Parent: CBaseModelEntity
            // Field count: 12
            //
            // Metadata:
            // NetworkVarNames: m_hSkyMaterial (HMaterialStrong)
            // NetworkVarNames: m_hSkyMaterialLightingOnly (HMaterialStrong)
            // NetworkVarNames: m_bStartDisabled (bool)
            // NetworkVarNames: m_vTintColor (Color)
            // NetworkVarNames: m_vTintColorLightingOnly (Color)
            // NetworkVarNames: m_flBrightnessScale (float)
            // NetworkVarNames: m_nFogType (int)
            // NetworkVarNames: m_flFogMinStart (float)
            // NetworkVarNames: m_flFogMinEnd (float)
            // NetworkVarNames: m_flFogMaxStart (float)
            // NetworkVarNames: m_flFogMaxEnd (float)
            // NetworkVarNames: m_bEnabled (bool)
            namespace CEnvSky {
                constexpr std::ptrdiff_t m_hSkyMaterial = 0x7C0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_hSkyMaterialLightingOnly = 0x7C8; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_bStartDisabled = 0x7D0; // bool
                constexpr std::ptrdiff_t m_vTintColor = 0x7D1; // Color
                constexpr std::ptrdiff_t m_vTintColorLightingOnly = 0x7D5; // Color
                constexpr std::ptrdiff_t m_flBrightnessScale = 0x7DC; // float32
                constexpr std::ptrdiff_t m_nFogType = 0x7E0; // int32
                constexpr std::ptrdiff_t m_flFogMinStart = 0x7E4; // float32
                constexpr std::ptrdiff_t m_flFogMinEnd = 0x7E8; // float32
                constexpr std::ptrdiff_t m_flFogMaxStart = 0x7EC; // float32
                constexpr std::ptrdiff_t m_flFogMaxEnd = 0x7F0; // float32
                constexpr std::ptrdiff_t m_bEnabled = 0x7F4; // bool
            }
            // Parent: CPointEntity
            // Field count: 6
            namespace CPointVelocitySensor {
                constexpr std::ptrdiff_t m_hTargetEntity = 0x4E8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vecAxis = 0x4EC; // Vector
                constexpr std::ptrdiff_t m_bEnabled = 0x4F8; // bool
                constexpr std::ptrdiff_t m_fPrevVelocity = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flAvgInterval = 0x500; // float32
                constexpr std::ptrdiff_t m_Velocity = 0x508; // CEntityOutputTemplate<float32>
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterMassGreater {
                constexpr std::ptrdiff_t m_fFilterMass = 0x540; // float32
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace FilterTeam {
                constexpr std::ptrdiff_t m_iFilterTeam = 0x540; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Fathom_ScaldingSpray_VData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Guiding_Arrow {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_QuickSilver_Buff {
            }
            // Parent: CFuncTrackTrain
            // Field count: 1
            namespace CFuncTankTrain {
                constexpr std::ptrdiff_t m_OnDeath = 0x910; // CEntityIOOutput
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_timeLaunch (GameTime_t)
            namespace CItemXP {
                constexpr std::ptrdiff_t m_timeLaunch = 0x818; // GameTime_t
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CNullEntity {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_Grasp_Victim_VData {
                constexpr std::ptrdiff_t m_strVictimTetheredSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_GraspVictimParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityRapidFireVData {
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityRiotProtocolVData {
                constexpr std::ptrdiff_t m_ChargeUpParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastDelayModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_WardenBuffModifier = 0x1730; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Chrono_KineticCarbineVData {
                constexpr std::ptrdiff_t m_TracerParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FullyChargedParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strFullyCharged = 0x7C8; // CSoundEventName
                constexpr std::ptrdiff_t m_strShotSound = 0x7D8; // CSoundEventName
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 0
            namespace CCitadel_CatAnimating {
            }
            // Parent: CMarkupVolumeWithRef
            // Field count: 1
            namespace CMarkupVolumeTagged_NavGame {
                constexpr std::ptrdiff_t m_bFloodFillAttribute = 0x818; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_nNumStacks (int)
            namespace CItem_RestorativeLocket {
                constexpr std::ptrdiff_t m_nNumStacks = 0xBC8; // int32
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_TechUpgrade_SuperAcolyteGloves {
                constexpr std::ptrdiff_t fl_StoredDamage = 0xB58; // float32
            }
            // Parent: CLogicalEntity
            // Field count: 12
            namespace CPointTemplate {
                constexpr std::ptrdiff_t m_iszWorldName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSource2EntityLumpName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszEntityFilterName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flTimeoutInterval = 0x500; // float32
                constexpr std::ptrdiff_t m_bAsynchronouslySpawnEntities = 0x504; // bool
                constexpr std::ptrdiff_t m_pOutputOnSpawned = 0x508; // CEntityIOOutput
                constexpr std::ptrdiff_t m_clientOnlyEntityBehavior = 0x530; // PointTemplateClientOnlyEntityBehavior_t
                constexpr std::ptrdiff_t m_ownerSpawnGroupType = 0x534; // PointTemplateOwnerSpawnGroupType_t
                constexpr std::ptrdiff_t m_createdSpawnGroupHandles = 0x538; // CUtlVector<uint32>
                constexpr std::ptrdiff_t m_SpawnedEntityHandles = 0x550; // CUtlVector<CEntityHandle>
                constexpr std::ptrdiff_t m_ScriptSpawnCallback = 0x568; // HSCRIPT
                constexpr std::ptrdiff_t m_ScriptCallbackScope = 0x570; // HSCRIPT
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityFealtyVData {
                constexpr std::ptrdiff_t m_TargetModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadel_Modifier_Disarmed
            // Field count: 0
            namespace CCitadel_Modifier_ThrowSandDebuff {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Decoy_Self_Buff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HornetSnipeVData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_WingBlast {
                constexpr std::ptrdiff_t m_Particle = 0xB00; // ParticleIndex_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_LifeDrainVData {
                constexpr std::ptrdiff_t m_LifeDrainTargetModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_LifeDrainCasterModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BoxingGloveVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SwingParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_Item_Bleeding_Bullets_Active {
            }
            // Parent: CBaseNPCMaker
            // Field count: 2
            namespace CTemplateNPCMaker {
                constexpr std::ptrdiff_t m_iszWorldName = 0x5E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSource2EntityLumpName = 0x5F0; // CUtlSymbolLarge
            }
            // Parent: CCitadel_Modifier_Silenced
            // Field count: 0
            namespace CCitadel_Modifier_ModDisruptor {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_CloakingDeviceActive {
            }
            // Parent: CPointEntity
            // Field count: 6
            namespace CPhysForce {
                constexpr std::ptrdiff_t m_nameAttach = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_force = 0x4F8; // float32
                constexpr std::ptrdiff_t m_forceTime = 0x4FC; // float32
                constexpr std::ptrdiff_t m_attachedObject = 0x500; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_wasRestored = 0x504; // bool
                constexpr std::ptrdiff_t m_integrator = 0x508; // CConstantForceController
            }
            // Parent: CLogicalEntity
            // Field count: 6
            namespace CLogicDistanceAutosave {
                constexpr std::ptrdiff_t m_iszTargetEntity = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flDistanceToPlayer = 0x4F0; // float32
                constexpr std::ptrdiff_t m_bForceNewLevelUnit = 0x4F4; // bool
                constexpr std::ptrdiff_t m_bCheckCough = 0x4F5; // bool
                constexpr std::ptrdiff_t m_bThinkDangerous = 0x4F6; // bool
                constexpr std::ptrdiff_t m_flDangerousTime = 0x4F8; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Fathom_ScaldingSpray {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Haze_StackingDamage {
            }
            // Parent: CitadelAbilityVData
            // Field count: 17
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Viscous_TelepunchVData {
                constexpr std::ptrdiff_t m_PortalParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PunchParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WallPunchParticle = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CeilingPunchParticle = 0x18E0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyPortalSound = 0x19C0; // CSoundEventName
                constexpr std::ptrdiff_t m_SelfPortalSound = 0x19D0; // CSoundEventName
                constexpr std::ptrdiff_t m_WindupSound = 0x19E0; // CSoundEventName
                constexpr std::ptrdiff_t m_PunchSound = 0x19F0; // CSoundEventName
                constexpr std::ptrdiff_t m_PunchRollSlowModifier = 0x1A00; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImpactModifier = 0x1A10; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flEnemyPortalTelegraphTime = 0x1A20; // float32
                constexpr std::ptrdiff_t m_flSelfPortalTelegraphTime = 0x1A24; // float32
                constexpr std::ptrdiff_t m_flWindupTime = 0x1A28; // float32
                constexpr std::ptrdiff_t m_flAttackTime = 0x1A2C; // float32
                constexpr std::ptrdiff_t m_flGroundTraceOnPlayerHitDistance = 0x1A30; // float32
                constexpr std::ptrdiff_t m_flPlayerCheckSphereRadius = 0x1A34; // float32
            }
            // Parent: CEntityComponent
            // Field count: 3
            namespace CPathQueryComponent {
                constexpr std::ptrdiff_t m_vecPathSamplePositions = 0x18; // CUtlVector<Vector>
                constexpr std::ptrdiff_t m_vecPathSampleParameters = 0x30; // CUtlVector<float32>
                constexpr std::ptrdiff_t m_vecPathSampleDistances = 0x48; // CUtlVector<float32>
            }
            // Parent: CAI_CitadelNPC
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_flForwardSpeed (float)
            // NetworkVarNames: m_hOwnerPawn (CHandle<CBaseEntity>)
            namespace CNPC_NanoRollermine {
                constexpr std::ptrdiff_t m_flForwardSpeed = 0x1828; // float32
                constexpr std::ptrdiff_t m_hOwnerPawn = 0x1870; // CHandle<CBaseEntity>
            }
            // Parent: CPointEntity
            // Field count: 5
            namespace CInfoDynamicShadowHint {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_flRange = 0x4EC; // float32
                constexpr std::ptrdiff_t m_nImportance = 0x4F0; // int32
                constexpr std::ptrdiff_t m_nLightChoice = 0x4F4; // int32
                constexpr std::ptrdiff_t m_hLight = 0x4F8; // CHandle<CBaseEntity>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_nFastFireBulletsLeft (int)
            // NetworkVarNames: m_flBlitzEndTime (CCitadelAutoScaledTime)
            namespace CAbility_Synth_Blitz {
                constexpr std::ptrdiff_t m_vecSpecialShots = 0xB00; // CUtlVector<ShotID_t>
                constexpr std::ptrdiff_t m_nFastFireBulletsLeft = 0xB18; // int32
                constexpr std::ptrdiff_t m_flBlitzEndTime = 0xB20; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_bCanApplyTechAmp = 0xB38; // bool
                constexpr std::ptrdiff_t m_bCanLifesteal = 0xB39; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ConsumedProtectionRacket {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_TargetPractice {
            }
            // Parent: CSoundOpvarSetPointEntity
            // Field count: 9
            namespace CSoundOpvarSetAABBEntity {
                constexpr std::ptrdiff_t m_vDistanceInnerMins = 0x670; // Vector
                constexpr std::ptrdiff_t m_vDistanceInnerMaxs = 0x67C; // Vector
                constexpr std::ptrdiff_t m_vDistanceOuterMins = 0x688; // Vector
                constexpr std::ptrdiff_t m_vDistanceOuterMaxs = 0x694; // Vector
                constexpr std::ptrdiff_t m_nAABBDirection = 0x6A0; // int32
                constexpr std::ptrdiff_t m_vInnerMins = 0x6A4; // Vector
                constexpr std::ptrdiff_t m_vInnerMaxs = 0x6B0; // Vector
                constexpr std::ptrdiff_t m_vOuterMins = 0x6BC; // Vector
                constexpr std::ptrdiff_t m_vOuterMaxs = 0x6C8; // Vector
            }
            // Parent: None
            // Field count: 2
            namespace CEnvWindShared__WindVariationEvent_t {
                constexpr std::ptrdiff_t m_flWindAngleVariation = 0x0; // float32
                constexpr std::ptrdiff_t m_flWindSpeedVariation = 0x4; // float32
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CTakeDamageInfoAPI {
            }
            // Parent: CTriggerOnce
            // Field count: 1
            namespace CScriptTriggerOnce {
                constexpr std::ptrdiff_t m_vExtent = 0x9B8; // Vector
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_HighImpactArmor {
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CNavWalkable {
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Synth_Pulse_VData {
                constexpr std::ptrdiff_t m_EscapeModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AoEParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EffectParticle = 0x1660; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChannelParticle = 0x1740; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x1820; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RadiusParticle = 0x1900; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExpireSound = 0x19E0; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSequenceInSatchel = 0x19F0; // CitadelCameraOperationsSequence_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Thumper_3 {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_RocketBarrageVolleyVData {
                constexpr std::ptrdiff_t m_strFireSound = 0x608; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ZiplineKnockdownImmune {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierContainmentVictimVData {
                constexpr std::ptrdiff_t m_AreaParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChainedParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Slow {
            }
            // Parent: None
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_iGlowType (int32)
            // NetworkVarNames: m_iGlowTeam (int32)
            // NetworkVarNames: m_nGlowRange (int32)
            // NetworkVarNames: m_nGlowRangeMin (int32)
            // NetworkVarNames: m_glowColorOverride (Color)
            // NetworkVarNames: m_bFlashing (bool)
            // NetworkVarNames: m_flGlowTime (float)
            // NetworkVarNames: m_flGlowStartTime (float)
            namespace CGlowProperty {
                constexpr std::ptrdiff_t m_fGlowColor = 0x8; // Vector
                constexpr std::ptrdiff_t m_iGlowType = 0x30; // int32
                constexpr std::ptrdiff_t m_iGlowTeam = 0x34; // int32
                constexpr std::ptrdiff_t m_nGlowRange = 0x38; // int32
                constexpr std::ptrdiff_t m_nGlowRangeMin = 0x3C; // int32
                constexpr std::ptrdiff_t m_glowColorOverride = 0x40; // Color
                constexpr std::ptrdiff_t m_bFlashing = 0x44; // bool
                constexpr std::ptrdiff_t m_flGlowTime = 0x48; // float32
                constexpr std::ptrdiff_t m_flGlowStartTime = 0x4C; // float32
                constexpr std::ptrdiff_t m_bGlowing = 0x50; // bool
            }
            // Parent: CTriggerModifier
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_vExitOrigin (Vector)
            namespace CCitadelTeleportTrigger {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x9A0; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_vExitOrigin = 0x9B8; // Vector
                constexpr std::ptrdiff_t m_strExitPoint = 0x9F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnTeleport = 0x9F8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_strPropModel = 0xA20; // CUtlSymbolLarge
            }
            // Parent: CPointClientUIWorldPanel
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_messageText (char)
            namespace CPointClientUIWorldTextPanel {
                constexpr std::ptrdiff_t m_messageText = 0x9C8; // char[512]
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoInstructorHintTarget {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Mirage_SandPhantom_ProcReady {
            }
            // Parent: CCitadelModifierVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_HookTargetVData {
                constexpr std::ptrdiff_t m_flApproachingWhooshAnticipationTime = 0x608; // float32
                constexpr std::ptrdiff_t m_flCloseEnoughDistance = 0x60C; // float32
                constexpr std::ptrdiff_t m_flTossUpSpeed = 0x610; // float32
                constexpr std::ptrdiff_t m_SlowModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HookRetrieveParticle = 0x628; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strRetractSound = 0x708; // CSoundEventName
                constexpr std::ptrdiff_t m_strRetractSoundEnd = 0x718; // CSoundEventName
                constexpr std::ptrdiff_t m_strApproachingWhooshSound = 0x728; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_TargetPracticeSelf {
                constexpr std::ptrdiff_t m_bFoundTarget = 0xC0; // bool
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_SilencerProcActive {
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItem_RestorativeLocket_VData {
                constexpr std::ptrdiff_t m_CastParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TrailParticle = 0x1688; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_CharmedWraps_VData {
                constexpr std::ptrdiff_t m_SwingParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x718; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_SleepBomb_Aura {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Yakuza_Shakedown {
                constexpr std::ptrdiff_t m_IgnoreChannelSlow = 0xB00; // int32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Viper_DebuffDagger {
            }
            // Parent: CitadelItemVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_CheatDeathVData {
                constexpr std::ptrdiff_t m_DamagePulseParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DamageTargetParticle = 0x1688; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sHealPulseSound = 0x1768; // CSoundEventName
                constexpr std::ptrdiff_t m_sHealAndDamagePulseSound = 0x1778; // CSoundEventName
                constexpr std::ptrdiff_t m_DeathImmuneModifier = 0x1788; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Succor_Move {
                constexpr std::ptrdiff_t m_bHasPulled = 0xC0; // bool
                constexpr std::ptrdiff_t m_bIsPulling = 0xC1; // bool
            }
            // Parent: CLogicalEntity
            // Field count: 4
            namespace CLogicBranch {
                constexpr std::ptrdiff_t m_bInValue = 0x4E8; // bool
                constexpr std::ptrdiff_t m_Listeners = 0x4F0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_OnTrue = 0x508; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFalse = 0x530; // CEntityIOOutput
            }
            // Parent: CSprite
            // Field count: 0
            namespace CSpriteAlias_env_glow {
            }
            // Parent: CCitadelProjectile
            // Field count: 3
            namespace CCitadel_Projectile_Viscous_GooGrenade {
                constexpr std::ptrdiff_t m_nBounces = 0x870; // int32
                constexpr std::ptrdiff_t m_tNextDetonateTime = 0x874; // GameTime_t
                constexpr std::ptrdiff_t m_vecProjectileHitTargets = 0x878; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Upgrade_WeaponPowerForHealth {
            }
            // Parent: CBaseToggle
            // Field count: 25
            //
            // Metadata:
            // NetworkVarNames: m_glowEntity (CHandle<CBaseModelEntity>)
            // NetworkVarNames: m_usable (bool)
            // NetworkVarNames: m_szDisplayText (string_t)
            namespace CBaseButton {
                constexpr std::ptrdiff_t m_angMoveEntitySpace = 0x840; // QAngle
                constexpr std::ptrdiff_t m_fStayPushed = 0x84C; // bool
                constexpr std::ptrdiff_t m_fRotating = 0x84D; // bool
                constexpr std::ptrdiff_t m_ls = 0x850; // locksound_t
                constexpr std::ptrdiff_t m_sUseSound = 0x870; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_sLockedSound = 0x878; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_sUnlockedSound = 0x880; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_sOverrideAnticipationName = 0x888; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bLocked = 0x890; // bool
                constexpr std::ptrdiff_t m_bDisabled = 0x891; // bool
                constexpr std::ptrdiff_t m_flUseLockedTime = 0x894; // GameTime_t
                constexpr std::ptrdiff_t m_bSolidBsp = 0x898; // bool
                constexpr std::ptrdiff_t m_OnDamaged = 0x8A0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPressed = 0x8C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUseLocked = 0x8F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnIn = 0x918; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnOut = 0x940; // CEntityIOOutput
                constexpr std::ptrdiff_t m_nState = 0x968; // int32
                constexpr std::ptrdiff_t m_hConstraint = 0x96C; // CEntityHandle
                constexpr std::ptrdiff_t m_hConstraintParent = 0x970; // CEntityHandle
                constexpr std::ptrdiff_t m_bForceNpcExclude = 0x974; // bool
                constexpr std::ptrdiff_t m_sGlowEntity = 0x978; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_glowEntity = 0x980; // CHandle<CBaseModelEntity>
                constexpr std::ptrdiff_t m_usable = 0x984; // bool
                constexpr std::ptrdiff_t m_szDisplayText = 0x988; // CUtlSymbolLarge
            }
            // Parent: CPhysConstraint
            // Field count: 6
            namespace CPhysLength {
                constexpr std::ptrdiff_t m_offset = 0x560; // Vector[2]
                constexpr std::ptrdiff_t m_vecAttach = 0x578; // Vector
                constexpr std::ptrdiff_t m_addLength = 0x584; // float32
                constexpr std::ptrdiff_t m_minLength = 0x588; // float32
                constexpr std::ptrdiff_t m_totalLength = 0x58C; // float32
                constexpr std::ptrdiff_t m_bEnableCollision = 0x590; // bool
            }
            // Parent: CCitadel_Ability_PrimaryWeapon
            // Field count: 0
            namespace CCitadel_Ability_PrimaryWeapon_Cadence {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_AirLift_Grab {
            }
            // Parent: CCitadelModifier
            // Field count: 9
            namespace CCitadel_Modifier_ChronoSwap_BubbleMove {
                constexpr std::ptrdiff_t m_bOtherIsInFrontAtStart = 0xC0; // bool
                constexpr std::ptrdiff_t m_vOtherToDest = 0xC4; // Vector
                constexpr std::ptrdiff_t m_vStart = 0xD0; // Vector
                constexpr std::ptrdiff_t m_vDest = 0xDC; // Vector
                constexpr std::ptrdiff_t m_hOther = 0xE8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vLastSafePos = 0xEC; // Vector
                constexpr std::ptrdiff_t m_nNumTicks = 0xF8; // int32
                constexpr std::ptrdiff_t m_nTicksLeft = 0xFC; // int32
                constexpr std::ptrdiff_t m_nBeamIndex = 0x100; // ParticleIndex_t
            }
            // Parent: CCitadel_Modifier_Base_Buildup
            // Field count: 0
            namespace CCitadel_Modifier_Silence_Buildup {
            }
            // Parent: CBaseEntity
            // Field count: 48
            namespace CLogicNPCCounter {
                constexpr std::ptrdiff_t m_OnMinCountAll = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMaxCountAll = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFactorAll = 0x538; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnMinPlayerDistAll = 0x560; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnMinCount_1 = 0x588; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMaxCount_1 = 0x5B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFactor_1 = 0x5D8; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnMinPlayerDist_1 = 0x600; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnMinCount_2 = 0x628; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMaxCount_2 = 0x650; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFactor_2 = 0x678; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnMinPlayerDist_2 = 0x6A0; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnMinCount_3 = 0x6C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnMaxCount_3 = 0x6F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFactor_3 = 0x718; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnMinPlayerDist_3 = 0x740; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_hSource = 0x768; // CEntityHandle
                constexpr std::ptrdiff_t m_iszSourceEntityName = 0x770; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flDistanceMax = 0x778; // float32
                constexpr std::ptrdiff_t m_bDisabled = 0x77C; // bool
                constexpr std::ptrdiff_t m_nMinCountAll = 0x780; // int32
                constexpr std::ptrdiff_t m_nMaxCountAll = 0x784; // int32
                constexpr std::ptrdiff_t m_nMinFactorAll = 0x788; // int32
                constexpr std::ptrdiff_t m_nMaxFactorAll = 0x78C; // int32
                constexpr std::ptrdiff_t m_iszNPCClassname_1 = 0x798; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nNPCState_1 = 0x7A0; // int32
                constexpr std::ptrdiff_t m_bInvertState_1 = 0x7A4; // bool
                constexpr std::ptrdiff_t m_nMinCount_1 = 0x7A8; // int32
                constexpr std::ptrdiff_t m_nMaxCount_1 = 0x7AC; // int32
                constexpr std::ptrdiff_t m_nMinFactor_1 = 0x7B0; // int32
                constexpr std::ptrdiff_t m_nMaxFactor_1 = 0x7B4; // int32
                constexpr std::ptrdiff_t m_flDefaultDist_1 = 0x7BC; // float32
                constexpr std::ptrdiff_t m_iszNPCClassname_2 = 0x7C0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nNPCState_2 = 0x7C8; // int32
                constexpr std::ptrdiff_t m_bInvertState_2 = 0x7CC; // bool
                constexpr std::ptrdiff_t m_nMinCount_2 = 0x7D0; // int32
                constexpr std::ptrdiff_t m_nMaxCount_2 = 0x7D4; // int32
                constexpr std::ptrdiff_t m_nMinFactor_2 = 0x7D8; // int32
                constexpr std::ptrdiff_t m_nMaxFactor_2 = 0x7DC; // int32
                constexpr std::ptrdiff_t m_flDefaultDist_2 = 0x7E4; // float32
                constexpr std::ptrdiff_t m_iszNPCClassname_3 = 0x7E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nNPCState_3 = 0x7F0; // int32
                constexpr std::ptrdiff_t m_bInvertState_3 = 0x7F4; // bool
                constexpr std::ptrdiff_t m_nMinCount_3 = 0x7F8; // int32
                constexpr std::ptrdiff_t m_nMaxCount_3 = 0x7FC; // int32
                constexpr std::ptrdiff_t m_nMinFactor_3 = 0x800; // int32
                constexpr std::ptrdiff_t m_nMaxFactor_3 = 0x804; // int32
                constexpr std::ptrdiff_t m_flDefaultDist_3 = 0x80C; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            // MPropertySuppressBaseClassField
            namespace CCitadel_Modifier_Mirage_SandPhantom_Proc_VData {
                constexpr std::ptrdiff_t m_bRollOnceForAllBulletsInAShot = 0x608; // bool
                constexpr std::ptrdiff_t m_flMaxBulletsToProcInShot = 0x60C; // float32
                constexpr std::ptrdiff_t m_bCanProcMultipleTimesFromSameShot = 0x610; // bool
                constexpr std::ptrdiff_t m_bRequiresTargetFilter = 0x611; // bool
                constexpr std::ptrdiff_t m_ProcReadyModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PassiveVictimModifier = 0x628; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ProcReadyParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TracerAdditionParticle = 0x718; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x7F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_OnBulletRolledProcSound = 0x8D8; // CSoundEventName
                constexpr std::ptrdiff_t m_ProcSound = 0x8E8; // CSoundEventName
                constexpr std::ptrdiff_t m_ExplodeSound = 0x8F8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ViscousBall {
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_PassiveBeefyVData {
                constexpr std::ptrdiff_t m_HealParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_IntensifyingClip {
                constexpr std::ptrdiff_t m_LastThinkTime = 0x130; // GameTime_t
                constexpr std::ptrdiff_t m_flSpinUpTime = 0x134; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_Ricochet_Proc {
            }
            // Parent: CNPC_HeroCloneTrooper
            // Field count: 0
            namespace CNPC_HeroDecoy {
            }
            // Parent: CBaseAnimGraph
            // Field count: 4
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            namespace CPropAnimatingBreakable {
                constexpr std::ptrdiff_t m_stages = 0xA48; // CBreakableStageHelper
                constexpr std::ptrdiff_t m_OnTakeDamage = 0xA60; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFinalBreak = 0xA88; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnStageAdvanced = 0xAB0; // CEntityIOOutput
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_ShakedownPulse {
                constexpr std::ptrdiff_t m_flSharedDamage = 0xC0; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityStickyBombVData {
                constexpr std::ptrdiff_t m_BombAttachedModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_KillCheckModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CastBombParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flAllyTargetRangeMult = 0x1660; // float32
            }
            // Parent: CTriggerHurt
            // Field count: 0
            namespace CCitadelTriggerHurt {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Spin {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierQuarantineVData {
                constexpr std::ptrdiff_t m_BubbleParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BubbleExplodeParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SilenceModifier = 0x7C8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Neutral_Debuff_Pushback {
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_Item_Intensifying_Clip {
                constexpr std::ptrdiff_t m_flSpinUpTime = 0xB58; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_BreakablePropFireRatePickup {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelViscousBallVData {
                constexpr std::ptrdiff_t m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_flPhysicsRadius = 0x108; // float32
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_HeadshotBooster_VData {
                constexpr std::ptrdiff_t m_HeadShotVictimSound = 0x15A8; // CSoundEventName
                constexpr std::ptrdiff_t m_HeadShotConfirmationSound = 0x15B8; // CSoundEventName
            }
            // Parent: CLogicalEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_fadeColor (Color)
            namespace CEnvFade {
                constexpr std::ptrdiff_t m_fadeColor = 0x4E8; // Color
                constexpr std::ptrdiff_t m_Duration = 0x4EC; // float32
                constexpr std::ptrdiff_t m_HoldDuration = 0x4F0; // float32
                constexpr std::ptrdiff_t m_OnBeginFade = 0x4F8; // CEntityIOOutput
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ThrowSand {
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityBouncePadVData {
                constexpr std::ptrdiff_t m_BounceModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AllyBounceModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SpeedOnLandModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_NoBounceModifier = 0x1590; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_RocketBarrageVolley {
                constexpr std::ptrdiff_t m_flFiringInterval = 0xC0; // float32
                constexpr std::ptrdiff_t m_flCastTime = 0xC4; // GameTime_t
                constexpr std::ptrdiff_t m_flNextRocketTime = 0xC8; // GameTime_t
                constexpr std::ptrdiff_t m_nGrenadesLeft = 0xCC; // int32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_bUsingThisMelee (bool)
            // NetworkVarNames: m_bUsingMeleeTagActive (bool)
            // NetworkVarNames: m_bHitWithThisAttack (bool)
            // NetworkVarNames: m_flLastActivateTime (GameTime_t)
            // NetworkVarNames: m_flNextAttackAllowedTime (GameTime_t)
            // NetworkVarNames: m_flAttackTriggeredTime (GameTime_t)
            namespace CCitadel_Ability_Melee_Base {
                constexpr std::ptrdiff_t m_nHitNumber = 0xB00; // int32
                constexpr std::ptrdiff_t m_bUsingThisMelee = 0xB04; // bool
                constexpr std::ptrdiff_t m_bUsingMeleeTagActive = 0xB05; // bool
                constexpr std::ptrdiff_t m_bHitWithThisAttack = 0xB06; // bool
                constexpr std::ptrdiff_t m_flLastActivateTime = 0xB08; // GameTime_t
                constexpr std::ptrdiff_t m_flNextAttackAllowedTime = 0xB0C; // GameTime_t
                constexpr std::ptrdiff_t m_flAttackTriggeredTime = 0xB10; // GameTime_t
            }
            // Parent: CCitadel_Modifier_ChainLightningEffect
            // Field count: 0
            namespace CCitadel_Modifier_PowerSurge_ChainLightning {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_FullSpectrumDamage {
            }
            // Parent: CAI_Component
            // Field count: 18
            namespace CAI_Senses {
                constexpr std::ptrdiff_t m_flLookDist = 0x40; // float32
                constexpr std::ptrdiff_t m_flLookDistIdle = 0x44; // float32
                constexpr std::ptrdiff_t m_flLastLookDist = 0x48; // float32
                constexpr std::ptrdiff_t m_TimeLastLook = 0x4C; // GameTime_t
                constexpr std::ptrdiff_t m_iAudibleList = 0x50; // int32
                constexpr std::ptrdiff_t m_SeenHighPriority = 0x58; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_SeenNPCs = 0x70; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_SeenMisc = 0x88; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_GatheredEntities = 0xA0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_GatheredProxyEntities = 0xB8; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_SeenArrays = 0xD0; // CUtlVector<CHandle<CBaseEntity>>*[3]
                constexpr std::ptrdiff_t m_TimeLastLookHighPriority = 0xE8; // GameTime_t
                constexpr std::ptrdiff_t m_TimeLastLookNPCs = 0xEC; // GameTime_t
                constexpr std::ptrdiff_t m_TimeLastLookMisc = 0xF0; // GameTime_t
                constexpr std::ptrdiff_t m_iSensingFlags = 0xF4; // int32
                constexpr std::ptrdiff_t m_CachedTaskSound = 0xF8; // CSound
                constexpr std::ptrdiff_t m_flHearingSensitivity = 0x12C; // float32
                constexpr std::ptrdiff_t m_nSoundInterests = 0x130; // int32
            }
            // Parent: CBaseCombatCharacter
            // Field count: 0
            namespace CCitadel_Announcer_Base {
            }
            // Parent: CBaseAnimGraph
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flTurnSolidTime (GameTime_t)
            namespace CCitadel_Ice_Dome_Blocker {
                constexpr std::ptrdiff_t m_flTurnSolidTime = 0xA48; // GameTime_t
            }
            // Parent: CBaseProp
            // Field count: 33
            //
            // Metadata:
            // NetworkVarNames: m_CPropDataComponent (CPropDataComponent::Storage_t)
            // NetworkVarNames: m_noGhostCollision (bool)
            namespace CBreakableProp {
                constexpr std::ptrdiff_t m_CPropDataComponent = 0xA90; // CPropDataComponent
                constexpr std::ptrdiff_t m_OnBreak = 0xAD0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnHealthChanged = 0xAF8; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnTakeDamage = 0xB20; // CEntityIOOutput
                constexpr std::ptrdiff_t m_impactEnergyScale = 0xB48; // float32
                constexpr std::ptrdiff_t m_iMinHealthDmg = 0xB4C; // int32
                constexpr std::ptrdiff_t m_preferredCarryAngles = 0xB50; // QAngle
                constexpr std::ptrdiff_t m_flPressureDelay = 0xB5C; // float32
                constexpr std::ptrdiff_t m_flDefBurstScale = 0xB60; // float32
                constexpr std::ptrdiff_t m_vDefBurstOffset = 0xB64; // Vector
                constexpr std::ptrdiff_t m_hBreaker = 0xB70; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_PerformanceMode = 0xB74; // PerformanceMode_t
                constexpr std::ptrdiff_t m_flPreventDamageBeforeTime = 0xB78; // GameTime_t
                constexpr std::ptrdiff_t m_BreakableContentsType = 0xB7C; // BreakableContentsType_t
                constexpr std::ptrdiff_t m_strBreakableContentsPropGroupOverride = 0xB80; // CUtlString
                constexpr std::ptrdiff_t m_strBreakableContentsParticleOverride = 0xB88; // CUtlString
                constexpr std::ptrdiff_t m_bHasBreakPiecesOrCommands = 0xB90; // bool
                constexpr std::ptrdiff_t m_explodeDamage = 0xB94; // float32
                constexpr std::ptrdiff_t m_explodeRadius = 0xB98; // float32
                constexpr std::ptrdiff_t m_explosionDelay = 0xBA0; // float32
                constexpr std::ptrdiff_t m_explosionBuildupSound = 0xBA8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_explosionCustomEffect = 0xBB0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_explosionCustomSound = 0xBB8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_explosionModifier = 0xBC0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hPhysicsAttacker = 0xBC8; // CHandle<CBasePlayerPawn>
                constexpr std::ptrdiff_t m_flLastPhysicsInfluenceTime = 0xBCC; // GameTime_t
                constexpr std::ptrdiff_t m_bOriginalBlockLOS = 0xBD0; // bool
                constexpr std::ptrdiff_t m_flDefaultFadeScale = 0xBD4; // float32
                constexpr std::ptrdiff_t m_hLastAttacker = 0xBD8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hFlareEnt = 0xBDC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bUsePuntSound = 0xBE0; // bool
                constexpr std::ptrdiff_t m_iszPuntSound = 0xBE8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_noGhostCollision = 0xBF0; // bool
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_TrapperPoisonJar_Aura {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_TechDamagePulse {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Tier3BossInvuln {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PristineEmblem_VData {
                constexpr std::ptrdiff_t m_TracerParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ParticleModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CPathSimpleAPI {
            }
            // Parent: CBaseFlex
            // Field count: 10
            //
            // Metadata:
            // MNetworkExcludeByUserGroup
            // NetworkVarNames: m_hMyWearables (CHandle<CEconWearable>)
            namespace CBaseCombatCharacter {
                constexpr std::ptrdiff_t m_bForceServerRagdoll = 0xAD8; // bool
                constexpr std::ptrdiff_t m_hMyWearables = 0xAE0; // CNetworkUtlVectorBase<CHandle<CEconWearable>>
                constexpr std::ptrdiff_t m_impactEnergyScale = 0xAF8; // float32
                constexpr std::ptrdiff_t m_bApplyStressDamage = 0xAFC; // bool
                constexpr std::ptrdiff_t m_bDeathEventsDispatched = 0xAFD; // bool
                constexpr std::ptrdiff_t m_iDamageCount = 0xB40; // int32
                constexpr std::ptrdiff_t m_pVecRelationships = 0xB48; // CUtlVector<RelationshipOverride_t>*
                constexpr std::ptrdiff_t m_strRelationships = 0xB50; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_eHull = 0xB58; // Hull_t
                constexpr std::ptrdiff_t m_nNavHullIdx = 0xB5C; // uint32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_ModDisruptor {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_FrenzyAura {
            }
            // Parent: CLogicalEntity
            // Field count: 5
            namespace CEnvGlobal {
                constexpr std::ptrdiff_t m_outCounter = 0x4E8; // CEntityOutputTemplate<int32>
                constexpr std::ptrdiff_t m_globalstate = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_triggermode = 0x518; // int32
                constexpr std::ptrdiff_t m_initialstate = 0x51C; // int32
                constexpr std::ptrdiff_t m_counter = 0x520; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 15
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Nano_Pounce_VData {
                constexpr std::ptrdiff_t m_LeapModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ActiveBuff = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DoublePounceModifier = 0x1590; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AttackParticle = 0x15A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlashParticle = 0x1680; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1760; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSlowParticle = 0x1840; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PrimaryHitParticle = 0x1920; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AttackSound = 0x1A00; // CSoundEventName
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1A10; // CSoundEventName
                constexpr std::ptrdiff_t m_flAttackTimePhase01 = 0x1A20; // float32
                constexpr std::ptrdiff_t m_flAttackTimePhase02 = 0x1A24; // float32
                constexpr std::ptrdiff_t m_flAllyMinTargetRange = 0x1A28; // float32
                constexpr std::ptrdiff_t m_flTargetVerticalOffset = 0x1A2C; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHornetChainVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_ChainModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DisarmModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 12
            //
            // Metadata:
            // NetworkVarNames: m_hProjectile (EHANDLE)
            // NetworkVarNames: m_flArrowSpeed (float)
            // NetworkVarNames: m_flSnapAnglesBackTime (GameTime_t)
            // NetworkVarNames: m_nBonusTechPower (int)
            namespace CCitadel_Ability_GuidedArrow {
                constexpr std::ptrdiff_t m_hProjectile = 0xB08; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flArrowSpeed = 0xB0C; // float32
                constexpr std::ptrdiff_t m_flSnapAnglesBackTime = 0xB10; // GameTime_t
                constexpr std::ptrdiff_t m_nBonusTechPower = 0xB14; // int32
                constexpr std::ptrdiff_t m_hOwl = 0xB18; // CHandle<CCitadelAnimatingModelEntity>
                constexpr std::ptrdiff_t m_flCastTime = 0xB28; // GameTime_t
                constexpr std::ptrdiff_t m_bNeedsExplosion = 0xB2C; // bool
                constexpr std::ptrdiff_t m_vProjectileRemovedOrigin = 0xB30; // Vector
                constexpr std::ptrdiff_t m_angCasterAnglesAtCastTime = 0xB3C; // QAngle
                constexpr std::ptrdiff_t m_flTravelDistance = 0xB48; // float32
                constexpr std::ptrdiff_t m_bInKillFlow = 0xB4C; // bool
                constexpr std::ptrdiff_t m_flProjectileTurnVel = 0xB50; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_FireBombVData {
                constexpr std::ptrdiff_t m_ChargeParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_GroundParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Ability_Melee_Base
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_flParryWindowEndTime (GameTime_t)
            // NetworkVarNames: m_flNextParryTime (GameTime_t)
            // NetworkVarNames: m_flStateStartTime (GameTime_t)
            // NetworkVarNames: m_flDashStartTime (GameTime_t)
            // NetworkVarNames: m_eCurrentAttackState (EMeleeHold_AttackState)
            // NetworkVarNames: m_eCurrentAttackType (EMeleeHold_AttackType)
            // NetworkVarNames: m_vAirDashDir (Vector)
            // NetworkVarNames: m_bAttackStartedWhileSliding (bool)
            namespace CCitadel_Ability_HoldMelee {
                constexpr std::ptrdiff_t m_flParryWindowEndTime = 0xB88; // GameTime_t
                constexpr std::ptrdiff_t m_flNextParryTime = 0xB8C; // GameTime_t
                constexpr std::ptrdiff_t m_flStateStartTime = 0xB90; // GameTime_t
                constexpr std::ptrdiff_t m_flDashStartTime = 0xB94; // GameTime_t
                constexpr std::ptrdiff_t m_eCurrentAttackState = 0xB98; // EMeleeHold_AttackState
                constexpr std::ptrdiff_t m_eCurrentAttackType = 0xB9C; // EMeleeHold_AttackType
                constexpr std::ptrdiff_t m_vAirDashDir = 0xBA0; // Vector
                constexpr std::ptrdiff_t m_bAttackStartedWhileSliding = 0xBAC; // bool
                constexpr std::ptrdiff_t m_bCreatedChargeEffects = 0xBAD; // bool
                constexpr std::ptrdiff_t m_angForced = 0xBB0; // QAngle
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierApexWatcherVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 22
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityJumpVData {
                constexpr std::ptrdiff_t m_flShootingLockoutAfterJump = 0x1560; // float32
                constexpr std::ptrdiff_t m_DashJumpParticle = 0x1568; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AirJumpParticle = 0x1648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WallJumpParticle = 0x1728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AirJumpExecutedSound = 0x1808; // CSoundEventName
                constexpr std::ptrdiff_t m_flMantleRefundWindow = 0x1818; // float32
                constexpr std::ptrdiff_t m_flZiplineRefundWindow = 0x181C; // float32
                constexpr std::ptrdiff_t m_flLateJumpGraceWindow = 0x1820; // float32
                constexpr std::ptrdiff_t m_flMaxSpeedDelta = 0x1824; // float32
                constexpr std::ptrdiff_t m_strDashJumpActivate = 0x1828; // CSoundEventName
                constexpr std::ptrdiff_t m_flDashJumpStartTime = 0x1838; // float32
                constexpr std::ptrdiff_t m_flDashJumpEndTime = 0x183C; // float32
                constexpr std::ptrdiff_t m_flDashJumpDistanceInMeters = 0x1840; // float32
                constexpr std::ptrdiff_t m_flDashJumpVerticalSpeed = 0x1848; // float32
                constexpr std::ptrdiff_t m_flDashJumpMissMaxSpeed = 0x184C; // float32
                constexpr std::ptrdiff_t m_flDashJumpMantleDisableTime = 0x1850; // float32
                constexpr std::ptrdiff_t m_WallJumpExecutedSound = 0x1858; // CSoundEventName
                constexpr std::ptrdiff_t m_flCollidedWallMaxDist = 0x1868; // float32
                constexpr std::ptrdiff_t m_flRemapSpeedToWallJumpVelocityDist = 0x186C; // CRemapFloat
                constexpr std::ptrdiff_t m_flWallJumpNormalSpeed = 0x187C; // float32
                constexpr std::ptrdiff_t m_WallJumpAirDragCurve = 0x1880; // CPiecewiseCurve
                constexpr std::ptrdiff_t m_flMaxWallYawOffset = 0x18C0; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Objective_BulletReistVData {
                constexpr std::ptrdiff_t m_BulletResist = 0x608; // float32
                constexpr std::ptrdiff_t m_BulletResistReductionPerHero = 0x60C; // float32
            }
            // Parent: None
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_hOuter (EHANDLE)
            // NetworkVarNames: m_nCritHitGroup (HitGroup_t)
            // NetworkVarNames: m_nBodyGroup (int)
            // NetworkVarNames: m_bPermanentlyBroken (bool)
            // NetworkVarNames: m_nBrokenBodygroupIndex (int)
            namespace WeakPoint_t {
                constexpr std::ptrdiff_t m_bRegistered = 0x7C; // bool
                constexpr std::ptrdiff_t m_hOuter = 0x80; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nCritHitGroup = 0x84; // HitGroup_t
                constexpr std::ptrdiff_t m_nBodyGroup = 0x88; // int32
                constexpr std::ptrdiff_t m_bPermanentlyBroken = 0x8C; // bool
                constexpr std::ptrdiff_t m_nBrokenBodygroupIndex = 0x90; // int32
            }
            // Parent: CLogicalEntity
            // Field count: 3
            namespace CBaseFilter {
                constexpr std::ptrdiff_t m_bNegated = 0x4E8; // bool
                constexpr std::ptrdiff_t m_OnPass = 0x4F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFail = 0x518; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CTriggerPingLocation {
                constexpr std::ptrdiff_t m_ePingLocation = 0x990; // ECitadelPingLocation_t
            }
            // Parent: CBaseEntity
            // Field count: 4
            //
            // Metadata:
            // MNetworkIncludeByName
            // NetworkVarNames: m_aPlayerControllers (CHandle<CBasePlayerController>)
            // NetworkVarNames: m_aPlayers (CHandle<CBasePlayerPawn>)
            // NetworkVarNames: m_iScore (int32)
            // NetworkVarNames: m_szTeamname (char)
            namespace CTeam {
                constexpr std::ptrdiff_t m_aPlayerControllers = 0x4E8; // CNetworkUtlVectorBase<CHandle<CBasePlayerController>>
                constexpr std::ptrdiff_t m_aPlayers = 0x500; // CNetworkUtlVectorBase<CHandle<CBasePlayerPawn>>
                constexpr std::ptrdiff_t m_iScore = 0x518; // int32
                constexpr std::ptrdiff_t m_szTeamname = 0x51C; // char[129]
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_Empty {
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_IcePathVData {
                constexpr std::ptrdiff_t m_IcePathModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flMomentumDecayRate = 0x1570; // float32
                constexpr std::ptrdiff_t m_flMomentumWeight = 0x1574; // float32
                constexpr std::ptrdiff_t m_flMaxPitchChange = 0x1578; // float32
                constexpr std::ptrdiff_t m_flMaxPitchUp = 0x157C; // float32
                constexpr std::ptrdiff_t m_flMaxPitchDown = 0x1580; // float32
                constexpr std::ptrdiff_t m_flMaxHeight = 0x1584; // float32
                constexpr std::ptrdiff_t m_flForwardAngleBias = 0x1588; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_HealthSwapVData {
                constexpr std::ptrdiff_t m_SwapParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SwapModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PreCastModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_SiphonBullets_RestoreHealth {
                constexpr std::ptrdiff_t m_flHealAmount = 0xC0; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_EscalatingExposureProcWatcher {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_CanDamageMidBoss {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_SingleTargetStun {
            }
            // Parent: CTriggerMultiple
            // Field count: 17
            //
            // Metadata:
            // NetworkVarNames: m_flInitialRadius (float)
            // NetworkVarNames: m_flEndRadius (float)
            // NetworkVarNames: m_flProgress (float)
            // NetworkVarNames: m_flCaptureTime (float)
            // NetworkVarNames: m_hUnlockPrereq (EHANDLE)
            // NetworkVarNames: m_bAvailable (bool)
            // NetworkVarNames: m_bIsBeingCaptured (bool)
            // NetworkVarNames: m_bIsBeingBlocked (bool)
            namespace CCitadelControlPointTrigger {
                constexpr std::ptrdiff_t m_OnFullyCaptured = 0x9B8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnBecomeCapturable = 0x9E0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_flInitialRadius = 0xA08; // float32
                constexpr std::ptrdiff_t m_flEndRadius = 0xA0C; // float32
                constexpr std::ptrdiff_t m_flProgress = 0xA10; // float32
                constexpr std::ptrdiff_t m_flCaptureTime = 0xA14; // float32
                constexpr std::ptrdiff_t m_hUnlockPrereq = 0xA18; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bAvailable = 0xA1C; // bool
                constexpr std::ptrdiff_t m_bIsBeingCaptured = 0xA1D; // bool
                constexpr std::ptrdiff_t m_bIsBeingBlocked = 0xA1E; // bool
                constexpr std::ptrdiff_t m_flLastTouchedTime = 0xA28; // GameTime_t
                constexpr std::ptrdiff_t m_vecBeamTarget = 0xA2C; // Vector
                constexpr std::ptrdiff_t m_vecBeamStart = 0xA38; // Vector
                constexpr std::ptrdiff_t m_nFXProgressBeam = 0xA44; // ParticleIndex_t
                constexpr std::ptrdiff_t m_strUnlockPrereq = 0xA48; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strBeamStart = 0xA50; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strBeamTarget = 0xA58; // CUtlSymbolLarge
            }
            // Parent: CCitadelTrackedProjectile
            // Field count: 1
            namespace CCitadelPositionHomingProjectile {
                constexpr std::ptrdiff_t m_vecHomingPosition = 0x8A0; // Vector
            }
            // Parent: CBaseModelEntity
            // Field count: 23
            //
            // Metadata:
            // NetworkVarNames: m_hSpriteMaterial (HMaterialStrong)
            // NetworkVarNames: m_hAttachedToEntity (CHandle<CBaseEntity>)
            // NetworkVarNames: m_nAttachment (AttachmentHandle_t)
            // NetworkVarNames: m_flSpriteFramerate (float32)
            // NetworkVarNames: m_flFrame (float32)
            // NetworkVarNames: m_nBrightness (uint32)
            // NetworkVarNames: m_flBrightnessDuration (float32)
            // NetworkVarNames: m_flSpriteScale (float32)
            // NetworkVarNames: m_flScaleDuration (float32)
            // NetworkVarNames: m_bWorldSpaceScale (bool)
            // NetworkVarNames: m_flGlowProxySize (float32)
            // NetworkVarNames: m_flHDRColorScale (float32)
            namespace CSprite {
                constexpr std::ptrdiff_t m_hSpriteMaterial = 0x7C0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                constexpr std::ptrdiff_t m_hAttachedToEntity = 0x7C8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nAttachment = 0x7CC; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_flSpriteFramerate = 0x7D0; // float32
                constexpr std::ptrdiff_t m_flFrame = 0x7D4; // float32
                constexpr std::ptrdiff_t m_flDieTime = 0x7D8; // GameTime_t
                constexpr std::ptrdiff_t m_nBrightness = 0x7E8; // uint32
                constexpr std::ptrdiff_t m_flBrightnessDuration = 0x7EC; // float32
                constexpr std::ptrdiff_t m_flSpriteScale = 0x7F0; // float32
                constexpr std::ptrdiff_t m_flScaleDuration = 0x7F4; // float32
                constexpr std::ptrdiff_t m_bWorldSpaceScale = 0x7F8; // bool
                constexpr std::ptrdiff_t m_flGlowProxySize = 0x7FC; // float32
                constexpr std::ptrdiff_t m_flHDRColorScale = 0x800; // float32
                constexpr std::ptrdiff_t m_flLastTime = 0x804; // GameTime_t
                constexpr std::ptrdiff_t m_flMaxFrame = 0x808; // float32
                constexpr std::ptrdiff_t m_flStartScale = 0x80C; // float32
                constexpr std::ptrdiff_t m_flDestScale = 0x810; // float32
                constexpr std::ptrdiff_t m_flScaleTimeStart = 0x814; // GameTime_t
                constexpr std::ptrdiff_t m_nStartBrightness = 0x818; // int32
                constexpr std::ptrdiff_t m_nDestBrightness = 0x81C; // int32
                constexpr std::ptrdiff_t m_flBrightnessTimeStart = 0x820; // GameTime_t
                constexpr std::ptrdiff_t m_nSpriteWidth = 0x824; // int32
                constexpr std::ptrdiff_t m_nSpriteHeight = 0x828; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Nano_PredatoryStatueTargetVData {
                constexpr std::ptrdiff_t m_strLaserHitSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserStartSound = 0x618; // CSoundEventName
                constexpr std::ptrdiff_t m_strLaserLoopSound = 0x628; // CSoundEventName
                constexpr std::ptrdiff_t m_DebuffModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 7
            namespace CCitadel_Modifier_PsychicDagger_MakeDaggers {
                constexpr std::ptrdiff_t m_iCurrentProjectile = 0xC0; // int32
                constexpr std::ptrdiff_t m_nDaggerCount = 0xC4; // int32
                constexpr std::ptrdiff_t m_flLastDaggerSpawn = 0x2F8; // GameTime_t
                constexpr std::ptrdiff_t m_flLastDaggerShoot = 0x2FC; // GameTime_t
                constexpr std::ptrdiff_t m_bIsSpawning = 0x300; // bool
                constexpr std::ptrdiff_t m_bInterrupted = 0x301; // bool
                constexpr std::ptrdiff_t m_vecDaggers = 0x308; // CUtlVector<CCitadel_Modifier_PsychicDagger_MakeDaggers::Dagger_t>
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Bull_Leap_Boosting_CrashVData {
                constexpr std::ptrdiff_t m_DragModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CrashTrailParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flCollideRadius = 0x6F8; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 40
            //
            // Metadata:
            // NetworkVarNames: m_flNextPrimaryAttack (GameTime_t)
            // NetworkVarNames: m_iClip (int32)
            // NetworkVarNames: m_iBonusClip (int32)
            // NetworkVarNames: m_flSpreadPenalty (float)
            // NetworkVarNames: m_flZoomTime (GameTime_t)
            // NetworkVarNames: m_flZoomOutTime (GameTime_t)
            // NetworkVarNames: m_iSpreadIndex (int8)
            // NetworkVarNames: m_nShotRecoilIndex (int16)
            // NetworkVarNames: m_flNextShotRecoilRecoveryTime (GameTime_t)
            // NetworkVarNames: m_bIsZoomed (bool)
            // NetworkVarNames: m_nBurstShotsRemaining (uint8)
            // NetworkVarNames: m_nShotNumber (uint32)
            // NetworkVarNames: m_bInReload (bool)
            // NetworkVarNames: m_bSingleShotReloadFirstBullet (bool)
            // NetworkVarNames: m_reloadQueuedStartTime (GameTime_t)
            // NetworkVarNames: m_flReloadAvailableTime (GameTime_t)
            // NetworkVarNames: m_bCanActiveReload (bool)
            // NetworkVarNames: m_flLastAttackTime (GameTime_t)
            // NetworkVarNames: m_flNextAttackDelayStartTime (GameTime_t)
            // NetworkVarNames: m_flNextAttackDelayEndTime (GameTime_t)
            // NetworkVarNames: m_flAttackDelayPauseTotalTime (float)
            // NetworkVarNames: m_flAttackDelayPauseEndTime (GameTime_t)
            // NetworkVarNames: m_eNextAttackDelayReason (ENextAttackDelayReason_t)
            // NetworkVarNames: m_bInputPressedWhileSelected (bool)
            // NetworkVarNames: m_eActiveFireMode (EFireMode_t)
            namespace CCitadel_Ability_PrimaryWeapon {
                constexpr std::ptrdiff_t m_flNextPrimaryAttack = 0xB00; // GameTime_t
                constexpr std::ptrdiff_t m_iClip = 0xB04; // int32
                constexpr std::ptrdiff_t m_iBonusClip = 0xB08; // int32
                constexpr std::ptrdiff_t m_flSpreadPenalty = 0xB0C; // float32
                constexpr std::ptrdiff_t m_flZoomTime = 0xB10; // GameTime_t
                constexpr std::ptrdiff_t m_flZoomOutTime = 0xB14; // GameTime_t
                constexpr std::ptrdiff_t m_iSpreadIndex = 0xB18; // int8
                constexpr std::ptrdiff_t m_nShotRecoilIndex = 0xB1A; // int16
                constexpr std::ptrdiff_t m_flNextShotRecoilRecoveryTime = 0xB1C; // GameTime_t
                constexpr std::ptrdiff_t m_bIsZoomed = 0xB20; // bool
                constexpr std::ptrdiff_t m_nBurstShotsRemaining = 0xB21; // uint8
                constexpr std::ptrdiff_t m_nShotNumber = 0xB24; // uint32
                constexpr std::ptrdiff_t m_bInReload = 0xB28; // bool
                constexpr std::ptrdiff_t m_bSingleShotReloadFirstBullet = 0xB29; // bool
                constexpr std::ptrdiff_t m_reloadQueuedStartTime = 0xB2C; // GameTime_t
                constexpr std::ptrdiff_t m_flReloadAvailableTime = 0xB30; // GameTime_t
                constexpr std::ptrdiff_t m_bCanActiveReload = 0xB34; // bool
                constexpr std::ptrdiff_t m_flLastAttackTime = 0xB38; // GameTime_t
                constexpr std::ptrdiff_t m_flNextAttackDelayStartTime = 0xB3C; // GameTime_t
                constexpr std::ptrdiff_t m_flNextAttackDelayEndTime = 0xB40; // GameTime_t
                constexpr std::ptrdiff_t m_flAttackDelayPauseTotalTime = 0xB44; // float32
                constexpr std::ptrdiff_t m_flAttackDelayPauseEndTime = 0xB48; // GameTime_t
                constexpr std::ptrdiff_t m_eNextAttackDelayReason = 0xB4C; // ENextAttackDelayReason_t
                constexpr std::ptrdiff_t m_bInputPressedWhileSelected = 0xB50; // bool
                constexpr std::ptrdiff_t m_eActiveFireMode = 0xB54; // EFireMode_t
                constexpr std::ptrdiff_t m_angRecoilAngles = 0xB58; // QAngle
                constexpr std::ptrdiff_t m_angRecoilToAdd = 0xB64; // QAngle
                constexpr std::ptrdiff_t m_angRecoilRecovery = 0xB70; // QAngle
                constexpr std::ptrdiff_t m_flRecoilStartTime = 0xB7C; // GameTime_t
                constexpr std::ptrdiff_t m_flRecoilRecoverySpeed = 0xB80; // float32
                constexpr std::ptrdiff_t m_flAddApproachSpeed = 0xB84; // float32
                constexpr std::ptrdiff_t m_bFireBackwards = 0xB88; // bool
                constexpr std::ptrdiff_t m_currentSpread = 0xB8C; // float32
                constexpr std::ptrdiff_t m_currentMaxSpread = 0xB90; // float32
                constexpr std::ptrdiff_t m_currentFireSpread = 0xB94; // float32
                constexpr std::ptrdiff_t m_flCurrentSpinRate = 0xB98; // float32
                constexpr std::ptrdiff_t m_fFireDuration = 0xBA0; // float32
                constexpr std::ptrdiff_t m_bFireOnEmpty = 0xBA5; // bool
                constexpr std::ptrdiff_t m_flNextDisarmSound = 0xBA8; // GameTime_t
                constexpr std::ptrdiff_t m_nClipSizeBeforeSwap = 0xBAC; // int32
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CTriggerGravity {
            }
            // Parent: CTriggerModifier
            // Field count: 2
            namespace CCitadelPushTrigger {
                constexpr std::ptrdiff_t m_vPush = 0x9A0; // Vector
                constexpr std::ptrdiff_t m_angPushEntitySpace = 0x9AC; // QAngle
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_NeutralCampVData {
                constexpr std::ptrdiff_t m_iInitialSpawnDelayInSeconds = 0x28; // int32
                constexpr std::ptrdiff_t m_iSpawnIntervalInSeconds = 0x2C; // int32
                constexpr std::ptrdiff_t m_iSpawnIntervalChange = 0x30; // int32
                constexpr std::ptrdiff_t m_iSpawnIntervalMin = 0x34; // int32
                constexpr std::ptrdiff_t m_eNeutralType = 0x38; // ENeutralTrooperType
                constexpr std::ptrdiff_t m_sIdleAmbient = 0x40; // CSoundEventName
                constexpr std::ptrdiff_t m_sAlertAmbient = 0x50; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SleepBombVData {
                constexpr std::ptrdiff_t m_BombParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeDamageFriendlyParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeDamageEnemyParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SleepModifier = 0x8A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x8B8; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_StompDebuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Surging_PowerVData {
                constexpr std::ptrdiff_t m_BerserkerSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_ModifierActiveDisplay = 0x618; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Neutral_Debuff_PushbackVData {
                constexpr std::ptrdiff_t m_flPushSpeed = 0x608; // float32
                constexpr std::ptrdiff_t m_flPushRange = 0x60C; // float32
            }
            // Parent: CCitadel_PointTalker
            // Field count: 0
            namespace CCitadel_PointTalker_Idol {
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CServerRagdollTrigger {
            }
            // Parent: CInfoDynamicShadowHint
            // Field count: 2
            namespace CInfoDynamicShadowHintBox {
                constexpr std::ptrdiff_t m_vBoxMins = 0x500; // Vector
                constexpr std::ptrdiff_t m_vBoxMaxs = 0x50C; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierAirLiftGrabVData {
                constexpr std::ptrdiff_t m_GrabEffect = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flLiftHorizontal = 0x6E8; // float32
                constexpr std::ptrdiff_t m_flLiftHeight = 0x6EC; // float32
                constexpr std::ptrdiff_t m_flFollowDampingFactor = 0x6F0; // float32
                constexpr std::ptrdiff_t m_flFollowDistance = 0x6F4; // float32
                constexpr std::ptrdiff_t m_flAllyGrabCancelTime = 0x6F8; // float32
                constexpr std::ptrdiff_t m_flAllyPossibleStuckDistance = 0x6FC; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_Wrecker_Ultimate_GrabEnemy {
                constexpr std::ptrdiff_t m_bAddedStasisParticle = 0xC0; // bool
                constexpr std::ptrdiff_t m_vHoldOffset = 0xC4; // Vector
                constexpr std::ptrdiff_t m_flLastTouchTime = 0xD0; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 7
            namespace CCitadel_Modifier_FissureWall {
                constexpr std::ptrdiff_t m_vecFissureWallEntities = 0x2F0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vecFisureEntitiesHit = 0x308; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nSegment = 0x320; // int32
                constexpr std::ptrdiff_t m_vPosition = 0x324; // Vector
                constexpr std::ptrdiff_t m_vDirection = 0x330; // Vector
                constexpr std::ptrdiff_t m_vLeft = 0x33C; // Vector
                constexpr std::ptrdiff_t m_Length = 0x348; // float32
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_InstantReloadVData {
                constexpr std::ptrdiff_t m_ReloadParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_TeleportToObjective {
                constexpr std::ptrdiff_t m_vDest = 0xC0; // Vector
                constexpr std::ptrdiff_t m_angDestAngles = 0xCC; // QAngle
                constexpr std::ptrdiff_t m_vDestVelocity = 0xD8; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_PlayerDisconnected {
                constexpr std::ptrdiff_t m_flTimePathUpdated = 0xC0; // GameTime_t
            }
            // Parent: CBaseEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_CPathQueryComponent (CPathQueryComponent::Storage_t)
            namespace CPathMover {
                constexpr std::ptrdiff_t m_CPathQueryComponent = 0x4F0; // CPathQueryComponent
                constexpr std::ptrdiff_t m_vecPathNodes = 0x550; // CUtlVector<CHandle<CMoverPathNode>>
                constexpr std::ptrdiff_t m_flPathLength = 0x568; // float32
                constexpr std::ptrdiff_t m_bClosedLoop = 0x56C; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_UtilityUpgrade_RocketBoots {
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityPerchedPredatorVData {
                constexpr std::ptrdiff_t m_ExplodeBaseParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeFriendlyParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeEnemyParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1800; // CSoundEventName
                constexpr std::ptrdiff_t m_ModifierDragEnemy = 0x1810; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flOnHitDetonateTimer = 0x1820; // float32
                constexpr std::ptrdiff_t m_flTraceTravelRadius = 0x1824; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_UppercutClipSize {
                constexpr std::ptrdiff_t m_nPreClipSize = 0xF8; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SpeedBoostVData {
                constexpr std::ptrdiff_t m_flMoveSpeedBoost = 0x608; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CBaseTriggerAbilityVData {
                constexpr std::ptrdiff_t m_AbilityToTrigger = 0x1560; // CSubclassName<4>
                constexpr std::ptrdiff_t m_flMinCancelTime = 0x1570; // float32
                constexpr std::ptrdiff_t m_eHintFeatureToMarkUsedOnTrigger = 0x1574; // ECitadelHintFeature
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGenericPerson2VData {
            }
            // Parent: CCitadel_Modifier_Sleep
            // Field count: 0
            namespace CCitadel_Modifier_PoisonBullet_Poisoned {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Afterburn_DOT_VData {
                constexpr std::ptrdiff_t m_sAfterburnParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Fervor_Bonuses {
                constexpr std::ptrdiff_t m_nBonusesParticle = 0xC0; // ParticleIndex_t
            }
            // Parent: CPointEntity
            // Field count: 1
            namespace CAITestPath {
                constexpr std::ptrdiff_t m_strNextPath = 0x4F0; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifierAura
            // Field count: 3
            namespace CCitadel_Modifier_Rutger_Pulse_Aura {
                constexpr std::ptrdiff_t m_flStartRadius = 0xE0; // float32
                constexpr std::ptrdiff_t m_flEndRadius = 0xE4; // float32
                constexpr std::ptrdiff_t m_flSpreadDuration = 0xE8; // float32
            }
            // Parent: CCitadelProjectile
            // Field count: 1
            namespace CProjectile_Perched_Predator {
                constexpr std::ptrdiff_t m_vecHitEntities = 0x870; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_ArmorUpgrade_DoubleJump {
                constexpr std::ptrdiff_t m_nTickJumped = 0xB20; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PayloadCarrier {
            }
            // Parent: CBaseModelEntity
            // Field count: 19
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkOverride
            // MNetworkOverride
            // NetworkVarNames: m_vInitialVelocity (Vector)
            // NetworkVarNames: m_vInitialPosition (Vector)
            // NetworkVarNames: m_abilityID (AbilityID_t)
            // NetworkVarNames: m_hThrower (EHANDLE)
            // NetworkVarNames: m_sParticleName (string_t)
            // NetworkVarNames: m_vecSpawnPosition (Vector)
            // NetworkVarNames: m_flProjectileSpeed (float)
            // NetworkVarNames: m_flMaxLifetime (float)
            // NetworkVarNames: m_flParticleRadius (float)
            namespace CCitadelProjectile {
                constexpr std::ptrdiff_t m_flMaxDistance = 0x7C0; // float32
                constexpr std::ptrdiff_t m_flArmingTime = 0x7C4; // float32
                constexpr std::ptrdiff_t m_flChargeAmount = 0x7C8; // float32
                constexpr std::ptrdiff_t m_bCollideWithThrower = 0x7CC; // bool
                constexpr std::ptrdiff_t m_bNewCollideWithThrower = 0x7CD; // bool
                constexpr std::ptrdiff_t m_flTickSoundInterval = 0x7D8; // float32
                constexpr std::ptrdiff_t m_vLastAbsOrigin = 0x7E0; // Vector
                constexpr std::ptrdiff_t m_vLastAbsVelocity = 0x7EC; // Vector
                constexpr std::ptrdiff_t m_vecTargetToIgnore = 0x810; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_bDetonateStarted = 0x828; // bool
                constexpr std::ptrdiff_t m_vInitialVelocity = 0x82C; // Vector
                constexpr std::ptrdiff_t m_vInitialPosition = 0x838; // Vector
                constexpr std::ptrdiff_t m_abilityID = 0x844; // CUtlStringToken
                constexpr std::ptrdiff_t m_hThrower = 0x848; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_sParticleName = 0x850; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vecSpawnPosition = 0x858; // Vector
                constexpr std::ptrdiff_t m_flProjectileSpeed = 0x864; // float32
                constexpr std::ptrdiff_t m_flMaxLifetime = 0x868; // float32
                constexpr std::ptrdiff_t m_flParticleRadius = 0x86C; // float32
            }
            // Parent: CBaseTrigger
            // Field count: 7
            namespace CChangeLevel {
                constexpr std::ptrdiff_t m_sMapName = 0x990; // CUtlString
                constexpr std::ptrdiff_t m_sLandmarkName = 0x998; // CUtlString
                constexpr std::ptrdiff_t m_OnChangeLevel = 0x9A0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bTouched = 0x9C8; // bool
                constexpr std::ptrdiff_t m_bNoTouch = 0x9C9; // bool
                constexpr std::ptrdiff_t m_bNewChapter = 0x9CA; // bool
                constexpr std::ptrdiff_t m_bOnChangeLevelFired = 0x9CB; // bool
            }
            // Parent: CBaseTrigger
            // Field count: 14
            namespace CTriggerLerpObject {
                constexpr std::ptrdiff_t m_iszLerpTarget = 0x990; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hLerpTarget = 0x998; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iszLerpTargetAttachment = 0x9A0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hLerpTargetAttachment = 0x9A8; // AttachmentHandle_t
                constexpr std::ptrdiff_t m_flLerpDuration = 0x9AC; // float32
                constexpr std::ptrdiff_t m_bLerpRestoreMoveType = 0x9B0; // bool
                constexpr std::ptrdiff_t m_bSingleLerpObject = 0x9B1; // bool
                constexpr std::ptrdiff_t m_vecLerpingObjects = 0x9B8; // CUtlVector<lerpdata_t>
                constexpr std::ptrdiff_t m_iszLerpEffect = 0x9D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszLerpSound = 0x9D8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bAttachTouchingObject = 0x9E0; // bool
                constexpr std::ptrdiff_t m_hEntityToWaitForDisconnect = 0x9E4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_OnLerpStarted = 0x9E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLerpFinished = 0xA10; // CEntityIOOutput
            }
            // Parent: CBaseToggle
            // Field count: 12
            //
            // Metadata:
            // MNetworkIncludeByName
            // NetworkVarNames: m_bDisabled (bool)
            // NetworkVarNames: m_bClientSidePredicted (bool)
            namespace CBaseTrigger {
                constexpr std::ptrdiff_t m_bDisabled = 0x840; // bool
                constexpr std::ptrdiff_t m_iFilterName = 0x848; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hFilter = 0x850; // CHandle<CBaseFilter>
                constexpr std::ptrdiff_t m_OnStartTouch = 0x858; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnStartTouchAll = 0x880; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEndTouch = 0x8A8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnEndTouchAll = 0x8D0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTouching = 0x8F8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTouchingEachEntity = 0x920; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnNotTouching = 0x948; // CEntityIOOutput
                constexpr std::ptrdiff_t m_hTouchingEntities = 0x970; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_bClientSidePredicted = 0x988; // bool
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CLogicScript {
            }
            // Parent: CCitadel_BreakablePropPickupVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_BreakablePropHealthPickupVData {
                constexpr std::ptrdiff_t m_flHealMaxHealthPercent = 0x330; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Dust_Storm_Aura_Apply {
                constexpr std::ptrdiff_t m_flDamagePerTick = 0xC0; // float32
                constexpr std::ptrdiff_t m_bFirstTick = 0xC4; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierChargedTacklePrepareVData {
                constexpr std::ptrdiff_t m_PrepareParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_flParryStartTime (GameTime_t)
            // NetworkVarNames: m_bAttackParried (bool)
            // NetworkVarNames: m_flParrySuccessTime (GameTime_t)
            namespace CCitadel_Ability_MeleeParry {
                constexpr std::ptrdiff_t m_flParryStartTime = 0xB00; // GameTime_t
                constexpr std::ptrdiff_t m_bAttackParried = 0xB04; // bool
                constexpr std::ptrdiff_t m_flParrySuccessTime = 0xB08; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_BerserkerDamageStack {
                constexpr std::ptrdiff_t m_nBuffParticle = 0xC0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nBuffParticleEnemy = 0xC4; // ParticleIndex_t
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProc
            // Field count: 1
            namespace CCitadel_Modifier_ExplosiveBullets {
                constexpr std::ptrdiff_t m_BuffedShotId = 0x1F8; // ShotID_t
            }
            // Parent: None
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_SourceAbilityID (AbilityID_t)
            // NetworkVarNames: m_TargetAbilityID (AbilityID_t)
            // NetworkVarNames: m_eValType (EModifierValue)
            // NetworkVarNames: m_flValue (float)
            namespace DynamicAbilityValues_t {
                constexpr std::ptrdiff_t m_SourceAbilityID = 0x30; // CUtlStringToken
                constexpr std::ptrdiff_t m_TargetAbilityID = 0x34; // CUtlStringToken
                constexpr std::ptrdiff_t m_eValType = 0x38; // EModifierValue
                constexpr std::ptrdiff_t m_flValue = 0x3C; // float32
            }
            // Parent: CBaseFlex
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_AttributeManager (CAttributeContainer)
            namespace CEconEntity {
                constexpr std::ptrdiff_t m_AttributeManager = 0xAE8; // CAttributeContainer
                constexpr std::ptrdiff_t m_hOldProvidee = 0xC40; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iOldOwnerClass = 0xC44; // int32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_MetalSkin {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Fathom_ScaldingSpray_WeaponDamage {
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Spinning_BladeVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CatchIndicator = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CatchParticle = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strThrowSound = 0x1730; // CSoundEventName
                constexpr std::ptrdiff_t m_strReturnSound = 0x1740; // CSoundEventName
                constexpr std::ptrdiff_t m_strCatchSound = 0x1750; // CSoundEventName
                constexpr std::ptrdiff_t m_strFailSound = 0x1760; // CSoundEventName
                constexpr std::ptrdiff_t m_strHitSound = 0x1770; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 34
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Tengu_AirLiftVData {
                constexpr std::ptrdiff_t m_FlyingModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_GrabModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HoldBombModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DroppedBuffModifier = 0x1590; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodingAllyModifier = 0x15A0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AoEModifier = 0x15B0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_InitialExplodeParticle = 0x15C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HoldBombEffect = 0x16A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1780; // CSoundEventName
                constexpr std::ptrdiff_t m_flAirDrag = 0x1790; // float32
                constexpr std::ptrdiff_t m_flMaxFallSpeed = 0x1794; // float32
                constexpr std::ptrdiff_t m_flTargetAirSpeedFast = 0x1798; // float32
                constexpr std::ptrdiff_t m_flTargetAirSpeedBase = 0x179C; // float32
                constexpr std::ptrdiff_t m_flAcceleration = 0x17A0; // float32
                constexpr std::ptrdiff_t m_flDecceleration = 0x17A4; // float32
                constexpr std::ptrdiff_t m_flAirSideSpeedPercent = 0x17A8; // float32
                constexpr std::ptrdiff_t m_flBoostTime = 0x17AC; // float32
                constexpr std::ptrdiff_t m_flBoostSpeedUp = 0x17B0; // float32
                constexpr std::ptrdiff_t m_flMinFlyHeight = 0x17B4; // float32
                constexpr std::ptrdiff_t m_flMaxFlyHeight = 0x17B8; // float32
                constexpr std::ptrdiff_t m_flMaxPitchUp = 0x17BC; // float32
                constexpr std::ptrdiff_t m_flMaxPitchDown = 0x17C0; // float32
                constexpr std::ptrdiff_t m_flAllyDelayedBoostTime = 0x17C4; // float32
                constexpr std::ptrdiff_t m_flChannelingAirDrag = 0x17C8; // float32
                constexpr std::ptrdiff_t m_flChannelingMaxFallSpeed = 0x17CC; // float32
                constexpr std::ptrdiff_t m_flBombReleaseSpeed = 0x17D0; // float32
                constexpr std::ptrdiff_t m_flBombReleasePitch = 0x17D4; // float32
                constexpr std::ptrdiff_t m_flBombDropReleaseOffset = 0x17D8; // float32
                constexpr std::ptrdiff_t m_flHoldBombOffsetX = 0x17DC; // float32
                constexpr std::ptrdiff_t m_flHoldBombOffsetY = 0x17E0; // float32
                constexpr std::ptrdiff_t m_flHoldBombOffsetZ = 0x17E4; // float32
                constexpr std::ptrdiff_t m_flAnglePitchBias = 0x17E8; // float32
                constexpr std::ptrdiff_t m_flTrackAmount = 0x17EC; // float32
                constexpr std::ptrdiff_t m_flMoveCollideSpeed = 0x17F0; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ChronoSwap_BubbleMoveVData {
                constexpr std::ptrdiff_t m_BeamParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DamageParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Stabilizing_Tripod_Self_Debuff {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Hero_Clone {
                constexpr std::ptrdiff_t m_bMimicOwner = 0xC0; // bool
            }
            // Parent: None
            // Field count: 17
            //
            // Metadata:
            // NetworkVarNames: m_collisionAttribute (VPhysicsCollisionAttribute_t)
            // NetworkVarNames: m_vecMins (Vector)
            // NetworkVarNames: m_vecMaxs (Vector)
            // NetworkVarNames: m_usSolidFlags (uint8)
            // NetworkVarNames: m_nSolidType (SolidType_t)
            // NetworkVarNames: m_triggerBloat (uint8)
            // NetworkVarNames: m_nSurroundType (SurroundingBoundsType_t)
            // NetworkVarNames: m_CollisionGroup (uint8)
            // NetworkVarNames: m_nEnablePhysics (uint8)
            // NetworkVarNames: m_vecSpecifiedSurroundingMins (Vector)
            // NetworkVarNames: m_vecSpecifiedSurroundingMaxs (Vector)
            // NetworkVarNames: m_vCapsuleCenter1 (Vector)
            // NetworkVarNames: m_vCapsuleCenter2 (Vector)
            // NetworkVarNames: m_flCapsuleRadius (float)
            namespace CCollisionProperty {
                constexpr std::ptrdiff_t m_collisionAttribute = 0x10; // VPhysicsCollisionAttribute_t
                constexpr std::ptrdiff_t m_vecMins = 0x40; // Vector
                constexpr std::ptrdiff_t m_vecMaxs = 0x4C; // Vector
                constexpr std::ptrdiff_t m_usSolidFlags = 0x5A; // uint8
                constexpr std::ptrdiff_t m_nSolidType = 0x5B; // SolidType_t
                constexpr std::ptrdiff_t m_triggerBloat = 0x5C; // uint8
                constexpr std::ptrdiff_t m_nSurroundType = 0x5D; // SurroundingBoundsType_t
                constexpr std::ptrdiff_t m_CollisionGroup = 0x5E; // uint8
                constexpr std::ptrdiff_t m_nEnablePhysics = 0x5F; // uint8
                constexpr std::ptrdiff_t m_flBoundingRadius = 0x60; // float32
                constexpr std::ptrdiff_t m_vecSpecifiedSurroundingMins = 0x64; // Vector
                constexpr std::ptrdiff_t m_vecSpecifiedSurroundingMaxs = 0x70; // Vector
                constexpr std::ptrdiff_t m_vecSurroundingMaxs = 0x7C; // Vector
                constexpr std::ptrdiff_t m_vecSurroundingMins = 0x88; // Vector
                constexpr std::ptrdiff_t m_vCapsuleCenter1 = 0x94; // Vector
                constexpr std::ptrdiff_t m_vCapsuleCenter2 = 0xA0; // Vector
                constexpr std::ptrdiff_t m_flCapsuleRadius = 0xAC; // float32
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CServerOnlyEntity {
            }
            // Parent: None
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_hSequence (HSequence)
            // NetworkVarNames: m_flPrevCycle (float32)
            // NetworkVarNames: m_flCycle (float32)
            namespace CNetworkedSequenceOperation {
                constexpr std::ptrdiff_t m_hSequence = 0x8; // HSequence
                constexpr std::ptrdiff_t m_flPrevCycle = 0xC; // float32
                constexpr std::ptrdiff_t m_flCycle = 0x10; // float32
                constexpr std::ptrdiff_t m_flWeight = 0x14; // CNetworkedQuantizedFloat
                constexpr std::ptrdiff_t m_bSequenceChangeNetworked = 0x1C; // bool
                constexpr std::ptrdiff_t m_bDiscontinuity = 0x1D; // bool
                constexpr std::ptrdiff_t m_flPrevCycleFromDiscontinuity = 0x20; // float32
                constexpr std::ptrdiff_t m_flPrevCycleForAnimEventDetection = 0x24; // float32
            }
            // Parent: CAI_BaseNPC
            // Field count: 1
            namespace CAI_TestHull {
                constexpr std::ptrdiff_t m_nHullMode = 0x1280; // TestHullMode_t
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_GrandFinaleAOEVData {
                constexpr std::ptrdiff_t m_AuraParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 3
            namespace CInfoCoverPoint {
                constexpr std::ptrdiff_t m_nGroupID = 0x4E8; // int32
                constexpr std::ptrdiff_t m_nVisionRadius = 0x4EC; // int32
                constexpr std::ptrdiff_t m_bAllowOffNav = 0x4F0; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Targetdummy_Inherent {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Haunt_Damage_VData {
                constexpr std::ptrdiff_t m_sAfterburnParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityShivDeferDamageVData {
                constexpr std::ptrdiff_t m_ActiveCastParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flDeferredDamageApplicationInterval = 0x1640; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Bebop_Hook_BulletAmp {
            }
            // Parent: CCitadel_Modifier_StatStealBase
            // Field count: 0
            namespace CCitadel_Modifier_Arcane_Eater_Watcher {
            }
            // Parent: CTier3BossAbility
            // Field count: 0
            namespace CCitadel_Ability_Weapon_BossTier3 {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_CheaterCurseVData {
                constexpr std::ptrdiff_t m_CursedModel = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_flModelScale = 0x6E8; // float32
            }
            // Parent: CBaseNPCMaker
            // Field count: 5
            namespace CNPCMaker {
                constexpr std::ptrdiff_t m_iszNPCSubClass = 0x5E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSquadName = 0x5F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszHintGroup = 0x5F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_RelationshipString = 0x600; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_ChildTargetName = 0x608; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Field count: 25
            namespace CBaseNPCMaker {
                constexpr std::ptrdiff_t m_nMaxNumNPCs = 0x4E8; // int32
                constexpr std::ptrdiff_t m_flSpawnFrequency = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flRetryFrequency = 0x4F0; // float32
                constexpr std::ptrdiff_t m_nHullCheckMode = 0x4F4; // int32
                constexpr std::ptrdiff_t m_OnSpawnNPC = 0x4F8; // CEntityOutputTemplate<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_OnAllSpawned = 0x520; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAllSpawnedDead = 0x548; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAllLiveChildrenDead = 0x570; // CEntityIOOutput
                constexpr std::ptrdiff_t m_nLiveChildren = 0x598; // int32
                constexpr std::ptrdiff_t m_nMaxLiveChildren = 0x59C; // int32
                constexpr std::ptrdiff_t m_nMinSpawnDistance = 0x5A0; // int32
                constexpr std::ptrdiff_t m_nSpawnThreshold = 0x5A4; // int32
                constexpr std::ptrdiff_t m_nBatchCount = 0x5A8; // int32
                constexpr std::ptrdiff_t m_flRadius = 0x5AC; // float32
                constexpr std::ptrdiff_t m_bDisabled = 0x5B0; // bool
                constexpr std::ptrdiff_t m_bSpawning = 0x5B1; // bool
                constexpr std::ptrdiff_t m_bZeroPitchAndRoll = 0x5B2; // bool
                constexpr std::ptrdiff_t m_hIgnoreEntity = 0x5B4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iszIgnoreEnt = 0x5B8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszDestinationGroup = 0x5C0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hSpawnEntity = 0x5C8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hSpawnedNPC = 0x5CC; // CHandle<CAI_BaseNPC>
                constexpr std::ptrdiff_t m_nCurrentBatchCount = 0x5D0; // int32
                constexpr std::ptrdiff_t m_CriterionVisibility = 0x5D4; // CBaseNPCMaker::VisibilityCriterion_t
                constexpr std::ptrdiff_t m_CriterionDistance = 0x5D8; // CBaseNPCMaker::ThreeStateDist_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CBaseLockonAbilityVData {
                constexpr std::ptrdiff_t m_TargetModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_strApplyLockonStack = 0x1570; // CSoundEventName
            }
            // Parent: CModelPointEntity
            // Field count: 16
            //
            // Metadata:
            // NetworkVarNames: m_messageText (char)
            // NetworkVarNames: m_FontName (char)
            // NetworkVarNames: m_BackgroundMaterialName (char)
            // NetworkVarNames: m_bEnabled (bool)
            // NetworkVarNames: m_bFullbright (bool)
            // NetworkVarNames: m_flWorldUnitsPerPx (float)
            // NetworkVarNames: m_flFontSize (float)
            // NetworkVarNames: m_flDepthOffset (float)
            // NetworkVarNames: m_bDrawBackground (bool)
            // NetworkVarNames: m_flBackgroundBorderWidth (float)
            // NetworkVarNames: m_flBackgroundBorderHeight (float)
            // NetworkVarNames: m_flBackgroundWorldToUV (float)
            // NetworkVarNames: m_Color (Color)
            // NetworkVarNames: m_nJustifyHorizontal (PointWorldTextJustifyHorizontal_t)
            // NetworkVarNames: m_nJustifyVertical (PointWorldTextJustifyVertical_t)
            // NetworkVarNames: m_nReorientMode (PointWorldTextReorientMode_t)
            namespace CPointWorldText {
                constexpr std::ptrdiff_t m_messageText = 0x7C0; // char[512]
                constexpr std::ptrdiff_t m_FontName = 0x9C0; // char[64]
                constexpr std::ptrdiff_t m_BackgroundMaterialName = 0xA00; // char[64]
                constexpr std::ptrdiff_t m_bEnabled = 0xA40; // bool
                constexpr std::ptrdiff_t m_bFullbright = 0xA41; // bool
                constexpr std::ptrdiff_t m_flWorldUnitsPerPx = 0xA44; // float32
                constexpr std::ptrdiff_t m_flFontSize = 0xA48; // float32
                constexpr std::ptrdiff_t m_flDepthOffset = 0xA4C; // float32
                constexpr std::ptrdiff_t m_bDrawBackground = 0xA50; // bool
                constexpr std::ptrdiff_t m_flBackgroundBorderWidth = 0xA54; // float32
                constexpr std::ptrdiff_t m_flBackgroundBorderHeight = 0xA58; // float32
                constexpr std::ptrdiff_t m_flBackgroundWorldToUV = 0xA5C; // float32
                constexpr std::ptrdiff_t m_Color = 0xA60; // Color
                constexpr std::ptrdiff_t m_nJustifyHorizontal = 0xA64; // PointWorldTextJustifyHorizontal_t
                constexpr std::ptrdiff_t m_nJustifyVertical = 0xA68; // PointWorldTextJustifyVertical_t
                constexpr std::ptrdiff_t m_nReorientMode = 0xA6C; // PointWorldTextReorientMode_t
            }
            // Parent: CSoundAreaEntityBase
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_vMin (Vector)
            // NetworkVarNames: m_vMax (Vector)
            namespace CSoundAreaEntityOrientedBox {
                constexpr std::ptrdiff_t m_vMin = 0x508; // Vector
                constexpr std::ptrdiff_t m_vMax = 0x514; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Synth_Grasp_Caster {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_bActive (bool)
            namespace CCitadel_Ability_RiotProtocol {
                constexpr std::ptrdiff_t m_ChargeUpParticle = 0xB00; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bActive = 0xB04; // bool
            }
            // Parent: CCitadel_Modifier_Intrinsic_BaseVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ThrowSandProjectileVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Intimidated_Debuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Astro_Rifle_DebuffVData {
                constexpr std::ptrdiff_t m_SlowModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strTargetHitSound = 0x618; // CSoundEventName
            }
            // Parent: CitadelItemVData
            // Field count: 11
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Upgrade_MagicCarpetVData {
                constexpr std::ptrdiff_t m_SummonParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FlyingCarpetModifier = 0x1688; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SummonFlyingCarpetModifier = 0x1698; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SummonFlyingCarpetVisualModifier = 0x16A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_FlyingCarpetVisualModifier = 0x16B8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ShieldModifier = 0x16C8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flSummonVisualDuration = 0x16D8; // float32
                constexpr std::ptrdiff_t m_flBurstSpeedBonus = 0x16DC; // float32
                constexpr std::ptrdiff_t m_flBurstSpeedMin = 0x16E0; // float32
                constexpr std::ptrdiff_t m_flBurstSpeedDuration = 0x16E4; // float32
                constexpr std::ptrdiff_t m_flMinDistanceAboveGround = 0x16E8; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_FullSpectrum {
            }
            // Parent: CCitadel_Modifier_Tier3Boss_Base
            // Field count: 18
            namespace CCitadel_Modifier_Tier3Boss_LaserBeam {
                constexpr std::ptrdiff_t m_flSoundStartTime = 0xC8; // GameTime_t
                constexpr std::ptrdiff_t m_vStart = 0xD0; // Vector
                constexpr std::ptrdiff_t m_vEnd = 0xDC; // Vector
                constexpr std::ptrdiff_t m_vPrevEnd = 0xE8; // Vector
                constexpr std::ptrdiff_t m_flAngleBetweenTrace = 0xF4; // float32
                constexpr std::ptrdiff_t m_flPlayerDamagePerTick = 0xF8; // float32
                constexpr std::ptrdiff_t m_flNPCDamagePerTick = 0xFC; // float32
                constexpr std::ptrdiff_t m_flNextDamageTick = 0x100; // GameTime_t
                constexpr std::ptrdiff_t m_vecEntitiesHit = 0x108; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_flDamageTickRate = 0x120; // float32
                constexpr std::ptrdiff_t m_flLastShakeTime = 0x124; // GameTime_t
                constexpr std::ptrdiff_t m_bSweepRightFirst = 0x128; // bool
                constexpr std::ptrdiff_t m_vecBeamTarget = 0x12C; // Vector
                constexpr std::ptrdiff_t m_flLastBeamUpdateTime = 0x138; // GameTime_t
                constexpr std::ptrdiff_t m_vecEnemyPosition = 0x13C; // Vector
                constexpr std::ptrdiff_t m_nTrackingIndex = 0x148; // int32
                constexpr std::ptrdiff_t m_bPreviewMode = 0x14C; // bool
                constexpr std::ptrdiff_t m_hAttachment = 0x14D; // AttachmentHandle_t
            }
            // Parent: None
            // Field count: 14
            //
            // Metadata:
            // NetworkVarNames: m_vecProviders (EHANDLE)
            // NetworkVarNames: m_nDisabledGroups (uint32)
            // NetworkVarNames: m_bvEnabledStateMask (uint32)
            // NetworkVarNames: m_bvDisabledStateMask (uint32)
            // NetworkVarNames: m_bvEnabledPredictedStateMask (uint32)
            namespace CModifierProperty {
                constexpr std::ptrdiff_t __m_pChainEntity = 0x8; // CNetworkVarChainer
                constexpr std::ptrdiff_t m_hOwner = 0x30; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nProviderVisitedFlags = 0x198; // uint8
                constexpr std::ptrdiff_t m_bModifierStatesDirty = 0x199; // bool
                constexpr std::ptrdiff_t m_bPredictedOwner = 0x19A; // bool
                constexpr std::ptrdiff_t m_iLockRefCount = 0x19B; // int8
                constexpr std::ptrdiff_t m_hHandle = 0x19C; // ModifierPropRuntimeHandle_t
                constexpr std::ptrdiff_t m_nBroadcastEventListenerMask = 0x1A0; // uint32
                constexpr std::ptrdiff_t m_vecProviders = 0x1B0; // CNetworkUtlVectorBase<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nDisabledGroups = 0x1C8; // uint32
                constexpr std::ptrdiff_t m_bvEnabledStateMask = 0x1CC; // uint32[6]
                constexpr std::ptrdiff_t m_bvDisabledStateMask = 0x1E4; // uint32[6]
                constexpr std::ptrdiff_t m_bvEnabledPredictedStateMask = 0x1FC; // uint32[6]
                constexpr std::ptrdiff_t m_bParentWantsModifierStateChangeCallback = 0x220; // bool
            }
            // Parent: CNPC_FlyingDrone
            // Field count: 4
            namespace CNPC_SurveillanceDrone {
                constexpr std::ptrdiff_t m_iMinionHealth = 0x1848; // int32
                constexpr std::ptrdiff_t m_flLifetime = 0x184C; // float32
                constexpr std::ptrdiff_t m_vecHome = 0x185C; // Vector
                constexpr std::ptrdiff_t m_nAbilityLevel = 0x1878; // int32
            }
            // Parent: CBaseTrigger
            // Field count: 13
            //
            // Metadata:
            // NetworkVarNames: m_gravityScale (float)
            // NetworkVarNames: m_linearLimit (float)
            // NetworkVarNames: m_linearDamping (float)
            // NetworkVarNames: m_angularLimit (float)
            // NetworkVarNames: m_angularDamping (float)
            // NetworkVarNames: m_linearForce (float)
            // NetworkVarNames: m_flFrequency (float)
            // NetworkVarNames: m_flDampingRatio (float)
            // NetworkVarNames: m_vecLinearForcePointAt (Vector)
            // NetworkVarNames: m_bCollapseToForcePoint (bool)
            // NetworkVarNames: m_vecLinearForcePointAtWorld (Vector)
            // NetworkVarNames: m_vecLinearForceDirection (Vector)
            // NetworkVarNames: m_bConvertToDebrisWhenPossible (bool)
            namespace CTriggerPhysics {
                constexpr std::ptrdiff_t m_gravityScale = 0x9A0; // float32
                constexpr std::ptrdiff_t m_linearLimit = 0x9A4; // float32
                constexpr std::ptrdiff_t m_linearDamping = 0x9A8; // float32
                constexpr std::ptrdiff_t m_angularLimit = 0x9AC; // float32
                constexpr std::ptrdiff_t m_angularDamping = 0x9B0; // float32
                constexpr std::ptrdiff_t m_linearForce = 0x9B4; // float32
                constexpr std::ptrdiff_t m_flFrequency = 0x9B8; // float32
                constexpr std::ptrdiff_t m_flDampingRatio = 0x9BC; // float32
                constexpr std::ptrdiff_t m_vecLinearForcePointAt = 0x9C0; // Vector
                constexpr std::ptrdiff_t m_bCollapseToForcePoint = 0x9CC; // bool
                constexpr std::ptrdiff_t m_vecLinearForcePointAtWorld = 0x9D0; // Vector
                constexpr std::ptrdiff_t m_vecLinearForceDirection = 0x9DC; // Vector
                constexpr std::ptrdiff_t m_bConvertToDebrisWhenPossible = 0x9E8; // bool
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_TenguUrn_Aura {
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CGameModifier_OverrideTargetIdentifier {
                constexpr std::ptrdiff_t m_sTargetIdentifier = 0xC0; // CGlobalSymbol
                constexpr std::ptrdiff_t m_hTarget = 0xC8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nOriginType = 0xCC; // TargetIdentifierOriginType_t
                constexpr std::ptrdiff_t m_sAttachmentName = 0xD0; // CGlobalSymbol
                constexpr std::ptrdiff_t m_hAttachment = 0xD8; // AttachmentHandle_t
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_NeutralShield {
                constexpr std::ptrdiff_t m_flShieldActivateDelay = 0xC0; // float32
                constexpr std::ptrdiff_t m_timeEnemyDisappeared = 0xC4; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_FealtyTarget {
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_RocketBarrageVData {
                constexpr std::ptrdiff_t m_BarrageModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_MoveSlowModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1660; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSequenceSelected = 0x1670; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_flMoveSpeedReductionPct = 0x16F8; // float32
                constexpr std::ptrdiff_t m_flHeightTestDistance = 0x16FC; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_IncendiaryDebuff {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 44
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_XPOrbVData {
                constexpr std::ptrdiff_t m_bIsObjective = 0x28; // bool
                constexpr std::ptrdiff_t m_strOrbClaimed = 0x30; // CSoundEventName
                constexpr std::ptrdiff_t m_strOrbClaimedTeammate = 0x40; // CSoundEventName
                constexpr std::ptrdiff_t m_strOrbDenied = 0x50; // CSoundEventName
                constexpr std::ptrdiff_t m_strOrbDeniedPlayer = 0x60; // CSoundEventName
                constexpr std::ptrdiff_t m_strOrbHitConfirm = 0x70; // CSoundEventName
                constexpr std::ptrdiff_t m_sOrbModel = 0x80; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_sPredictedHitLimboGlowParticle = 0x160; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sFriendlyHitConfirmParticle = 0x240; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sEnemyHitConfirmParticle = 0x320; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sFriendlyGlowParticle = 0x400; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sEnemyGlowParticle = 0x4E0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sGoldReceivedParticle = 0x5C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sFriendlyOrbDeniedParticle = 0x6A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sEnemyOrbDeniedParticle = 0x780; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sFriendlyOrbEarnedParticle = 0x860; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sEnemyOrbEarnedParticle = 0x940; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flOrbSpawnDelayMin = 0xA20; // float32
                constexpr std::ptrdiff_t m_flOrbSpawnDelayMax = 0xA24; // float32
                constexpr std::ptrdiff_t m_flOrbSpawnOffsetZ = 0xA28; // float32
                constexpr std::ptrdiff_t m_flOrbSpawnOffsetRandomXYZ = 0xA2C; // float32
                constexpr std::ptrdiff_t m_flGravityScale = 0xA30; // float32
                constexpr std::ptrdiff_t m_flLateralSpeedMin = 0xA34; // float32
                constexpr std::ptrdiff_t m_flLateralSpeedMax = 0xA38; // float32
                constexpr std::ptrdiff_t m_flLateralMoveDuration = 0xA3C; // float32
                constexpr std::ptrdiff_t m_flUpSpeedMin = 0xA40; // float32
                constexpr std::ptrdiff_t m_flUpSpeedMax = 0xA44; // float32
                constexpr std::ptrdiff_t m_flBurstSpeedMultiplier = 0xA48; // float32
                constexpr std::ptrdiff_t m_flBurstSpeedDuration = 0xA4C; // float32
                constexpr std::ptrdiff_t m_flOscillateFrequency = 0xA50; // float32
                constexpr std::ptrdiff_t m_flLifeTime = 0xA54; // float32
                constexpr std::ptrdiff_t m_flRadius = 0xA58; // float32
                constexpr std::ptrdiff_t m_flCollisionRadius = 0xA5C; // float32
                constexpr std::ptrdiff_t m_flInvulDuration = 0xA60; // float32
                constexpr std::ptrdiff_t m_bUseKillerPlaneOffsets = 0xA64; // bool
                constexpr std::ptrdiff_t m_flKillerPlaneOffset = 0xA68; // float32
                constexpr std::ptrdiff_t m_flKillerPlaneHorizontalDecayRate = 0xA6C; // float32
                constexpr std::ptrdiff_t m_flKillerPlaneHorizontalSpeedX = 0xA70; // float32
                constexpr std::ptrdiff_t m_flKillerPlaneHorizontalSpeedY = 0xA74; // float32
                constexpr std::ptrdiff_t m_flKillerPlaneVerticalSpeed = 0xA78; // float32
                constexpr std::ptrdiff_t m_flKillerPlaneSpeedNoise = 0xA7C; // float32
                constexpr std::ptrdiff_t m_flKillerPlaneLaunchOffset = 0xA80; // float32
                constexpr std::ptrdiff_t m_flKillerPlaneLaunchDelay = 0xA84; // float32
                constexpr std::ptrdiff_t m_flOrbClaimWindow = 0xA88; // float32
            }
            // Parent: None
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_ID (CUtlStringToken)
            // NetworkVarNames: m_Values (Vector4D)
            namespace EntityRenderAttribute_t {
                constexpr std::ptrdiff_t m_ID = 0x30; // CUtlStringToken
                constexpr std::ptrdiff_t m_Values = 0x34; // Vector4D
            }
            // Parent: CNodeEnt
            // Field count: 0
            namespace CNodeEnt_InfoNodeAir {
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CPointBroadcastClientCommand {
            }
            // Parent: None
            // Field count: 0
            namespace CCitadelPlayerBot {
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTargetdummy3VData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_flStartTime (GameTime_t)
            // NetworkVarNames: m_flLandedTime (GameTime_t)
            // NetworkVarNames: m_bLanded (bool)
            // NetworkVarNames: m_bFalling (bool)
            // NetworkVarNames: m_bInStoneForm (bool)
            // NetworkVarNames: m_flStartHeight (float)
            namespace CCitadel_Ability_Tengu_StoneForm {
                constexpr std::ptrdiff_t m_flStartTime = 0xCC0; // GameTime_t
                constexpr std::ptrdiff_t m_flLandedTime = 0xCC4; // GameTime_t
                constexpr std::ptrdiff_t m_bLanded = 0xCC8; // bool
                constexpr std::ptrdiff_t m_bFalling = 0xCC9; // bool
                constexpr std::ptrdiff_t m_bInStoneForm = 0xCCA; // bool
                constexpr std::ptrdiff_t m_flStartHeight = 0xCCC; // float32
                constexpr std::ptrdiff_t m_nStoneFormEffect = 0xCD0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecHitEntities = 0xCD8; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_CheatDeathImmunity {
            }
            // Parent: CCitadelModifierAura
            // Field count: 1
            namespace CCitadel_Modifier_Cadence_Crescendo_AOE {
                constexpr std::ptrdiff_t m_nTicks = 0xE8; // int32
            }
            // Parent: CPointClientUIWorldPanel
            // Field count: 0
            namespace CInWorldKeyBindPanel {
            }
            // Parent: CBaseModelEntity
            // Field count: 26
            namespace CFuncShatterglass {
                constexpr std::ptrdiff_t m_matPanelTransform = 0x7C0; // matrix3x4_t
                constexpr std::ptrdiff_t m_matPanelTransformWsTemp = 0x7F0; // matrix3x4_t
                constexpr std::ptrdiff_t m_vecShatterGlassShards = 0x820; // CUtlVector<uint32>
                constexpr std::ptrdiff_t m_PanelSize = 0x838; // Vector2D
                constexpr std::ptrdiff_t m_flLastShatterSoundEmitTime = 0x840; // GameTime_t
                constexpr std::ptrdiff_t m_flLastCleanupTime = 0x844; // GameTime_t
                constexpr std::ptrdiff_t m_flInitAtTime = 0x848; // GameTime_t
                constexpr std::ptrdiff_t m_flGlassThickness = 0x84C; // float32
                constexpr std::ptrdiff_t m_flSpawnInvulnerability = 0x850; // float32
                constexpr std::ptrdiff_t m_bBreakSilent = 0x854; // bool
                constexpr std::ptrdiff_t m_bBreakShardless = 0x855; // bool
                constexpr std::ptrdiff_t m_bBroken = 0x856; // bool
                constexpr std::ptrdiff_t m_bGlassNavIgnore = 0x857; // bool
                constexpr std::ptrdiff_t m_bGlassInFrame = 0x858; // bool
                constexpr std::ptrdiff_t m_bStartBroken = 0x859; // bool
                constexpr std::ptrdiff_t m_iInitialDamageType = 0x85A; // uint8
                constexpr std::ptrdiff_t m_szDamagePositioningEntityName01 = 0x860; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_szDamagePositioningEntityName02 = 0x868; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_szDamagePositioningEntityName03 = 0x870; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_szDamagePositioningEntityName04 = 0x878; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vInitialDamagePositions = 0x880; // CUtlVector<Vector>
                constexpr std::ptrdiff_t m_vExtraDamagePositions = 0x898; // CUtlVector<Vector>
                constexpr std::ptrdiff_t m_vInitialPanelVertices = 0x8B0; // CUtlVector<Vector4D>
                constexpr std::ptrdiff_t m_OnBroken = 0x8C8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iSurfaceType = 0x8F0; // uint8
                constexpr std::ptrdiff_t m_hMaterialDamageBase = 0x8F8; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: CBaseButton
            // Field count: 0
            namespace CRotButton {
            }
            // Parent: CSoundEventEntity
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flRadius (float)
            namespace CSoundEventSphereEntity {
                constexpr std::ptrdiff_t m_flRadius = 0x5A0; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Synth_Grasp_VData {
                constexpr std::ptrdiff_t m_CasterModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_VictimModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BulletShieldModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_bInFlight (bool)
            namespace CCitadel_Ability_Tokamak_DyingStar {
                constexpr std::ptrdiff_t m_nRollFXIndex = 0xB00; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bInFlight = 0xB04; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_SleepingVData {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_IceGrenade {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB0C; // QAngle
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_ChargePullEnemy {
                constexpr std::ptrdiff_t m_vecOffsetDir = 0x1A0; // Vector
                constexpr std::ptrdiff_t m_flTackleRadius = 0x1AC; // float32
                constexpr std::ptrdiff_t m_flPullTargetSpeed = 0x1B0; // float32
            }
            // Parent: CCitadel_WeaponUpgrade_HeadshotBooster_VData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_WeaponUpgrade_Headhunter_VData {
                constexpr std::ptrdiff_t m_HeadshotBuffModifier = 0x15C8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_SlowingTech_Proc {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Quarantine {
            }
            // Parent: CCitadel_Modifier_ShieldTracker_Base
            // Field count: 0
            namespace CCitadel_Modifier_ShieldTracker_Bullet {
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_Base_Buildup {
                constexpr std::ptrdiff_t m_flLastBuildupAppliedTime = 0xC0; // GameTime_t
                constexpr std::ptrdiff_t m_flDelayedDieTimeRemaining = 0xC4; // float32
                constexpr std::ptrdiff_t m_bInDelayTime = 0xC8; // bool
                constexpr std::ptrdiff_t m_flBuildUpDecayDelayFromWeaponCycleTime = 0xCC; // float32
            }
            // Parent: CBaseClientUIEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_hActivator (EHANDLE)
            namespace CPointClientUIDialog {
                constexpr std::ptrdiff_t m_hActivator = 0x970; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bStartEnabled = 0x974; // bool
            }
            // Parent: CPointEntity
            // Field count: 1
            namespace CEnvSplash {
                constexpr std::ptrdiff_t m_flScale = 0x4E8; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Magician_MagicBoltVData {
                constexpr std::ptrdiff_t m_TargetDebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_RetargetParticle = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strRedirect = 0x1730; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ReefdwellerHarpoon_DetachBuff {
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityRocketLauncherVData {
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Warden_CrowdControl_Debuff {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_flDashEndTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_bIsSpeedBursting (bool)
            namespace CCitadel_Ability_FlameDash {
                constexpr std::ptrdiff_t m_vecHitEntities = 0xB00; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_flDashEndTime = 0xB18; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_bIsSpeedBursting = 0xB30; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ArcaneEaterDebuffVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_Inhibitor_Proc {
            }
            // Parent: CitadelAbilityVData
            // Field count: 24
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Climb_RopeVData {
                constexpr std::ptrdiff_t m_flMinButtonHoldTimeToActivate = 0x1560; // float32
                constexpr std::ptrdiff_t m_flClimbSpeedUp = 0x1564; // float32
                constexpr std::ptrdiff_t m_flClimbSpeedDown = 0x1568; // float32
                constexpr std::ptrdiff_t m_flClimbSpeedDownMax = 0x156C; // float32
                constexpr std::ptrdiff_t m_flClimbDownAccelTime = 0x1570; // float32
                constexpr std::ptrdiff_t m_flLatchSpeed = 0x1574; // float32
                constexpr std::ptrdiff_t m_flAttachOffset = 0x1578; // float32
                constexpr std::ptrdiff_t m_flMinReconnectTime = 0x157C; // float32
                constexpr std::ptrdiff_t m_flSideMoveReduction = 0x1580; // float32
                constexpr std::ptrdiff_t m_flTopOffset = 0x1584; // float32
                constexpr std::ptrdiff_t m_flBottomOffset = 0x1588; // float32
                constexpr std::ptrdiff_t m_flTraceRadiusSize = 0x158C; // float32
                constexpr std::ptrdiff_t m_flStopTimeToShoot = 0x1590; // float32
                constexpr std::ptrdiff_t m_flJumpOffVertical = 0x1594; // float32
                constexpr std::ptrdiff_t m_flJumpOffHorizontal = 0x1598; // float32
                constexpr std::ptrdiff_t m_flDuckOffVertical = 0x159C; // float32
                constexpr std::ptrdiff_t m_flDuckOffHorizontal = 0x15A0; // float32
                constexpr std::ptrdiff_t m_flActivateRange = 0x15A4; // float32
                constexpr std::ptrdiff_t m_flJumpToRoofRayCheckDist = 0x15A8; // float32
                constexpr std::ptrdiff_t m_flMinTimeToRoofCheck = 0x15AC; // float32
                constexpr std::ptrdiff_t m_flTimeToHintRefresh = 0x15B0; // float32
                constexpr std::ptrdiff_t m_iMaxHintCount = 0x15B4; // float32
                constexpr std::ptrdiff_t m_flClimbRopeSlowDurationOnHit = 0x15B8; // float32
                constexpr std::ptrdiff_t m_ClimbRopeSlowOnHitModifier = 0x15C0; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: None
            // Field count: 25
            //
            // Metadata:
            // NetworkVarNames: dirPrimary (Vector)
            // NetworkVarNames: colorPrimary (Color)
            // NetworkVarNames: colorSecondary (Color)
            // NetworkVarNames: colorPrimaryLerpTo (Color)
            // NetworkVarNames: colorSecondaryLerpTo (Color)
            // NetworkVarNames: start (float32)
            // NetworkVarNames: end (float32)
            // NetworkVarNames: farz (float32)
            // NetworkVarNames: maxdensity (float32)
            // NetworkVarNames: exponent (float32)
            // NetworkVarNames: HDRColorScale (float32)
            // NetworkVarNames: skyboxFogFactor (float32)
            // NetworkVarNames: skyboxFogFactorLerpTo (float32)
            // NetworkVarNames: startLerpTo (float32)
            // NetworkVarNames: endLerpTo (float32)
            // NetworkVarNames: maxdensityLerpTo (float32)
            // NetworkVarNames: lerptime (GameTime_t)
            // NetworkVarNames: duration (float32)
            // NetworkVarNames: blendtobackground (float32)
            // NetworkVarNames: scattering (float32)
            // NetworkVarNames: locallightscale (float32)
            // NetworkVarNames: enable (bool)
            // NetworkVarNames: blend (bool)
            // NetworkVarNames: m_bNoReflectionFog (bool)
            namespace fogparams_t {
                constexpr std::ptrdiff_t dirPrimary = 0x8; // Vector
                constexpr std::ptrdiff_t colorPrimary = 0x14; // Color
                constexpr std::ptrdiff_t colorSecondary = 0x18; // Color
                constexpr std::ptrdiff_t colorPrimaryLerpTo = 0x1C; // Color
                constexpr std::ptrdiff_t colorSecondaryLerpTo = 0x20; // Color
                constexpr std::ptrdiff_t start = 0x24; // float32
                constexpr std::ptrdiff_t end = 0x28; // float32
                constexpr std::ptrdiff_t farz = 0x2C; // float32
                constexpr std::ptrdiff_t maxdensity = 0x30; // float32
                constexpr std::ptrdiff_t exponent = 0x34; // float32
                constexpr std::ptrdiff_t HDRColorScale = 0x38; // float32
                constexpr std::ptrdiff_t skyboxFogFactor = 0x3C; // float32
                constexpr std::ptrdiff_t skyboxFogFactorLerpTo = 0x40; // float32
                constexpr std::ptrdiff_t startLerpTo = 0x44; // float32
                constexpr std::ptrdiff_t endLerpTo = 0x48; // float32
                constexpr std::ptrdiff_t maxdensityLerpTo = 0x4C; // float32
                constexpr std::ptrdiff_t lerptime = 0x50; // GameTime_t
                constexpr std::ptrdiff_t duration = 0x54; // float32
                constexpr std::ptrdiff_t blendtobackground = 0x58; // float32
                constexpr std::ptrdiff_t scattering = 0x5C; // float32
                constexpr std::ptrdiff_t locallightscale = 0x60; // float32
                constexpr std::ptrdiff_t enable = 0x64; // bool
                constexpr std::ptrdiff_t blend = 0x65; // bool
                constexpr std::ptrdiff_t m_bNoReflectionFog = 0x66; // bool
                constexpr std::ptrdiff_t m_bPadding = 0x67; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BreakablePropClipSizePickupVData {
                constexpr std::ptrdiff_t m_flClipSize = 0x608; // float32
                constexpr std::ptrdiff_t m_nClipCount = 0x60C; // int32
                constexpr std::ptrdiff_t m_flFireRate = 0x610; // float32
            }
            // Parent: CCitadel_Modifier_Invis
            // Field count: 1
            namespace CCitadel_Modifier_Shadow_Step {
                constexpr std::ptrdiff_t m_nRevealedEffect = 0x260; // ParticleIndex_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHatTrickVData {
                constexpr std::ptrdiff_t m_SpectatingProjectileParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HatTrickChannelParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1800; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1810; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 7
            namespace CCitadel_Modifier_VoidSphere {
                constexpr std::ptrdiff_t m_bTeleported = 0xC0; // bool
                constexpr std::ptrdiff_t m_particleStart = 0xC4; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleEnd = 0xC8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleTrail = 0xCC; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecEndLocation = 0xD0; // Vector
                constexpr std::ptrdiff_t m_vecStartPosition = 0xDC; // Vector
                constexpr std::ptrdiff_t m_vecEndLocationCaster = 0xE8; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ZiplineKnockdownImmuneVData {
                constexpr std::ptrdiff_t m_ZipLineEnemyKnockdownProtectionParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineSelfKnockdownProtectionParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineKnockdownProtectionStatusParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ZipLineKnockdownProtectionStatusEnemyParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Upgrade_OverdriveClip_Reload {
                constexpr std::ptrdiff_t m_nStartingClipSize = 0xC0; // int32
            }
            // Parent: CitadelItemVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_HealOnLevelVData {
            }
            // Parent: CBaseTrigger
            // Field count: 0
            namespace CRegenerateZone {
            }
            // Parent: CPointCamera
            // Field count: 1
            namespace CPointCameraVFOV {
                constexpr std::ptrdiff_t m_flVerticalFOV = 0x548; // float32
            }
            // Parent: CCitadelYamatoBaseVData
            // Field count: 29
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelAbilityFlyingStrikeVData {
                constexpr std::ptrdiff_t m_flJumpFallSpeedMax = 0x1568; // float32
                constexpr std::ptrdiff_t m_flJumpAirDrag = 0x156C; // float32
                constexpr std::ptrdiff_t m_flJumpAirSpeedMax = 0x1570; // float32
                constexpr std::ptrdiff_t m_flOnCancelVerticalSpeedBonus = 0x1574; // float32
                constexpr std::ptrdiff_t m_flFlyingCloseEnoughToTarget = 0x1578; // float32
                constexpr std::ptrdiff_t m_curveSpeedScale = 0x1580; // CPiecewiseCurve
                constexpr std::ptrdiff_t m_flAnimToStrikePointTime = 0x15C0; // float32
                constexpr std::ptrdiff_t m_flAnimToStrikeArrivalBias = 0x15C4; // float32
                constexpr std::ptrdiff_t m_flGrappleShotFloatTime = 0x15C8; // float32
                constexpr std::ptrdiff_t m_flGrappleShotDelayToFlyOnHit = 0x15CC; // float32
                constexpr std::ptrdiff_t m_flGrappleSpeed = 0x15D0; // float32
                constexpr std::ptrdiff_t m_SlowModifier = 0x15D8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_GrappleTargetModifier = 0x15E8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_WeaponBuffModifier = 0x15F8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_LeapParticle = 0x1608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x16E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SlashParticle = 0x17C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BulletGrappleTracerParticle = 0x18A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyGrappleParticle = 0x1988; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDamageTarget = 0x1A68; // CSoundEventName
                constexpr std::ptrdiff_t m_strStartFlyingToTarget = 0x1A78; // CSoundEventName
                constexpr std::ptrdiff_t m_strStartAttack = 0x1A88; // CSoundEventName
                constexpr std::ptrdiff_t m_strGrappleHitTarget = 0x1A98; // CSoundEventName
                constexpr std::ptrdiff_t m_strGrappleHitWorld = 0x1AA8; // CSoundEventName
                constexpr std::ptrdiff_t m_strGrappleHitNothing = 0x1AB8; // CSoundEventName
                constexpr std::ptrdiff_t m_strGrappleLoop = 0x1AC8; // CSoundEventName
                constexpr std::ptrdiff_t m_strFlyingLoop = 0x1AD8; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSequenceFlying = 0x1AE8; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraSequenceAttacking = 0x1B70; // CitadelCameraOperationsSequence_t
            }
            // Parent: CCitadel_Modifier_Base
            // Field count: 0
            namespace CCitadel_Modifier_FlyingStrikeTarget {
            }
            // Parent: CitadelAbilityVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGooGrenadeVData {
                constexpr std::ptrdiff_t m_GooGrenadeImpactModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_GooGrenadePuddleAuraModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_GooGrenadeSkipParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_GooGrenadeExplodeParticle = 0x1660; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_GrenadeHitImpactSound = 0x1740; // CSoundEventName
                constexpr std::ptrdiff_t m_GrenadeMissImpactSound = 0x1750; // CSoundEventName
                constexpr std::ptrdiff_t m_flMinRestitution = 0x1760; // float32
                constexpr std::ptrdiff_t m_flMaxRestitution = 0x1764; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_FireBombVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_ProgressBarModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_FireBombModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_Tier3Boss_Base
            // Field count: 0
            namespace CCitadel_Modifier_Tier3_DamagePulse {
            }
            // Parent: CBaseEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_timeLastUpdate (GameTime_t)
            // NetworkVarNames: m_vecFOWEntities (STrooperFOWEntity)
            namespace CCitadelTrooperMinimap {
                constexpr std::ptrdiff_t m_timeLastUpdate = 0x4E8; // GameTime_t
                constexpr std::ptrdiff_t m_vecFOWEntities = 0x4F0; // CUtlVectorEmbeddedNetworkVar<STrooperFOWEntity>
            }
            // Parent: CBaseAnimGraph
            // Field count: 0
            namespace CWaterBullet {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_DPS_Aura {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CGameModifier_FireConCommand {
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            namespace CMarkupVolume {
                constexpr std::ptrdiff_t m_bDisabled = 0x7C0; // bool
            }
            // Parent: CPointEntity
            // Field count: 6
            namespace CMessage {
                constexpr std::ptrdiff_t m_iszMessage = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_MessageVolume = 0x4F0; // float32
                constexpr std::ptrdiff_t m_MessageAttenuation = 0x4F4; // int32
                constexpr std::ptrdiff_t m_Radius = 0x4F8; // float32
                constexpr std::ptrdiff_t m_sNoise = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnShowMessage = 0x508; // CEntityIOOutput
            }
            // Parent: CLogicalEntity
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_bEnabled (bool)
            namespace CLogicGameEventListener {
                constexpr std::ptrdiff_t m_OnEventFired = 0x4F8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iszGameEventName = 0x520; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszGameEventItem = 0x528; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bEnabled = 0x530; // bool
                constexpr std::ptrdiff_t m_bStartDisabled = 0x531; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MageWalkVData {
                constexpr std::ptrdiff_t m_TeleportStartParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportEndParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportTrailParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flPreTeleportDuration = 0x8A8; // float32
                constexpr std::ptrdiff_t m_strAmbientLoopingLocalPlayerSound = 0x8B0; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbility_Fathom_LurkersAmbush_VData {
                constexpr std::ptrdiff_t m_InvisModifier = 0x1560; // CEmbeddedSubclass<CCitadel_Modifier_LurkersAmbush_Invis>
                constexpr std::ptrdiff_t m_RegenModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ImmobilizeModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strSwapStarted = 0x1590; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Mirage_FireBeetles_VData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CasterModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_RecentlyDebuffedModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_StealWatcherModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplosionSound = 0x1680; // CSoundEventName
                constexpr std::ptrdiff_t m_strHitConfirm = 0x1690; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTargetdummy4VData {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SleepDagger_Drowsy_VData {
                constexpr std::ptrdiff_t m_SleepModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierIcePathVData {
                constexpr std::ptrdiff_t m_FrontModel = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_BodyModel = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_GroundParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FloatingParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_IcePathBuffParticle = 0x988; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FriendlyAuraModifier = 0xA68; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BonusSpiritLingerModifier = 0xA78; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_VitalitySuppressor {
                constexpr std::ptrdiff_t m_flLastTickTime = 0xC0; // GameTime_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SlowVData {
            }
            // Parent: None
            // Field count: 5
            namespace COrbSpawner__Bounty_t {
                constexpr std::ptrdiff_t m_nGoldToGive = 0x0; // int32
                constexpr std::ptrdiff_t m_nNumOrbs = 0x4; // int32
                constexpr std::ptrdiff_t m_eDenyType = 0x8; // EDenyDistributionType
                constexpr std::ptrdiff_t m_eSource = 0xC; // ECurrencySource
                constexpr std::ptrdiff_t m_hTarget = 0x10; // CHandle<CCitadelPlayerPawn>
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Item_Discord_Aura_Enemy {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ItemPickupPunchable {
            }
            // Parent: CBaseModelEntity
            // Field count: 15
            //
            // Metadata:
            // NetworkVarNames: m_CPropDataComponent (CPropDataComponent::Storage_t)
            namespace CBreakable {
                constexpr std::ptrdiff_t m_CPropDataComponent = 0x7C8; // CPropDataComponent
                constexpr std::ptrdiff_t m_Material = 0x808; // Materials
                constexpr std::ptrdiff_t m_hBreaker = 0x80C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_Explosion = 0x810; // Explosions
                constexpr std::ptrdiff_t m_iszSpawnObject = 0x818; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flPressureDelay = 0x820; // float32
                constexpr std::ptrdiff_t m_iMinHealthDmg = 0x824; // int32
                constexpr std::ptrdiff_t m_iszPropData = 0x828; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_impactEnergyScale = 0x830; // float32
                constexpr std::ptrdiff_t m_nOverrideBlockLOS = 0x834; // EOverrideBlockLOS_t
                constexpr std::ptrdiff_t m_OnBreak = 0x838; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnHealthChanged = 0x860; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_PerformanceMode = 0x888; // PerformanceMode_t
                constexpr std::ptrdiff_t m_hPhysicsAttacker = 0x88C; // CHandle<CBasePlayerPawn>
                constexpr std::ptrdiff_t m_flLastPhysicsInfluenceTime = 0x890; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Rutger_CheatDeath {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Tokamak_Breach {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 19
            //
            // Metadata:
            // NetworkVarNames: m_flGroundDashJumpStartTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flGroundDashJumpEndTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_bJumped (bool)
            // NetworkVarNames: m_bCanDashJump (bool)
            // NetworkVarNames: m_nDesiredAirJumpCount (int)
            // NetworkVarNames: m_nExecutedAirJumpCount (int)
            // NetworkVarNames: m_bInSlideJump (bool)
            // NetworkVarNames: m_nConsecutiveAirJumps (int8)
            // NetworkVarNames: m_nConsecutiveWallJumps (int8)
            namespace CCitadel_Ability_Jump {
                constexpr std::ptrdiff_t m_flLastTimeOnZipLine = 0xB00; // GameTime_t
                constexpr std::ptrdiff_t m_flLastOnGroundTime = 0xB04; // GameTime_t
                constexpr std::ptrdiff_t m_flPhaseStartTime = 0xB08; // GameTime_t
                constexpr std::ptrdiff_t m_flJumpTime = 0xB0C; // GameTime_t
                constexpr std::ptrdiff_t m_LastJumpType = 0xB10; // EJumpType_t
                constexpr std::ptrdiff_t m_bShouldCreateAirJumpEffects = 0xB11; // bool
                constexpr std::ptrdiff_t m_flDoubleJumpFailTime = 0xB14; // GameTime_t
                constexpr std::ptrdiff_t m_eDoubleJumpFailReason = 0xB18; // ECitadelAbilityOrders
                constexpr std::ptrdiff_t m_vWallJumpNormalUsed = 0xB1C; // Vector
                constexpr std::ptrdiff_t m_flGroundDashJumpStartTime = 0xC40; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flGroundDashJumpEndTime = 0xC58; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_bJumped = 0xC70; // bool
                constexpr std::ptrdiff_t m_bCanDashJump = 0xC71; // bool
                constexpr std::ptrdiff_t m_nDesiredAirJumpCount = 0xC74; // int32
                constexpr std::ptrdiff_t m_nExecutedAirJumpCount = 0xC78; // int32
                constexpr std::ptrdiff_t m_bInSlideJump = 0xC7C; // bool
                constexpr std::ptrdiff_t m_nConsecutiveAirJumps = 0xC7D; // int8
                constexpr std::ptrdiff_t m_nConsecutiveWallJumps = 0xC7E; // int8
                constexpr std::ptrdiff_t m_vLastWallCollidedWithNormal = 0xC80; // Vector
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace COrbSpawner {
            }
            // Parent: CBaseModelEntity
            // Field count: 16
            namespace CBaseToggle {
                constexpr std::ptrdiff_t m_toggle_state = 0x7C0; // TOGGLE_STATE
                constexpr std::ptrdiff_t m_flMoveDistance = 0x7C4; // float32
                constexpr std::ptrdiff_t m_flWait = 0x7C8; // float32
                constexpr std::ptrdiff_t m_flLip = 0x7CC; // float32
                constexpr std::ptrdiff_t m_bAlwaysFireBlockedOutputs = 0x7D0; // bool
                constexpr std::ptrdiff_t m_vecPosition1 = 0x7D4; // Vector
                constexpr std::ptrdiff_t m_vecPosition2 = 0x7E0; // Vector
                constexpr std::ptrdiff_t m_vecMoveAng = 0x7EC; // QAngle
                constexpr std::ptrdiff_t m_vecAngle1 = 0x7F8; // QAngle
                constexpr std::ptrdiff_t m_vecAngle2 = 0x804; // QAngle
                constexpr std::ptrdiff_t m_flHeight = 0x810; // float32
                constexpr std::ptrdiff_t m_hActivator = 0x814; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vecFinalDest = 0x818; // Vector
                constexpr std::ptrdiff_t m_vecFinalAngle = 0x824; // QAngle
                constexpr std::ptrdiff_t m_movementType = 0x830; // int32
                constexpr std::ptrdiff_t m_sMaster = 0x838; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoTarget {
            }
            // Parent: CCitadel_Modifier_Intrinsic_Base
            // Field count: 0
            namespace CCitadel_Modifier_PredatorPrecision {
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_TechUpgrade_SuperAcolyteGlovesVData {
                constexpr std::ptrdiff_t m_SpiritMeleeProcModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TechCleaveVData {
                constexpr std::ptrdiff_t m_CleavePlayerParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CleaveTrooperParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sVictimSound = 0x7C8; // CSoundEventName
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityPropertyMultiStats {
            }
            // Parent: CNPC_SimpleAnimatingAI
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_flAimPitch (float)
            // NetworkVarNames: m_flAttackRange (float)
            namespace CNPC_ShieldedSentry {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0xBE0; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_flAimPitch = 0xC04; // float32
                constexpr std::ptrdiff_t m_flNextAttackTime = 0xC08; // GameTime_t
                constexpr std::ptrdiff_t m_flAttackCone = 0xC0C; // float32
                constexpr std::ptrdiff_t m_flAttackDelay = 0xC10; // float32
                constexpr std::ptrdiff_t m_flLastAlertSound = 0xC14; // GameTime_t
                constexpr std::ptrdiff_t m_flTrackingSpeed = 0xC18; // float32
                constexpr std::ptrdiff_t m_flDeployTime = 0xC1C; // float32
                constexpr std::ptrdiff_t m_bHadEnemy = 0xC2A; // bool
                constexpr std::ptrdiff_t m_bLockedOn = 0xC2B; // bool
                constexpr std::ptrdiff_t m_flAttackRange = 0xC34; // float32
            }
            // Parent: CCitadelProjectile
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flWidth (float)
            // NetworkVarNames: m_tDieTime (GameTime_t)
            namespace CProjectile_Stomp_Projectile {
                constexpr std::ptrdiff_t m_vLastStompPos = 0x870; // Vector
                constexpr std::ptrdiff_t m_bFinished = 0x87C; // bool
                constexpr std::ptrdiff_t m_flWidth = 0x880; // float32
                constexpr std::ptrdiff_t m_tDieTime = 0x884; // GameTime_t
            }
            // Parent: CCitadel_Item
            // Field count: 1
            namespace CCitadel_ArmorUpgrade_SpellShield {
                constexpr std::ptrdiff_t fl_mSpellShieldBreakTime = 0xB20; // GameTime_t
            }
            // Parent: CRotButton
            // Field count: 14
            namespace CMomentaryRotButton {
                constexpr std::ptrdiff_t m_Position = 0x990; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnUnpressed = 0x9B8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFullyOpen = 0x9E0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFullyClosed = 0xA08; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnReachedPosition = 0xA30; // CEntityIOOutput
                constexpr std::ptrdiff_t m_lastUsed = 0xA58; // int32
                constexpr std::ptrdiff_t m_start = 0xA5C; // QAngle
                constexpr std::ptrdiff_t m_end = 0xA68; // QAngle
                constexpr std::ptrdiff_t m_IdealYaw = 0xA74; // float32
                constexpr std::ptrdiff_t m_sNoise = 0xA78; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bUpdateTarget = 0xA80; // bool
                constexpr std::ptrdiff_t m_direction = 0xA84; // int32
                constexpr std::ptrdiff_t m_returnSpeed = 0xA88; // float32
                constexpr std::ptrdiff_t m_flStartPosition = 0xA8C; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TeleportVData {
                constexpr std::ptrdiff_t m_SpeedBonusModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_TurretClone_VData {
                constexpr std::ptrdiff_t m_strTurretParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strSwapParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TurretSound = 0x1720; // CSoundEventName
                constexpr std::ptrdiff_t m_cameraSequenceTeleport = 0x1730; // CitadelCameraOperationsSequence_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_VandalOverflow {
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityChargedTackleVData {
                constexpr std::ptrdiff_t m_ChargePreviewParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChargePrepareModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ChargeActiveModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DragModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strHitSound = 0x1680; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SpilledBloodThinkerVData {
                constexpr std::ptrdiff_t m_SpilledBloodParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flTickRate = 0x6E8; // float32
                constexpr std::ptrdiff_t m_flHeight = 0x6EC; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Fervor {
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_AttachTarget {
                constexpr std::ptrdiff_t m_hTarget = 0xC0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vecOffset = 0xC4; // Vector
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CDestructableBuildingVData {
                constexpr std::ptrdiff_t m_iMaxHealthFinal = 0x28; // int32
                constexpr std::ptrdiff_t m_iMaxHealthGenerator = 0x2C; // int32
                constexpr std::ptrdiff_t m_ObjectiveRegen = 0x30; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BackdoorBulletResistModifier = 0x40; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CEntityComponent
            // Field count: 10
            namespace CPropDataComponent {
                constexpr std::ptrdiff_t m_flDmgModBullet = 0x10; // float32
                constexpr std::ptrdiff_t m_flDmgModClub = 0x14; // float32
                constexpr std::ptrdiff_t m_flDmgModExplosive = 0x18; // float32
                constexpr std::ptrdiff_t m_flDmgModFire = 0x1C; // float32
                constexpr std::ptrdiff_t m_iszPhysicsDamageTableName = 0x20; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszBasePropData = 0x28; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nInteractions = 0x30; // int32
                constexpr std::ptrdiff_t m_bSpawnMotionDisabled = 0x34; // bool
                constexpr std::ptrdiff_t m_nDisableTakePhysicsDamageSpawnFlag = 0x38; // int32
                constexpr std::ptrdiff_t m_nMotionDisabledSpawnFlag = 0x3C; // int32
            }
            // Parent: CRulePointEntity
            // Field count: 2
            namespace CGameText {
                constexpr std::ptrdiff_t m_iszMessage = 0x7D0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_textParms = 0x7D8; // hudtextparms_t
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierGravityLassoEnemyVData {
                constexpr std::ptrdiff_t m_LassoEffect = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Wraith_RapidFireVData {
                constexpr std::ptrdiff_t m_CastParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetBuffSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_RapidFireModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CBaseModelEntity
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_bLoop (bool)
            // NetworkVarNames: m_flFPS (float)
            // NetworkVarNames: m_hPositionKeys (HRenderTextureStrong)
            // NetworkVarNames: m_hRotationKeys (HRenderTextureStrong)
            // NetworkVarNames: m_vAnimationBoundsMin (Vector)
            // NetworkVarNames: m_vAnimationBoundsMax (Vector)
            // NetworkVarNames: m_flStartTime (float)
            // NetworkVarNames: m_flStartFrame (float)
            namespace CTextureBasedAnimatable {
                constexpr std::ptrdiff_t m_bLoop = 0x7C0; // bool
                constexpr std::ptrdiff_t m_flFPS = 0x7C4; // float32
                constexpr std::ptrdiff_t m_hPositionKeys = 0x7C8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_hRotationKeys = 0x7D0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_vAnimationBoundsMin = 0x7D8; // Vector
                constexpr std::ptrdiff_t m_vAnimationBoundsMax = 0x7E4; // Vector
                constexpr std::ptrdiff_t m_flStartTime = 0x7F0; // float32
                constexpr std::ptrdiff_t m_flStartFrame = 0x7F4; // float32
            }
            // Parent: CMarkupVolumeTagged
            // Field count: 3
            namespace CMarkupVolumeWithRef {
                constexpr std::ptrdiff_t m_bUseRef = 0x800; // bool
                constexpr std::ptrdiff_t m_vRefPos = 0x804; // Vector
                constexpr std::ptrdiff_t m_flRefDot = 0x810; // float32
            }
            // Parent: CPhysForce
            // Field count: 1
            namespace CPhysThruster {
                constexpr std::ptrdiff_t m_localOrigin = 0x548; // Vector
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityStackingDamageVData {
                constexpr std::ptrdiff_t m_StackingModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 2
            namespace CCitadel_Modifier_TechDamageProcWatcher {
                constexpr std::ptrdiff_t m_flNextProcTime = 0x168; // GameTime_t
                constexpr std::ptrdiff_t m_shotProced = 0x16C; // ShotID_t
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_Discord_AuraVData_Enemy {
                constexpr std::ptrdiff_t m_strAreaEffectEnemy = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAreaEffectFriendly = 0x728; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAreaEffectSelf = 0x808; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CBaseEntity
            // Field count: 8
            //
            // Metadata:
            // NetworkVarNames: m_iszStackName (string_t)
            // NetworkVarNames: m_iszOperatorName (string_t)
            // NetworkVarNames: m_iszOpvarName (string_t)
            // NetworkVarNames: m_vDistanceInnerMins (Vector)
            // NetworkVarNames: m_vDistanceInnerMaxs (Vector)
            // NetworkVarNames: m_vDistanceOuterMins (Vector)
            // NetworkVarNames: m_vDistanceOuterMaxs (Vector)
            // NetworkVarNames: m_nAABBDirection (int)
            namespace CCitadelSoundOpvarSetOBB {
                constexpr std::ptrdiff_t m_iszStackName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOperatorName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszOpvarName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vDistanceInnerMins = 0x500; // Vector
                constexpr std::ptrdiff_t m_vDistanceInnerMaxs = 0x50C; // Vector
                constexpr std::ptrdiff_t m_vDistanceOuterMins = 0x518; // Vector
                constexpr std::ptrdiff_t m_vDistanceOuterMaxs = 0x524; // Vector
                constexpr std::ptrdiff_t m_nAABBDirection = 0x530; // int32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_hCurrentTarget (EHANDLE)
            // NetworkVarNames: m_hLastCastTarget (EHANDLE)
            // NetworkVarNames: m_vStartPosition (Vector)
            // NetworkVarNames: m_vDeparturePosition (Vector)
            // NetworkVarNames: m_flDepartureTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flArrivalTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_bIsFirstCastCompleted (bool)
            // NetworkVarNames: m_tDoubleCastWindow (GameTime_t)
            namespace CCitadel_Ability_Nano_Pounce {
                constexpr std::ptrdiff_t m_bActive = 0xD30; // bool
                constexpr std::ptrdiff_t m_hCurrentTarget = 0xD34; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hLastCastTarget = 0xD38; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vStartPosition = 0xD3C; // Vector
                constexpr std::ptrdiff_t m_vDeparturePosition = 0xD48; // Vector
                constexpr std::ptrdiff_t m_flDepartureTime = 0xD58; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flArrivalTime = 0xD70; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_vLastKnownSafePos = 0xD88; // Vector
                constexpr std::ptrdiff_t m_bIsFirstCastCompleted = 0xD96; // bool
                constexpr std::ptrdiff_t m_tDoubleCastWindow = 0xD98; // GameTime_t
                constexpr std::ptrdiff_t m_CastStartParticle = 0xD9C; // ParticleIndex_t
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_AOERoot {
            }
            // Parent: CNPC_TrooperBossVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_TrooperBarrackBossVData {
                constexpr std::ptrdiff_t m_flBackDoorProtectionRange = 0x16D0; // float32
                constexpr std::ptrdiff_t m_BackdoorProtectionModifier = 0x16D8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BackdoorBulletResistModifier = 0x16E8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ObjectiveRegen = 0x16F8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Wrecker_UltimateGrabEnemyVData {
                constexpr std::ptrdiff_t m_EnemyHeroStasisEffect = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_EnemyHeroGrabEffect = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CServerOnlyEntity
            // Field count: 2
            namespace CLaneMarkerPath {
                constexpr std::ptrdiff_t m_iLane = 0x4E8; // int32
                constexpr std::ptrdiff_t m_iLaneSlot = 0x4EC; // int32
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 21
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_CCitadelAbilityComponent (CCitadelAbilityComponent::Storage_t)
            // NetworkVarNames: m_vecWeakPoints (WeakPoint_t)
            // NetworkVarNames: m_bDestroyed (bool)
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_bFinal (bool)
            namespace CCitadel_Destroyable_Building {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0xBC8; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_OnDestroyed = 0xBE0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnRevitilized = 0xC08; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnDamageTaken = 0xC30; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLifeChanged = 0xC58; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnBecomeActive = 0xC80; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnBecomeInvulnerable = 0xCA8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnBecomeVulnerable = 0xCD0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUnderAttack = 0xCF8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAttackSubsided = 0xD20; // CEntityIOOutput
                constexpr std::ptrdiff_t m_nBuildingHealth = 0xD48; // int32
                constexpr std::ptrdiff_t m_iLane = 0xD50; // int32
                constexpr std::ptrdiff_t m_flDestroyedTime = 0xD54; // GameTime_t
                constexpr std::ptrdiff_t m_flLastDamagedTime = 0xD58; // GameTime_t
                constexpr std::ptrdiff_t m_angOriginal = 0xD5C; // QAngle
                constexpr std::ptrdiff_t m_backdoorProtectionTrigger = 0xD80; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_CCitadelAbilityComponent = 0xD90; // CCitadelAbilityComponent
                constexpr std::ptrdiff_t m_vecWeakPoints = 0xF98; // CUtlVectorEmbeddedNetworkVar<WeakPoint_t>
                constexpr std::ptrdiff_t m_bDestroyed = 0x1000; // bool
                constexpr std::ptrdiff_t m_bActive = 0x1001; // bool
                constexpr std::ptrdiff_t m_bFinal = 0x1002; // bool
            }
            // Parent: CPhysicsProp
            // Field count: 3
            //
            // Metadata:
            // MNetworkExcludeByName
            // NetworkVarNames: m_ShardDesc (shard_model_desc_t)
            namespace CShatterGlassShardPhysics {
                constexpr std::ptrdiff_t m_bDebris = 0xDA0; // bool
                constexpr std::ptrdiff_t m_hParentShard = 0xDA4; // uint32
                constexpr std::ptrdiff_t m_ShardDesc = 0xDA8; // shard_model_desc_t
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterModel {
                constexpr std::ptrdiff_t m_iFilterModel = 0x540; // CUtlSymbolLarge
            }
            // Parent: CCitadel_BreakablePropPickupVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_BreakablePropGoldPickupVData {
                constexpr std::ptrdiff_t m_flGoldAmount = 0x330; // float32
                constexpr std::ptrdiff_t m_flGoldPerMinuteAmount = 0x334; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Synth_Barrage_Amp {
            }
            // Parent: CitadelAbilityVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHornetLeapVData {
                constexpr std::ptrdiff_t m_flChannelingAirDrag = 0x1560; // float32
                constexpr std::ptrdiff_t m_flChannelingMaxFallSpeed = 0x1564; // float32
                constexpr std::ptrdiff_t m_flVerticalMoveSpeedPercent = 0x1568; // float32
                constexpr std::ptrdiff_t m_flAirDrag = 0x156C; // float32
                constexpr std::ptrdiff_t m_flAirAcceleration = 0x1570; // float32
                constexpr std::ptrdiff_t m_flLaunchAirDrag = 0x1574; // float32
                constexpr std::ptrdiff_t m_flLaunchTime = 0x1578; // float32
                constexpr std::ptrdiff_t m_flMoveSpeedAboveBaseScale = 0x157C; // float32
                constexpr std::ptrdiff_t m_LeapModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DustParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TrailParticle = 0x1670; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1750; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_AOE_Tech_ShieldVData {
                constexpr std::ptrdiff_t m_DurationModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CBaseAnimGraph
            // Field count: 6
            namespace CCitadel_FissureWall {
                constexpr std::ptrdiff_t m_vStartPos = 0xA48; // Vector
                constexpr std::ptrdiff_t m_vEndPos = 0xA54; // Vector
                constexpr std::ptrdiff_t m_flStartEmitTime = 0xA60; // GameTime_t
                constexpr std::ptrdiff_t m_flEndEmitTime = 0xA64; // GameTime_t
                constexpr std::ptrdiff_t m_bSolid = 0xA68; // bool
                constexpr std::ptrdiff_t m_nTouchCount = 0xA6C; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Thumper_Bullet_Watcher {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Protection_Racket {
            }
            // Parent: CCitadelBaseYamatoAbility
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_flExplodeEndTime (GameTime_t)
            // NetworkVarNames: m_flBuffEndTime (GameTime_t)
            namespace CCitadel_Ability_InfinitySlash {
                constexpr std::ptrdiff_t m_flExplodeEndTime = 0xBE8; // GameTime_t
                constexpr std::ptrdiff_t m_flBuffEndTime = 0xBEC; // GameTime_t
                constexpr std::ptrdiff_t m_nCastEffect = 0xBF0; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadelModifierProjectilePitchingLoopSoundThinker {
            }
            // Parent: CEntitySubclassVDataBase
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_HeroTestOrbSpawnerVData {
                constexpr std::ptrdiff_t m_iGoldValue = 0x28; // int32
                constexpr std::ptrdiff_t m_flSpawnRate = 0x2C; // float32
                constexpr std::ptrdiff_t m_flFirstSpawnTime = 0x30; // float32
                constexpr std::ptrdiff_t m_hModel = 0x38; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_flModelScale = 0x118; // float32
                constexpr std::ptrdiff_t m_flSpawnOffset = 0x11C; // float32
                constexpr std::ptrdiff_t m_AmbientParticle = 0x120; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SpawnParticle = 0x200; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CPhysicsProp
            // Field count: 2
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_eLootType (int)
            namespace CItemCrate {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0xDA0; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_eLootType = 0xDCC; // int32
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Tokamak_EnemySmokeAOE {
            }
            // Parent: CCitadelPlayerController
            // Field count: 0
            namespace CCitadelPreviewPlayerController {
            }
            // Parent: CAI_CitadelNPCVData
            // Field count: 41
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_Boss_Tier3VData {
                constexpr std::ptrdiff_t m_nPhase2Health = 0xFB0; // int32
                constexpr std::ptrdiff_t m_flEyeZOffset = 0xFB4; // float32
                constexpr std::ptrdiff_t m_flDefaultMoveSpeed = 0xFB8; // float32
                constexpr std::ptrdiff_t m_flNoShieldMoveSpeed = 0xFBC; // float32
                constexpr std::ptrdiff_t m_flDyingMoveSpeed = 0xFC0; // float32
                constexpr std::ptrdiff_t m_flMovingToFinalPositionSpeed = 0xFC4; // float32
                constexpr std::ptrdiff_t m_DeathSmallExplosionParticle = 0xFC8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DeathLargeExplosionParticle = 0x10A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WeakpointBrokenExplosionParticle = 0x1188; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChargeUpExplosionParticle = 0x1268; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strWIPModelName = 0x1348; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_DyingSmallExplosion = 0x1428; // CSoundEventName
                constexpr std::ptrdiff_t m_AvatarKilledSound = 0x1438; // CSoundEventName
                constexpr std::ptrdiff_t m_AvatarBecomePatronSound = 0x1448; // CSoundEventName
                constexpr std::ptrdiff_t m_PatronLandedSound = 0x1458; // CSoundEventName
                constexpr std::ptrdiff_t m_PatronKilledSound = 0x1468; // CSoundEventName
                constexpr std::ptrdiff_t m_LaserSound = 0x1478; // CSoundEventName
                constexpr std::ptrdiff_t m_LaserBeamModifier = 0x1488; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_DyingModifier = 0x1498; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_VulnerableModifier = 0x14A8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_Phase1Modifier = 0x14B8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_Phase2Modifier = 0x14C8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_BackdoorProtection = 0x14D8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ObjectiveRegen = 0x14E8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_LaserChargingParticle = 0x14F8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LaserBeamEffect = 0x15D8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LaserPreviewEffect = 0x16B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LaserDamageEffect = 0x1798; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flLaserTargetingZOffset = 0x1878; // float32
                constexpr std::ptrdiff_t m_flLaserTrackingSpeed = 0x187C; // float32
                constexpr std::ptrdiff_t m_flLaserTrackingMaxSpeed = 0x1880; // float32
                constexpr std::ptrdiff_t m_flLaserCastingTrackSpeed = 0x1884; // float32
                constexpr std::ptrdiff_t m_flLaserCastingTrackMaxSpeed = 0x1888; // float32
                constexpr std::ptrdiff_t m_flLaserDPSToPlayers = 0x188C; // float32
                constexpr std::ptrdiff_t m_flLaserDPSToNPCs = 0x1890; // float32
                constexpr std::ptrdiff_t m_flNoShieldLaserTrackingSpeed = 0x1894; // float32
                constexpr std::ptrdiff_t m_flNoShieldLaserTrackingMaxSpeed = 0x1898; // float32
                constexpr std::ptrdiff_t m_flNoShieldLaserCastingTrackSpeed = 0x189C; // float32
                constexpr std::ptrdiff_t m_flNoShieldLaserCastingTrackMaxSpeed = 0x18A0; // float32
                constexpr std::ptrdiff_t m_flNoShieldLaserDPSToPlayers = 0x18A4; // float32
                constexpr std::ptrdiff_t m_flNoShieldLaserDPSToNPCs = 0x18A8; // float32
            }
            // Parent: CPointEntity
            // Field count: 9
            namespace CPathTrack {
                constexpr std::ptrdiff_t m_pnext = 0x4E8; // CPathTrack*
                constexpr std::ptrdiff_t m_pprevious = 0x4F0; // CPathTrack*
                constexpr std::ptrdiff_t m_paltpath = 0x4F8; // CPathTrack*
                constexpr std::ptrdiff_t m_flRadius = 0x500; // float32
                constexpr std::ptrdiff_t m_length = 0x504; // float32
                constexpr std::ptrdiff_t m_altName = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nIterVal = 0x510; // int32
                constexpr std::ptrdiff_t m_eOrientationType = 0x514; // TrackOrientationType_t
                constexpr std::ptrdiff_t m_OnPass = 0x518; // CEntityIOOutput
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Hornet_Chain {
                constexpr std::ptrdiff_t m_vLaunchPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_qLaunchAngle = 0xB0C; // QAngle
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItemSingleTargetStunVData {
                constexpr std::ptrdiff_t m_StunDelayModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CastParticle = 0x15B8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadel_Item_TrackingProjectileApplyModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CItem_WitheringWhip_VData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x16A8; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CLogicalEntity
            // Field count: 7
            namespace CLogicDistanceCheck {
                constexpr std::ptrdiff_t m_iszEntityA = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszEntityB = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flZone1Distance = 0x4F8; // float32
                constexpr std::ptrdiff_t m_flZone2Distance = 0x4FC; // float32
                constexpr std::ptrdiff_t m_InZone1 = 0x500; // CEntityIOOutput
                constexpr std::ptrdiff_t m_InZone2 = 0x528; // CEntityIOOutput
                constexpr std::ptrdiff_t m_InZone3 = 0x550; // CEntityIOOutput
            }
            // Parent: CBarnLight
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_flInnerAngle (float)
            // NetworkVarNames: m_flOuterAngle (float)
            // NetworkVarNames: m_bShowLight (bool)
            namespace COmniLight {
                constexpr std::ptrdiff_t m_flInnerAngle = 0xAE0; // float32
                constexpr std::ptrdiff_t m_flOuterAngle = 0xAE4; // float32
                constexpr std::ptrdiff_t m_bShowLight = 0xAE8; // bool
            }
            // Parent: CPointEntity
            // Field count: 10
            //
            // Metadata:
            // NetworkVarNames: m_bDisabled (bool)
            // NetworkVarNames: m_nResolutionX (int)
            // NetworkVarNames: m_nResolutionY (int)
            // NetworkVarNames: m_szLayoutFileName (string_t)
            // NetworkVarNames: m_RenderAttrName (string_t)
            // NetworkVarNames: m_TargetEntities (CHandle<CBaseModelEntity>)
            // NetworkVarNames: m_nTargetChangeCount (int)
            // NetworkVarNames: m_vecCSSClasses (string_t)
            namespace CInfoOffscreenPanoramaTexture {
                constexpr std::ptrdiff_t m_bDisabled = 0x4E8; // bool
                constexpr std::ptrdiff_t m_nResolutionX = 0x4EC; // int32
                constexpr std::ptrdiff_t m_nResolutionY = 0x4F0; // int32
                constexpr std::ptrdiff_t m_szLayoutFileName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_RenderAttrName = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_TargetEntities = 0x508; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                constexpr std::ptrdiff_t m_nTargetChangeCount = 0x520; // int32
                constexpr std::ptrdiff_t m_vecCSSClasses = 0x528; // CNetworkUtlVectorBase<CUtlSymbolLarge>
                constexpr std::ptrdiff_t m_szTargetsName = 0x540; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_AdditionalTargetEntities = 0x548; // CUtlVector<CHandle<CBaseModelEntity>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_ViperHookblade {
                constexpr std::ptrdiff_t m_vecOutgoingHitList = 0xB00; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vecReturningHitList = 0xB18; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_ShieldGuy_Ability04 {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Nano_Shadow {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Bull_Leap_BoostingVData {
                constexpr std::ptrdiff_t m_BoostTrailParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_CloakingDeviceActive_VData {
                constexpr std::ptrdiff_t m_AmbushModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_InvisModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_TeamRelativeParticle {
                constexpr std::ptrdiff_t m_nParentViewParticle = 0xC0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nOtherPlayerViewParticle = 0xC4; // ParticleIndex_t
            }
            // Parent: CBaseEntity
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_nMode (int)
            // NetworkVarNames: m_vBoxSize (Vector)
            // NetworkVarNames: m_bEnabled (bool)
            namespace CInfoVisibilityBox {
                constexpr std::ptrdiff_t m_nMode = 0x4EC; // int32
                constexpr std::ptrdiff_t m_vBoxSize = 0x4F0; // Vector
                constexpr std::ptrdiff_t m_bEnabled = 0x4FC; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Rutger_CheatDeath_Activated {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Warden_HighAlert {
            }
            // Parent: CitadelAbilityVData
            // Field count: 24
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityGuidedArrowVData {
                constexpr std::ptrdiff_t m_cameraCancelledTransitionBacktoArcher = 0x1560; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_cameraExplodedTransitionBackToArcher = 0x15E8; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_flCameraHoldAtExplosion = 0x1670; // float32
                constexpr std::ptrdiff_t m_flFadeToBlackTime = 0x1674; // float32
                constexpr std::ptrdiff_t m_SpectatingProjectileParticle = 0x1678; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1758; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_GuidedArrowChannelParticle = 0x1838; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ProjectileModel = 0x1918; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_ArrowOffsetX = 0x19F8; // float32
                constexpr std::ptrdiff_t m_ArrowCameraDistance = 0x19FC; // float32
                constexpr std::ptrdiff_t m_ArrowCameraHeightOffset = 0x1A00; // float32
                constexpr std::ptrdiff_t m_ArrowInitialPitch = 0x1A04; // float32
                constexpr std::ptrdiff_t m_GuidingModifier = 0x1A08; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1A18; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_KillCheckModifier = 0x1A28; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1A38; // CSoundEventName
                constexpr std::ptrdiff_t m_flTrackAmount = 0x1A48; // float32
                constexpr std::ptrdiff_t m_flSpeedAccel = 0x1A4C; // float32
                constexpr std::ptrdiff_t m_flSpeedDeccel = 0x1A50; // float32
                constexpr std::ptrdiff_t m_flBaseProjectileSpeed = 0x1A54; // float32
                constexpr std::ptrdiff_t m_flMaxProjectileSpeed = 0x1A58; // float32
                constexpr std::ptrdiff_t m_flArrowModelTurnSpringStrength = 0x1A5C; // float32
                constexpr std::ptrdiff_t m_flKillCheckWindow = 0x1A60; // float32
                constexpr std::ptrdiff_t m_flWorldCollideGraceWindow = 0x1A64; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityPowerJumpVData {
                constexpr std::ptrdiff_t m_JumpParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_InAirModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PowerJumpModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Item
            // Field count: 2
            namespace CCitadel_ArmorUpgrade_PersonalRejuvenator {
                constexpr std::ptrdiff_t m_bActivated = 0xB20; // bool
                constexpr std::ptrdiff_t m_nFxIndex = 0xB24; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_PayloadPusherAuraTarget {
            }
            // Parent: CRulePointEntity
            // Field count: 0
            namespace CGamePlayerEquip {
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 0
            namespace CInfoTargetServerOnly {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Tokamak_Radiance {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierCadenceGunSpikesVData {
                constexpr std::ptrdiff_t m_strSmallIconCssClassMax = 0x608; // CUtlString
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_GrandFinale_BuffVData {
                constexpr std::ptrdiff_t m_BuildUpModifier = 0x608; // CEmbeddedSubclass<CCitadel_Modifier_Base_Buildup>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x618; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeSound = 0x6F8; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Cadence_AnthemBuffVData {
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelYamatoBaseVData {
                constexpr std::ptrdiff_t m_flShadowFormSpeed = 0x1560; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TangoTether_TetherReceiverVData {
                constexpr std::ptrdiff_t m_strAttackBuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TetherSound = 0x6E8; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_WreckerSalvageVData {
                constexpr std::ptrdiff_t m_SalvageBeam = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ConnectBeam = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_hProjectile (CHandle<CCitadelProjectile>)
            namespace CCitadel_Ability_HatTrick {
                constexpr std::ptrdiff_t m_hProjectile = 0xB00; // CHandle<CCitadelProjectile>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Ricochet_ProcVData {
                constexpr std::ptrdiff_t m_RicochetTracerParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelBaseAbilityServerOnly
            // Field count: 0
            namespace CCitadel_Ability_Weapon_BossTier2 {
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_Invis {
                constexpr std::ptrdiff_t m_bInvis = 0x248; // bool
                constexpr std::ptrdiff_t m_flStartInvisTime = 0x24C; // GameTime_t
                constexpr std::ptrdiff_t m_bFullyInvis = 0x250; // bool
                constexpr std::ptrdiff_t m_flLastDamageTaken = 0x254; // GameTime_t
                constexpr std::ptrdiff_t m_flLastSpotted = 0x258; // GameTime_t
            }
            // Parent: CSoundOpvarSetPointEntity
            // Field count: 3
            namespace CSoundOpvarSetPathCornerEntity {
                constexpr std::ptrdiff_t m_flDistMinSqr = 0x688; // float32
                constexpr std::ptrdiff_t m_flDistMaxSqr = 0x68C; // float32
                constexpr std::ptrdiff_t m_iszPathCornerEntityName = 0x690; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Field count: 0
            namespace CInfoAbilityTestBot {
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Mirage_SandPhantom_VData {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Mirage_Tornado_Caster {
            }
            // Parent: CCitadel_Modifier_Sleep
            // Field count: 0
            namespace CCitadel_Modifier_SleepBomb_Asleep {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Lockdown_BulletResist {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_WreckerUltimate_Invincible {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Lash {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_BloodBombVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SpilledBloodModifier = 0x1640; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strBloodSpillStatName = 0x1650; // CUtlString
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_LongRangeSlowingTech_Proc {
            }
            // Parent: CLogicalEntity
            // Field count: 8
            namespace CTestInputOutputCombinations {
                constexpr std::ptrdiff_t m_OnVariantVoid = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVariantBool = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVariantInt = 0x538; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVariantFloat = 0x560; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVariantString = 0x588; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVariantColor = 0x5B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnVariantVector = 0x5D8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bAllowEmptyInputs = 0x600; // bool
            }
            // Parent: CBaseEntity
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_hEntAttached (CHandle<CBaseEntity>)
            // NetworkVarNames: m_bCheapEffect (bool)
            namespace CEntityFlame {
                constexpr std::ptrdiff_t m_hEntAttached = 0x4E8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bCheapEffect = 0x4EC; // bool
                constexpr std::ptrdiff_t m_flSize = 0x4F0; // float32
                constexpr std::ptrdiff_t m_bUseHitboxes = 0x4F4; // bool
                constexpr std::ptrdiff_t m_iNumHitboxFires = 0x4F8; // int32
                constexpr std::ptrdiff_t m_flHitboxFireScale = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flLifetime = 0x500; // GameTime_t
                constexpr std::ptrdiff_t m_hAttacker = 0x504; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_iDangerSound = 0x508; // int32
                constexpr std::ptrdiff_t m_flDirectDamagePerSecond = 0x50C; // float32
                constexpr std::ptrdiff_t m_iCustomDamageType = 0x510; // int32
            }
            // Parent: CLightEntity
            // Field count: 0
            namespace CLightCapsuleEntity {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CGameModifier_FireConCommandVData {
                constexpr std::ptrdiff_t m_FireOnAdded = 0x608; // CUtlString
                constexpr std::ptrdiff_t m_FireOnRemoved = 0x610; // CUtlString
            }
            // Parent: CCitadelModifierVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Mirage_SandPhantom_WhirlwindEvasion_VData {
                constexpr std::ptrdiff_t m_AttackerHitFx = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_playerBuffSelf = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_playerBuffEnemy = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ReflectedBulletTracerParticle = 0x988; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAttackerHitSound = 0xA68; // CSoundEventName
                constexpr std::ptrdiff_t m_strVictimHitSound = 0xA78; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_SilenceContraptionsDebuff {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Spinning_Blade {
                constexpr std::ptrdiff_t m_vecOutgoingHits = 0xCF8; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_hActiveProjectile = 0xD10; // CHandle<CCitadelProjectile>
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierAirLiftExplodeTargetVData {
                constexpr std::ptrdiff_t m_strSilenceTargetSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_SilenceModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x628; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BulletResistModifier = 0x638; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_DeathTax {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_StaticCharge {
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_DebuffReducerVData {
                constexpr std::ptrdiff_t m_DebuffReducedParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PurgeCastParticle = 0x1688; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_MoveSpeedModifier = 0x1768; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CScaleFunctionBase
            // Field count: 0
            namespace CScaleFunctionAbilityProperty_TechDamage {
            }
            // Parent: None
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_nameStringableIndex (int32)
            namespace CEntityIdentity {
                constexpr std::ptrdiff_t m_nameStringableIndex = 0x14; // int32
                constexpr std::ptrdiff_t m_name = 0x18; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_designerName = 0x20; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flags = 0x30; // uint32
                constexpr std::ptrdiff_t m_worldGroupId = 0x38; // WorldGroupId_t
                constexpr std::ptrdiff_t m_fDataObjectTypes = 0x3C; // uint32
                constexpr std::ptrdiff_t m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
                constexpr std::ptrdiff_t m_pPrev = 0x58; // CEntityIdentity*
                constexpr std::ptrdiff_t m_pNext = 0x60; // CEntityIdentity*
                constexpr std::ptrdiff_t m_pPrevByClass = 0x68; // CEntityIdentity*
                constexpr std::ptrdiff_t m_pNextByClass = 0x70; // CEntityIdentity*
            }
            // Parent: CBaseToggle
            // Field count: 3
            namespace CGunTarget {
                constexpr std::ptrdiff_t m_on = 0x840; // bool
                constexpr std::ptrdiff_t m_hTargetEnt = 0x844; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_OnDeath = 0x848; // CEntityIOOutput
            }
            // Parent: CCitadelProjectile
            // Field count: 0
            namespace CProjectile_Synth_Barrage {
            }
            // Parent: CCitadelBaseLockonAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_EGrappleState (ELashGrappleState)
            // NetworkVarNames: m_flStateEnterTime (GameTime_t)
            // NetworkVarNames: m_flNextStateTime (GameTime_t)
            // NetworkVarNames: m_flBoostEndTime (GameTime_t)
            namespace CCitadel_Ability_Lash_Ultimate {
                constexpr std::ptrdiff_t m_EGrappleState = 0xC88; // ELashGrappleState
                constexpr std::ptrdiff_t m_flStateEnterTime = 0xC8C; // GameTime_t
                constexpr std::ptrdiff_t m_flNextStateTime = 0xC90; // GameTime_t
                constexpr std::ptrdiff_t m_flBoostEndTime = 0xC94; // GameTime_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierItemPickupTimerVData {
                constexpr std::ptrdiff_t m_TimerToSilence = 0x608; // float32
                constexpr std::ptrdiff_t m_SilenceDuration = 0x60C; // float32
                constexpr std::ptrdiff_t m_SilenceModifier = 0x610; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_bIsIdolPickup = 0x620; // bool
            }
            // Parent: CBaseEntity
            // Field count: 2
            namespace CSoundEventParameter {
                constexpr std::ptrdiff_t m_iszParamName = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flFloatValue = 0x4F8; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Rutger_Pulse_VData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityThumper1VData {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Uppercut_Buff {
            }
            // Parent: CitadelAbilityVData
            // Field count: 37
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityViscousBowlingVData {
                constexpr std::ptrdiff_t m_TransformStartFx = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplodeFX = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_WallImpactFx = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BallTrailFx = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_GroundImpactParticle = 0x18E0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_JumpParticle = 0x19C0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DirectionParticle = 0x1AA0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flVerticalCameraOffsetLerpTime = 0x1B80; // float32
                constexpr std::ptrdiff_t m_flVerticalCameraOffsetBias = 0x1B84; // float32
                constexpr std::ptrdiff_t m_flVerticalCameraOffset = 0x1B88; // float32
                constexpr std::ptrdiff_t m_flDistanceCameraOffsetLerpTime = 0x1B8C; // float32
                constexpr std::ptrdiff_t m_flDistanceCameraOffsetBias = 0x1B90; // float32
                constexpr std::ptrdiff_t m_flDistanceCameraOffset = 0x1B94; // float32
                constexpr std::ptrdiff_t m_strPopGraphParamter = 0x1B98; // CGlobalSymbol
                constexpr std::ptrdiff_t m_BallJumpSound = 0x1BA0; // CSoundEventName
                constexpr std::ptrdiff_t m_EnterBallSound = 0x1BB0; // CSoundEventName
                constexpr std::ptrdiff_t m_BallLoopSound = 0x1BC0; // CSoundEventName
                constexpr std::ptrdiff_t m_ExitBallSound = 0x1BD0; // CSoundEventName
                constexpr std::ptrdiff_t m_WallImpactSound = 0x1BE0; // CSoundEventName
                constexpr std::ptrdiff_t m_PlayerImpactSound = 0x1BF0; // CSoundEventName
                constexpr std::ptrdiff_t m_ImpactModifier = 0x1C00; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DamagePreventionModifier = 0x1C10; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_RollingModifier = 0x1C20; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flTransformToBallTime = 0x1C30; // float32
                constexpr std::ptrdiff_t m_flTransformFromBallTime = 0x1C34; // float32
                constexpr std::ptrdiff_t m_flAirTurnRatio = 0x1C38; // float32
                constexpr std::ptrdiff_t m_flWallTurnRatioMax = 0x1C3C; // float32
                constexpr std::ptrdiff_t m_flWallTurnRatioMin = 0x1C40; // float32
                constexpr std::ptrdiff_t m_flTurnRatio = 0x1C44; // float32
                constexpr std::ptrdiff_t m_flDefaultBallSpeed = 0x1C48; // float32
                constexpr std::ptrdiff_t m_flFastBallSpeed = 0x1C4C; // float32
                constexpr std::ptrdiff_t m_flSpeedAccel = 0x1C50; // float32
                constexpr std::ptrdiff_t m_flSpeedDeccel = 0x1C54; // float32
                constexpr std::ptrdiff_t m_flElasticity = 0x1C58; // float32
                constexpr std::ptrdiff_t m_flWallCheckGroundOffset = 0x1C5C; // float32
                constexpr std::ptrdiff_t m_flWallPauseTime = 0x1C60; // float32
                constexpr std::ptrdiff_t m_flWallAngleMin = 0x1C64; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Nearby_Enemy_Boost {
            }
            // Parent: CCitadelModifierVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Base_BuildupVData {
                constexpr std::ptrdiff_t m_bUseBaseWeaponCycleTimeForDelay = 0x608; // bool
                constexpr std::ptrdiff_t m_flCycleTimeDelayAdd = 0x60C; // float32
                constexpr std::ptrdiff_t m_flBuildUpDecayDelay = 0x610; // float32
                constexpr std::ptrdiff_t m_eBuildupMode = 0x614; // BuildupMode_t
                constexpr std::ptrdiff_t m_bBuildupAffectedByEffectiveness = 0x618; // bool
                constexpr std::ptrdiff_t m_bPassBuildupEffectivenessToFillModifier = 0x619; // bool
            }
            // Parent: CCitadelItemPickup
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelAbilityComponent (CCitadelAbilityComponent::Storage_t)
            // NetworkVarNames: m_bPickedUp (bool)
            namespace CCitadelItemPickupRejuv {
                constexpr std::ptrdiff_t m_CCitadelAbilityComponent = 0x64D0; // CCitadelAbilityComponent
                constexpr std::ptrdiff_t m_bPickedUp = 0x66DC; // bool
            }
            // Parent: CMarkupVolume
            // Field count: 7
            namespace CMarkupVolumeTagged {
                constexpr std::ptrdiff_t m_GroupNames = 0x7C8; // CUtlVector<CGlobalSymbol>
                constexpr std::ptrdiff_t m_Tags = 0x7E0; // CUtlVector<CGlobalSymbol>
                constexpr std::ptrdiff_t m_bIsGroup = 0x7F8; // bool
                constexpr std::ptrdiff_t m_bGroupByPrefab = 0x7F9; // bool
                constexpr std::ptrdiff_t m_bGroupByVolume = 0x7FA; // bool
                constexpr std::ptrdiff_t m_bGroupOtherGroups = 0x7FB; // bool
                constexpr std::ptrdiff_t m_bIsInGroup = 0x7FC; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ZiplineBoostVData {
                constexpr std::ptrdiff_t m_flRampUpTime = 0x608; // float32
                constexpr std::ptrdiff_t m_flPercentageSpeedIncrease = 0x60C; // float32
                constexpr std::ptrdiff_t m_cameraSequenceStartBoost = 0x610; // CitadelCameraOperationsSequence_t
            }
            // Parent: CCitadelModelEntity
            // Field count: 1
            namespace CCitadelViscousBall {
                constexpr std::ptrdiff_t m_hAbility = 0x940; // CHandle<CCitadelBaseAbility>
            }
            // Parent: CBaseEntity
            // Field count: 5
            namespace CTestEffect {
                constexpr std::ptrdiff_t m_iLoop = 0x4E8; // int32
                constexpr std::ptrdiff_t m_iBeam = 0x4EC; // int32
                constexpr std::ptrdiff_t m_pBeam = 0x4F0; // CBeam*[24]
                constexpr std::ptrdiff_t m_flBeamTime = 0x5B0; // GameTime_t[24]
                constexpr std::ptrdiff_t m_flStartTime = 0x610; // GameTime_t
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_LashGrappleTarget {
                constexpr std::ptrdiff_t m_nActiveRopeFX = 0xC0; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Snipe_Glow {
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_TechOverflowProcWatcher {
            }
            // Parent: CFuncNavBlocker
            // Field count: 1
            namespace CScriptNavBlocker {
                constexpr std::ptrdiff_t m_vExtent = 0x7D0; // Vector
            }
            // Parent: CBaseAnimGraph
            // Field count: 1
            namespace CConstraintAnchor {
                constexpr std::ptrdiff_t m_massScale = 0xA48; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Drone_Tracker {
                constexpr std::ptrdiff_t m_hDrone = 0xC0; // CHandle<CNPC_FlyingDrone>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Tokamak_HeatSinks {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_bFlying (bool)
            // NetworkVarNames: m_bFlyingStarted (bool)
            // NetworkVarNames: m_bIsGrabbing (bool)
            // NetworkVarNames: m_bIsHoldingBomb (bool)
            // NetworkVarNames: m_flCurrentSpeed (float)
            namespace CCitadel_Ability_Tengu_AirLift {
                constexpr std::ptrdiff_t m_nHoldBombEffect = 0xB1C; // ParticleIndex_t
                constexpr std::ptrdiff_t m_bFlying = 0xD18; // bool
                constexpr std::ptrdiff_t m_bFlyingStarted = 0xD19; // bool
                constexpr std::ptrdiff_t m_bIsGrabbing = 0xD1A; // bool
                constexpr std::ptrdiff_t m_bIsHoldingBomb = 0xD1B; // bool
                constexpr std::ptrdiff_t m_flCurrentSpeed = 0xD1C; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Nikuman {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityChronoSwapVData {
                constexpr std::ptrdiff_t m_BubbleMoveModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strSwapStarted = 0x1570; // CSoundEventName
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Frenzy_MoveSpeed {
                constexpr std::ptrdiff_t m_flMoveSpeedPerStack = 0xC0; // float32
            }
            // Parent: CBaseEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flCameraDist (float)
            // NetworkVarNames: m_flCameraPitch (float)
            // NetworkVarNames: m_flCameraHeight (float)
            // NetworkVarNames: m_hTarget (EHANDLE)
            namespace CCitadelSpectateDirectedCamera {
                constexpr std::ptrdiff_t m_flCameraDist = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flCameraPitch = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flCameraHeight = 0x4F4; // float32
                constexpr std::ptrdiff_t m_hTarget = 0x4F8; // CHandle<CBaseEntity>
            }
            // Parent: CMarkupVolumeTagged
            // Field count: 0
            namespace CMarkupVolumeTagged_Nav {
            }
            // Parent: CPointEntity
            // Field count: 66
            //
            // Metadata:
            // NetworkVarNames: m_bIsPlayingBack (bool)
            // NetworkVarNames: m_bPaused (bool)
            // NetworkVarNames: m_bMultiplayer (bool)
            // NetworkVarNames: m_bAutogenerated (bool)
            // NetworkVarNames: m_flForceClientTime (float32)
            // NetworkVarNames: m_hActorList (CHandle<CBaseFlex>)
            // NetworkVarNames: m_nSceneStringIndex (uint16)
            namespace CSceneEntity {
                constexpr std::ptrdiff_t m_iszSceneFile = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszResumeSceneFile = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget1 = 0x500; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget2 = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget3 = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget4 = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget5 = 0x520; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget6 = 0x528; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget7 = 0x530; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszTarget8 = 0x538; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hTarget1 = 0x540; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget2 = 0x544; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget3 = 0x548; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget4 = 0x54C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget5 = 0x550; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget6 = 0x554; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget7 = 0x558; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget8 = 0x55C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_sTargetAttachment = 0x560; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bIsPlayingBack = 0x568; // bool
                constexpr std::ptrdiff_t m_bPaused = 0x569; // bool
                constexpr std::ptrdiff_t m_bMultiplayer = 0x56A; // bool
                constexpr std::ptrdiff_t m_bAutogenerated = 0x56B; // bool
                constexpr std::ptrdiff_t m_flForceClientTime = 0x56C; // float32
                constexpr std::ptrdiff_t m_flCurrentTime = 0x570; // float32
                constexpr std::ptrdiff_t m_flFrameTime = 0x574; // float32
                constexpr std::ptrdiff_t m_bCancelAtNextInterrupt = 0x578; // bool
                constexpr std::ptrdiff_t m_fPitch = 0x57C; // float32
                constexpr std::ptrdiff_t m_bAutomated = 0x580; // bool
                constexpr std::ptrdiff_t m_nAutomatedAction = 0x584; // int32
                constexpr std::ptrdiff_t m_flAutomationDelay = 0x588; // float32
                constexpr std::ptrdiff_t m_flAutomationTime = 0x58C; // float32
                constexpr std::ptrdiff_t m_hWaitingForThisResumeScene = 0x590; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bWaitingForResumeScene = 0x594; // bool
                constexpr std::ptrdiff_t m_bPausedViaInput = 0x595; // bool
                constexpr std::ptrdiff_t m_bPauseAtNextInterrupt = 0x596; // bool
                constexpr std::ptrdiff_t m_bWaitingForActor = 0x597; // bool
                constexpr std::ptrdiff_t m_bWaitingForInterrupt = 0x598; // bool
                constexpr std::ptrdiff_t m_bInterruptedActorsScenes = 0x599; // bool
                constexpr std::ptrdiff_t m_bBreakOnNonIdle = 0x59A; // bool
                constexpr std::ptrdiff_t m_bSceneFinished = 0x59B; // bool
                constexpr std::ptrdiff_t m_hActorList = 0x5A0; // CNetworkUtlVectorBase<CHandle<CBaseFlex>>
                constexpr std::ptrdiff_t m_hRemoveActorList = 0x5B8; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nSceneFlushCounter = 0x600; // int32
                constexpr std::ptrdiff_t m_nSceneStringIndex = 0x604; // uint16
                constexpr std::ptrdiff_t m_OnStart = 0x608; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnCompletion = 0x630; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnCanceled = 0x658; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnPaused = 0x680; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnResumed = 0x6A8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnTrigger = 0x6D0; // CEntityIOOutput[16]
                constexpr std::ptrdiff_t m_hInterruptScene = 0x9E0; // CHandle<CSceneEntity>
                constexpr std::ptrdiff_t m_nInterruptCount = 0x9E4; // int32
                constexpr std::ptrdiff_t m_bSceneMissing = 0x9E8; // bool
                constexpr std::ptrdiff_t m_bInterrupted = 0x9E9; // bool
                constexpr std::ptrdiff_t m_bCompletedEarly = 0x9EA; // bool
                constexpr std::ptrdiff_t m_bInterruptSceneFinished = 0x9EB; // bool
                constexpr std::ptrdiff_t m_bRestoring = 0x9EC; // bool
                constexpr std::ptrdiff_t m_hNotifySceneCompletion = 0x9F0; // CUtlVector<CHandle<CSceneEntity>>
                constexpr std::ptrdiff_t m_hListManagers = 0xA08; // CUtlVector<CHandle<CSceneListManager>>
                constexpr std::ptrdiff_t m_iszSoundName = 0xA20; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iszSequenceName = 0xA28; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hActor = 0xA30; // CHandle<CBaseFlex>
                constexpr std::ptrdiff_t m_hActivator = 0xA34; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_BusyActor = 0xA38; // int32
                constexpr std::ptrdiff_t m_iPlayerDeathBehavior = 0xA3C; // SceneOnPlayerDeath_t
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 1
            namespace CInfoTrooperSpawn {
                constexpr std::ptrdiff_t m_iLane = 0x4E8; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityExplosiveBarrelVData {
                constexpr std::ptrdiff_t m_BarrelExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_MirvExplodeParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BarrelBurnParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1800; // CSoundEventName
                constexpr std::ptrdiff_t m_strMirvExplodeSound = 0x1810; // CSoundEventName
                constexpr std::ptrdiff_t m_strRiccochetSound = 0x1820; // CSoundEventName
                constexpr std::ptrdiff_t m_strBarrelSoundLp = 0x1830; // CSoundEventName
                constexpr std::ptrdiff_t m_strBarrelLaunchSound = 0x1840; // CSoundEventName
                constexpr std::ptrdiff_t m_strBarrelMeleedSound = 0x1850; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_MobileResupplyVData {
                constexpr std::ptrdiff_t m_flResupplyForceScale = 0x1560; // float32
                constexpr std::ptrdiff_t m_flResupplyUp = 0x1564; // float32
                constexpr std::ptrdiff_t m_strKilledSound = 0x1568; // CSoundEventName
                constexpr std::ptrdiff_t m_AuraModifier = 0x1578; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_DispenserModel = 0x1588; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_SprayParticle = 0x1668; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DestroyedParticle = 0x1748; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Fervor_VData {
                constexpr std::ptrdiff_t m_FervorParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BonusesModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseShield
            // Field count: 0
            namespace CCitadel_Modifier_RegeneratingBulletShield {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_WeaponPowerForHealth {
                constexpr std::ptrdiff_t m_flHealthDrained = 0xC0; // float32
            }
            // Parent: CLightDirectionalEntity
            // Field count: 0
            namespace CLightEnvironmentEntity {
            }
            // Parent: CPointEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            namespace CInfoTrooperNeutralCamp {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x4E8; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_iszCampName = 0x518; // CUtlSymbolLarge
            }
            // Parent: CCitadel_Item_Bubble
            // Field count: 0
            namespace CCitadel_Item_Stasis_Bomb {
            }
            // Parent: CLogicAutosave
            // Field count: 4
            namespace CLogicActiveAutosave {
                constexpr std::ptrdiff_t m_TriggerHitPoints = 0x4F8; // int32
                constexpr std::ptrdiff_t m_flTimeToTrigger = 0x4FC; // float32
                constexpr std::ptrdiff_t m_flStartTime = 0x500; // GameTime_t
                constexpr std::ptrdiff_t m_flDangerousTime = 0x504; // float32
            }
            // Parent: CBaseEntity
            // Field count: 2
            namespace CEnvBeverage {
                constexpr std::ptrdiff_t m_CanInDispenser = 0x4E8; // bool
                constexpr std::ptrdiff_t m_nBeverageType = 0x4EC; // int32
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Mirage_FireScarabs_HealthLoss_VData {
                constexpr std::ptrdiff_t m_SiphonParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityTokamakHeatSinksInherentVData {
                constexpr std::ptrdiff_t m_HotTracerParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HotWeaponFxParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strHotWeaponShootSound = 0x1720; // CSoundEventName
                constexpr std::ptrdiff_t m_strOverheatRed = 0x1730; // CSoundEventName
                constexpr std::ptrdiff_t m_strOverheatFull = 0x1740; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 12
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TangoTether_TetherVData {
                constexpr std::ptrdiff_t m_TetherSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_HealSound = 0x618; // CSoundEventName
                constexpr std::ptrdiff_t m_HitIndicator = 0x628; // CSoundEventName
                constexpr std::ptrdiff_t m_GrappleHitSound = 0x638; // CSoundEventName
                constexpr std::ptrdiff_t m_BuffModifier = 0x648; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DisconnectingModifier = 0x658; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DisconnectedModifier = 0x668; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_LockedTargetModifier = 0x678; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flMinConnectTime = 0x688; // float32
                constexpr std::ptrdiff_t m_flDisconnectDistanceBuffer = 0x68C; // float32
                constexpr std::ptrdiff_t m_flCandidateCloserDistance = 0x690; // float32
                constexpr std::ptrdiff_t m_flTargetAwayDistance = 0x694; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 9
            //
            // Metadata:
            // NetworkVarNames: m_hProjectile (EHANDLE)
            // NetworkVarNames: m_flArrowSpeed (float)
            // NetworkVarNames: m_flSnapAnglesBackTime (GameTime_t)
            namespace CCitadel_Ability_WreckerTeleport {
                constexpr std::ptrdiff_t m_hProjectile = 0xB08; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flArrowSpeed = 0xB0C; // float32
                constexpr std::ptrdiff_t m_flSnapAnglesBackTime = 0xB10; // GameTime_t
                constexpr std::ptrdiff_t m_flCastTimeDamage = 0xB14; // float32
                constexpr std::ptrdiff_t m_flCastTime = 0xB18; // GameTime_t
                constexpr std::ptrdiff_t m_bNeedsExplosion = 0xB1C; // bool
                constexpr std::ptrdiff_t m_vProjectileRemovedOrigin = 0xB20; // Vector
                constexpr std::ptrdiff_t m_angCasterAnglesAtCastTime = 0xB2C; // QAngle
                constexpr std::ptrdiff_t m_flTravelDistance = 0xB38; // float32
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_SnipeGlowVData {
                constexpr std::ptrdiff_t m_GlowParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 5
            namespace CCitadel_Modifier_ChargeDragEnemy {
                constexpr std::ptrdiff_t m_qRelativeOffset = 0xC0; // QAngle
                constexpr std::ptrdiff_t m_flRelativeDist = 0xCC; // float32
                constexpr std::ptrdiff_t m_flMaxDist = 0xD0; // float32
                constexpr std::ptrdiff_t m_vecOffsetDir = 0xD4; // Vector
                constexpr std::ptrdiff_t m_vecStartPosition = 0xE0; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 7
            namespace CCitadel_Modifier_Containment_Victim {
                constexpr std::ptrdiff_t m_flGoalHeight = 0xC0; // float32
                constexpr std::ptrdiff_t m_flFallRate = 0xC4; // float32
                constexpr std::ptrdiff_t m_nFXIndex = 0xC8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nFXIndexVictim = 0xCC; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nChainFxIndex = 0xD0; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flTetherRadius = 0xD4; // float32
                constexpr std::ptrdiff_t m_vecOrigin = 0xD8; // Vector
            }
            // Parent: CBaseAnimGraph
            // Field count: 5
            namespace CCitadel_GrandFinaleStage {
                constexpr std::ptrdiff_t m_vStartPos = 0xA48; // Vector
                constexpr std::ptrdiff_t m_vEndPos = 0xA54; // Vector
                constexpr std::ptrdiff_t m_flStartEmitTime = 0xA60; // GameTime_t
                constexpr std::ptrdiff_t m_flEndEmitTime = 0xA64; // GameTime_t
                constexpr std::ptrdiff_t m_nTouchCount = 0xA68; // int32
            }
            // Parent: CBaseAnimGraph
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_flexWeight (float32)
            // NetworkVarNames: m_vLookTargetPosition (Vector)
            // NetworkVarNames: m_blinktoggle (bool)
            namespace CBaseFlex {
                constexpr std::ptrdiff_t m_flexWeight = 0xA48; // CNetworkUtlVectorBase<float32>
                constexpr std::ptrdiff_t m_vLookTargetPosition = 0xA60; // Vector
                constexpr std::ptrdiff_t m_blinktoggle = 0xA6C; // bool
                constexpr std::ptrdiff_t m_flAllowResponsesEndTime = 0xAC0; // GameTime_t
                constexpr std::ptrdiff_t m_flLastFlexAnimationTime = 0xAC4; // GameTime_t
                constexpr std::ptrdiff_t m_nNextSceneEventId = 0xAC8; // SceneEventId_t
                constexpr std::ptrdiff_t m_bUpdateLayerPriorities = 0xACC; // bool
            }
            // Parent: CTriggerHurt
            // Field count: 1
            namespace CScriptTriggerHurt {
                constexpr std::ptrdiff_t m_vExtent = 0xA30; // Vector
            }
            // Parent: CCitadelModifierAura
            // Field count: 3
            namespace CCitadel_Modifier_VacuumAura {
                constexpr std::ptrdiff_t m_hEnemyHeroInVacuum = 0x268; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_nNumPlayersKilled = 0x280; // int32
                constexpr std::ptrdiff_t m_tLastDamageTime = 0x284; // GameTime_t
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadelModifierAura_Default {
            }
            // Parent: CLogicalEntity
            // Field count: 5
            namespace CMathColorBlend {
                constexpr std::ptrdiff_t m_flInMin = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flInMax = 0x4EC; // float32
                constexpr std::ptrdiff_t m_OutColor1 = 0x4F0; // Color
                constexpr std::ptrdiff_t m_OutColor2 = 0x4F4; // Color
                constexpr std::ptrdiff_t m_OutValue = 0x4F8; // CEntityOutputTemplate<Color>
            }
            // Parent: CPointEntity
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_iszOverlayNames (string_t)
            // NetworkVarNames: m_flOverlayTimes (float32)
            // NetworkVarNames: m_flStartTime (GameTime_t)
            // NetworkVarNames: m_iDesiredOverlay (int32)
            // NetworkVarNames: m_bIsActive (bool)
            namespace CEnvScreenOverlay {
                constexpr std::ptrdiff_t m_iszOverlayNames = 0x4E8; // CUtlSymbolLarge[10]
                constexpr std::ptrdiff_t m_flOverlayTimes = 0x538; // float32[10]
                constexpr std::ptrdiff_t m_flStartTime = 0x560; // GameTime_t
                constexpr std::ptrdiff_t m_iDesiredOverlay = 0x564; // int32
                constexpr std::ptrdiff_t m_bIsActive = 0x568; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_Wraith_RapidFire {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ShieldImpactVData {
                constexpr std::ptrdiff_t m_ShieldBreakParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShieldBreakSound = 0x6E8; // CSoundEventName
            }
            // Parent: CEntityComponent
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_nHeroID (HeroID_t)
            // NetworkVarNames: m_nHeroLoading (HeroID_t)
            namespace CCitadelHeroComponent {
                constexpr std::ptrdiff_t m_nHeroID = 0x14; // HeroID_t
                constexpr std::ptrdiff_t m_nHeroLoading = 0x18; // HeroID_t
            }
            // Parent: CBaseTrigger
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelMinimapComponent (CCitadelMinimapComponent::Storage_t)
            // NetworkVarNames: m_iszSoundName (string_t)
            namespace CTriggerItemShop {
                constexpr std::ptrdiff_t m_CCitadelMinimapComponent = 0x990; // CCitadelMinimapComponent
                constexpr std::ptrdiff_t m_iszSoundName = 0x9A8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_vAudioOffset = 0x9B0; // Vector
            }
            // Parent: IEconItemInterface
            // Field count: 16
            //
            // Metadata:
            // NetworkVarNames: m_iItemDefinitionIndex (item_definition_index_t)
            // NetworkVarNames: m_iEntityQuality (int)
            // NetworkVarNames: m_iEntityLevel (uint32)
            // NetworkVarNames: m_iItemID (itemid_t)
            // NetworkVarNames: m_iAccountID (uint32)
            // NetworkVarNames: m_iInventoryPosition (uint32)
            // NetworkVarNames: m_bInitialized (bool)
            // NetworkVarNames: m_nOverrideStyle (style_index_t)
            // NetworkVarNames: m_AttributeList (CAttributeList)
            namespace CEconItemView {
                constexpr std::ptrdiff_t m_iItemDefinitionIndex = 0x8; // item_definition_index_t
                constexpr std::ptrdiff_t m_iEntityQuality = 0xC; // int32
                constexpr std::ptrdiff_t m_iEntityLevel = 0x10; // uint32
                constexpr std::ptrdiff_t m_iItemID = 0x18; // itemid_t
                constexpr std::ptrdiff_t m_iAccountID = 0x20; // uint32
                constexpr std::ptrdiff_t m_iInventoryPosition = 0x24; // uint32
                constexpr std::ptrdiff_t m_bInitialized = 0x30; // bool
                constexpr std::ptrdiff_t m_nOverrideStyle = 0x31; // style_index_t
                constexpr std::ptrdiff_t m_bIsStoreItem = 0x32; // bool
                constexpr std::ptrdiff_t m_bIsTradeItem = 0x33; // bool
                constexpr std::ptrdiff_t m_bHasComputedAttachedParticles = 0x34; // bool
                constexpr std::ptrdiff_t m_bHasAttachedParticles = 0x35; // bool
                constexpr std::ptrdiff_t m_iEntityQuantity = 0x38; // int32
                constexpr std::ptrdiff_t m_unClientFlags = 0x3C; // uint8
                constexpr std::ptrdiff_t m_unOverrideOrigin = 0x40; // eEconItemOrigin
                constexpr std::ptrdiff_t m_AttributeList = 0x58; // CAttributeList
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_Charge_Mastery {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 11
            //
            // Metadata:
            // NetworkVarNames: m_bActive (bool)
            // NetworkVarNames: m_hCurrentTarget (EHANDLE)
            // NetworkVarNames: m_hLastCastTarget (EHANDLE)
            // NetworkVarNames: m_vStartPosition (Vector)
            // NetworkVarNames: m_vDeparturePosition (Vector)
            // NetworkVarNames: m_flDepartureTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flArrivalTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_bIsFirstCastCompleted (bool)
            // NetworkVarNames: m_tDoubleCastWindow (GameTime_t)
            namespace CCitadel_Ability_Nano_Pounce_Instant {
                constexpr std::ptrdiff_t m_bActive = 0xD30; // bool
                constexpr std::ptrdiff_t m_hCurrentTarget = 0xD34; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hLastCastTarget = 0xD38; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_vStartPosition = 0xD3C; // Vector
                constexpr std::ptrdiff_t m_vDeparturePosition = 0xD48; // Vector
                constexpr std::ptrdiff_t m_flDepartureTime = 0xD58; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flArrivalTime = 0xD70; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_vLastKnownSafePos = 0xD88; // Vector
                constexpr std::ptrdiff_t m_bIsFirstCastCompleted = 0xD96; // bool
                constexpr std::ptrdiff_t m_tDoubleCastWindow = 0xD98; // GameTime_t
                constexpr std::ptrdiff_t m_CastStartParticle = 0xD9C; // ParticleIndex_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Infuser_VData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: None
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_flTime (GameTime_t)
            namespace CCitadelAutoScaledTime {
                constexpr std::ptrdiff_t m_flTime = 0x8; // GameTime_t
            }
            // Parent: CAI_CitadelNPCVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CNPC_MidBossVData {
                constexpr std::ptrdiff_t m_iStartingHealth = 0xFB0; // int32
                constexpr std::ptrdiff_t m_iHealthGainPerMinute = 0xFB4; // int32
                constexpr std::ptrdiff_t m_flAggroTime = 0xFB8; // float32
                constexpr std::ptrdiff_t m_DyingSmallExplosion = 0xFC0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DyingFinalExplosion = 0x10A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flDyingDuration = 0x1180; // float32
                constexpr std::ptrdiff_t m_KnockbackAura = 0x1188; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AggroEnemy = 0x1198; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CTeamplayRules
            // Field count: 59
            //
            // Metadata:
            // NetworkVarNames: m_bFreezePeriod (bool)
            // NetworkVarNames: m_fLevelStartTime (GameTime_t)
            // NetworkVarNames: m_flGameStartTime (GameTime_t)
            // NetworkVarNames: m_flRoundStartTime (GameTime_t)
            // NetworkVarNames: m_eGameState (EGameState)
            // NetworkVarNames: m_hTowerAmber (EHANDLE)
            // NetworkVarNames: m_hTowerSapphire (EHANDLE)
            // NetworkVarNames: m_bEnemyInAmberBase (bool)
            // NetworkVarNames: m_bEnemyInSapphireBase (bool)
            // NetworkVarNames: m_vMinimapMins (Vector)
            // NetworkVarNames: m_vMinimapMaxs (Vector)
            // NetworkVarNames: m_bMatchSafeToAbandon (bool)
            // NetworkVarNames: m_bNoDeathEnabled (bool)
            // NetworkVarNames: m_bFastCooldownsEnabled (bool)
            // NetworkVarNames: m_bStaminaCooldownsEnabled (bool)
            // NetworkVarNames: m_bUnlimitedAmmoEnabled (bool)
            // NetworkVarNames: m_bInfiniteResourcesEnabled (bool)
            // NetworkVarNames: m_bFlexSlotsForcedUnlocked (bool)
            // NetworkVarNames: m_eMatchMode (ECitadelMatchMode)
            // NetworkVarNames: m_eGameMode (ECitadelGameMode)
            // NetworkVarNames: m_unSpectatorCount (uint32)
            // NetworkVarNames: m_hTrooperMinimap (CHandle<CCitadelTrooperMinimap>)
            // NetworkVarNames: m_hCurrentHeroDrafterRebels (EHANDLE)
            // NetworkVarNames: m_hCurrentHeroDrafterCombine (EHANDLE)
            // NetworkVarNames: m_bServerPaused (bool)
            // NetworkVarNames: m_iPauseTeam (int)
            // NetworkVarNames: m_nMatchClockUpdateTick (int)
            // NetworkVarNames: m_flMatchClockAtLastUpdate (float)
            // NetworkVarNames: m_bRequiresReportCardDismissal (bool)
            // NetworkVarNames: m_eGGTeam (int)
            // NetworkVarNames: m_flGGEndsAtTime (GameTime_t)
            // NetworkVarNames: m_unMatchID (MatchID_t)
            // NetworkVarNames: m_nExperimentalGameplayState (int)
            // NetworkVarNames: m_flHeroDiedTime (GameTime_t)
            namespace CCitadelGameRules {
                constexpr std::ptrdiff_t m_bFreezePeriod = 0xD0; // bool
                constexpr std::ptrdiff_t m_fLevelStartTime = 0xD4; // GameTime_t
                constexpr std::ptrdiff_t m_flGameStartTime = 0xD8; // GameTime_t
                constexpr std::ptrdiff_t m_flRoundStartTime = 0xDC; // GameTime_t
                constexpr std::ptrdiff_t m_eGameState = 0xE0; // EGameState
                constexpr std::ptrdiff_t m_hTowerAmber = 0xE4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTowerSapphire = 0xE8; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bEnemyInAmberBase = 0xEC; // bool
                constexpr std::ptrdiff_t m_bEnemyInSapphireBase = 0xED; // bool
                constexpr std::ptrdiff_t m_vMinimapMins = 0xF0; // Vector
                constexpr std::ptrdiff_t m_vMinimapMaxs = 0xFC; // Vector
                constexpr std::ptrdiff_t m_bMatchSafeToAbandon = 0x108; // bool
                constexpr std::ptrdiff_t m_bNoDeathEnabled = 0x109; // bool
                constexpr std::ptrdiff_t m_bFastCooldownsEnabled = 0x10A; // bool
                constexpr std::ptrdiff_t m_bStaminaCooldownsEnabled = 0x10B; // bool
                constexpr std::ptrdiff_t m_bUnlimitedAmmoEnabled = 0x10C; // bool
                constexpr std::ptrdiff_t m_bInfiniteResourcesEnabled = 0x10D; // bool
                constexpr std::ptrdiff_t m_bFlexSlotsForcedUnlocked = 0x10E; // bool
                constexpr std::ptrdiff_t m_eMatchMode = 0x110; // ECitadelMatchMode
                constexpr std::ptrdiff_t m_eGameMode = 0x114; // ECitadelGameMode
                constexpr std::ptrdiff_t m_unSpectatorCount = 0x118; // uint32
                constexpr std::ptrdiff_t m_hTrooperMinimap = 0x11C; // CHandle<CCitadelTrooperMinimap>
                constexpr std::ptrdiff_t m_hCurrentHeroDrafterRebels = 0x120; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hCurrentHeroDrafterCombine = 0x124; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_bDontUploadStats = 0x128; // bool
                constexpr std::ptrdiff_t m_iWinningTeam = 0x12C; // int32
                constexpr std::ptrdiff_t m_bSpawnedBots = 0x1A0; // bool
                constexpr std::ptrdiff_t m_bGuideBotAssigned = 0x1A1; // bool
                constexpr std::ptrdiff_t m_timeLastSpawnCrates = 0x1A4; // float32
                constexpr std::ptrdiff_t m_bNotifiedClientsOfNextCrateSpawn = 0x1A8; // bool
                constexpr std::ptrdiff_t m_bEarlyCratesSpawned = 0x1A9; // bool
                constexpr std::ptrdiff_t m_bIsEarlyCrateGamestate = 0x1AA; // bool
                constexpr std::ptrdiff_t m_flGameTimeAllPlayersDisconnected = 0x450; // GameTime_t
                constexpr std::ptrdiff_t m_nNextHeroDraftPosition = 0x454; // int32
                constexpr std::ptrdiff_t m_CheckIdleTimer = 0x16A8; // CountdownTimer
                constexpr std::ptrdiff_t m_CheckCheatersTimer = 0x16C0; // CountdownTimer
                constexpr std::ptrdiff_t m_bServerPaused = 0x2730; // bool
                constexpr std::ptrdiff_t m_iPauseTeam = 0x2734; // int32
                constexpr std::ptrdiff_t m_nMatchClockUpdateTick = 0x2738; // int32
                constexpr std::ptrdiff_t m_flMatchClockAtLastUpdate = 0x273C; // float32
                constexpr std::ptrdiff_t m_flPauseTime = 0x2740; // float64
                constexpr std::ptrdiff_t m_pausingPlayerId = 0x2748; // CPlayerSlot
                constexpr std::ptrdiff_t m_unpausingPlayerId = 0x274C; // CPlayerSlot
                constexpr std::ptrdiff_t m_fPauseRawTime = 0x2750; // float32
                constexpr std::ptrdiff_t m_fPauseCurTime = 0x2754; // float32
                constexpr std::ptrdiff_t m_fUnpauseRawTime = 0x2758; // float32
                constexpr std::ptrdiff_t m_fUnpauseCurTime = 0x275C; // float32
                constexpr std::ptrdiff_t m_bRequiresReportCardDismissal = 0x27B0; // bool
                constexpr std::ptrdiff_t m_flPreGameWaitEndTime = 0x27B4; // GameTime_t
                constexpr std::ptrdiff_t m_flReportCardDismissalWaitStart = 0x27B8; // GameTime_t
                constexpr std::ptrdiff_t m_nLastPreGameCount = 0x27BC; // int32
                constexpr std::ptrdiff_t m_eGGTeam = 0x27C0; // int32
                constexpr std::ptrdiff_t m_flGGEndsAtTime = 0x27C4; // GameTime_t
                constexpr std::ptrdiff_t m_unMatchID = 0x27C8; // MatchID_t
                constexpr std::ptrdiff_t m_nExperimentalGameplayState = 0x27D0; // int32
                constexpr std::ptrdiff_t m_nPlayerDeathEventID = 0x27D4; // int32
                constexpr std::ptrdiff_t m_nReplayChangedEvent = 0x27D8; // int32
                constexpr std::ptrdiff_t m_nGameOverEvent = 0x27DC; // int32
                constexpr std::ptrdiff_t m_flHeroDiedTime = 0x2800; // GameTime_t
            }
            // Parent: CCitadelModifierAuraVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Thumper_PullAOE_VData {
                constexpr std::ptrdiff_t m_AuraParticle = 0x648; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierAura
            // Field count: 2
            namespace CCitadel_Modifier_Nikuman {
                constexpr std::ptrdiff_t m_nTotalSelfHeal = 0x1F8; // int32
                constexpr std::ptrdiff_t m_nTotalTeammateHeal = 0x1FC; // int32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_TechUpgrade_Infuser {
            }
            // Parent: CPointEntity
            // Field count: 5
            namespace CAI_LookTarget {
                constexpr std::ptrdiff_t m_iContext = 0x4E8; // int32
                constexpr std::ptrdiff_t m_iPriority = 0x4EC; // int32
                constexpr std::ptrdiff_t m_bDisabled = 0x4F0; // bool
                constexpr std::ptrdiff_t m_flTimeNextAvailable = 0x4F4; // GameTime_t
                constexpr std::ptrdiff_t m_flMaxDist = 0x4F8; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 11
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Tengu_StoneFormVData {
                constexpr std::ptrdiff_t m_CastParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_StoneFormParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastTargetSound = 0x1800; // CSoundEventName
                constexpr std::ptrdiff_t m_strImpactSound = 0x1810; // CSoundEventName
                constexpr std::ptrdiff_t m_strFallCollideImpactSound = 0x1820; // CSoundEventName
                constexpr std::ptrdiff_t m_DragModifier = 0x1830; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_strTrueFormModel = 0x1840; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                constexpr std::ptrdiff_t m_flLandHoldTime = 0x1920; // float32
                constexpr std::ptrdiff_t m_flRisingTime = 0x1924; // float32
                constexpr std::ptrdiff_t m_flCollideRadius = 0x1928; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_UltComboVData {
                constexpr std::ptrdiff_t m_MeleeSwingParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_MeleeImpactParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SelfModifier = 0x1720; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TargetModifier = 0x1730; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_KillCheckModifier = 0x1740; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flKillCheckWindow = 0x1750; // float32
            }
            // Parent: CCitadel_Ability_PrimaryWeapon
            // Field count: 0
            namespace CCitadel_Ability_Shotgun_Astro {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Astro_Rifle_Self {
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_DragEnemyVData {
                constexpr std::ptrdiff_t m_flForwardOffset = 0x608; // float32
                constexpr std::ptrdiff_t m_flVerticalOffset = 0x60C; // float32
                constexpr std::ptrdiff_t m_flDragDistance = 0x610; // float32
                constexpr std::ptrdiff_t m_flForceDistScale = 0x614; // float32
            }
            // Parent: CCitadel_Modifier_BaseEventProc
            // Field count: 0
            namespace CCitadel_Modifier_SilenceProcWatcher {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_vecComponentsConsumed (EntitySubclassID_t)
            namespace CCitadel_Item {
                constexpr std::ptrdiff_t m_bEquipped = 0xB00; // bool
                constexpr std::ptrdiff_t m_vecComponentsConsumed = 0xB08; // CNetworkUtlVectorBase<CUtlStringToken>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_Magician_MagicBolt {
                constexpr std::ptrdiff_t m_vecDeployedProjectiles = 0xB08; // CUtlVector<CHandle<CCitadelProjectile>>
                constexpr std::ptrdiff_t m_iCurrentRedirects = 0xB20; // int32
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityDustStormVData {
                constexpr std::ptrdiff_t m_DustStormAura = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_GrenadeTrailModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_UtilityUpgrade_DebuffImmunityVData {
                constexpr std::ptrdiff_t m_DebuffImmunityModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_UtilityUpgrade_RocketBootsVData {
                constexpr std::ptrdiff_t m_LaunchParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_InAirWatcherModifier = 0x1688; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProcVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_CritShotVData {
                constexpr std::ptrdiff_t m_SlowModifier = 0x738; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_CritSound = 0x748; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_WarpStone_Caster_VData {
                constexpr std::ptrdiff_t m_playerBuffSelf = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_SiphonBullets_HealthLoss_VData {
                constexpr std::ptrdiff_t m_SiphonParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealModifier = 0x6E8; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BerserkerVData {
                constexpr std::ptrdiff_t m_BerserkerSound = 0x608; // CSoundEventName
                constexpr std::ptrdiff_t m_StackModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Bullet_Shield_Pulse {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Delayed_Stun {
                constexpr std::ptrdiff_t m_flRadius = 0x130; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_HeroUpgradeBonuses {
                constexpr std::ptrdiff_t m_pOwningPlayer = 0xC0; // CCitadelPlayerPawn*
                constexpr std::ptrdiff_t m_flWeaponPower = 0xC8; // float32
                constexpr std::ptrdiff_t m_flArmorPower = 0xCC; // float32
                constexpr std::ptrdiff_t m_flTechPower = 0xD0; // float32
            }
            // Parent: CBaseCombatCharacter
            // Field count: 25
            //
            // Metadata:
            // MNetworkUserGroupProxy
            // MNetworkUserGroupProxy
            // MNetworkExcludeByUserGroup
            // MNetworkIncludeByUserGroup
            // MNetworkIncludeByUserGroup
            // MNetworkIncludeByUserGroup
            // MNetworkIncludeByName
            // MNetworkOverride
            // MNetworkOverride
            // MNetworkOverride
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // NetworkVarNames: m_pWeaponServices (CPlayer_WeaponServices*)
            // NetworkVarNames: m_pItemServices (CPlayer_ItemServices*)
            // NetworkVarNames: m_pAutoaimServices (CPlayer_AutoaimServices*)
            // NetworkVarNames: m_pObserverServices (CPlayer_ObserverServices*)
            // NetworkVarNames: m_pWaterServices (CPlayer_WaterServices*)
            // NetworkVarNames: m_pUseServices (CPlayer_UseServices*)
            // NetworkVarNames: m_pFlashlightServices (CPlayer_FlashlightServices*)
            // NetworkVarNames: m_pCameraServices (CPlayer_CameraServices*)
            // NetworkVarNames: m_pMovementServices (CPlayer_MovementServices*)
            // MNetworkUserGroupProxy
            // NetworkVarNames: m_ServerViewAngleChanges (ViewAngleServerChange_t)
            // NetworkVarNames: m_iHideHUD (uint32)
            // NetworkVarNames: m_skybox3d (sky3dparams_t)
            // NetworkVarNames: m_flDeathTime (GameTime_t)
            // NetworkVarNames: m_hController (CHandle<CBasePlayerController>)
            // NetworkVarNames: m_hDefaultController (CHandle<CBasePlayerController>)
            namespace CBasePlayerPawn {
                constexpr std::ptrdiff_t m_pWeaponServices = 0xB60; // CPlayer_WeaponServices*
                constexpr std::ptrdiff_t m_pItemServices = 0xB68; // CPlayer_ItemServices*
                constexpr std::ptrdiff_t m_pAutoaimServices = 0xB70; // CPlayer_AutoaimServices*
                constexpr std::ptrdiff_t m_pObserverServices = 0xB78; // CPlayer_ObserverServices*
                constexpr std::ptrdiff_t m_pWaterServices = 0xB80; // CPlayer_WaterServices*
                constexpr std::ptrdiff_t m_pUseServices = 0xB88; // CPlayer_UseServices*
                constexpr std::ptrdiff_t m_pFlashlightServices = 0xB90; // CPlayer_FlashlightServices*
                constexpr std::ptrdiff_t m_pCameraServices = 0xB98; // CPlayer_CameraServices*
                constexpr std::ptrdiff_t m_pMovementServices = 0xBA0; // CPlayer_MovementServices*
                constexpr std::ptrdiff_t m_ServerViewAngleChanges = 0xBB0; // CUtlVectorEmbeddedNetworkVar<ViewAngleServerChange_t>
                constexpr std::ptrdiff_t v_angle = 0xC18; // QAngle
                constexpr std::ptrdiff_t v_anglePrevious = 0xC24; // QAngle
                constexpr std::ptrdiff_t m_iHideHUD = 0xC30; // uint32
                constexpr std::ptrdiff_t m_skybox3d = 0xC38; // sky3dparams_t
                constexpr std::ptrdiff_t m_fTimeLastHurt = 0xCC8; // GameTime_t
                constexpr std::ptrdiff_t m_flDeathTime = 0xCCC; // GameTime_t
                constexpr std::ptrdiff_t m_fNextSuicideTime = 0xCD0; // GameTime_t
                constexpr std::ptrdiff_t m_fInitHUD = 0xCD4; // bool
                constexpr std::ptrdiff_t m_pExpresser = 0xCD8; // CAI_Expresser*
                constexpr std::ptrdiff_t m_hController = 0xCE0; // CHandle<CBasePlayerController>
                constexpr std::ptrdiff_t m_hDefaultController = 0xCE4; // CHandle<CBasePlayerController>
                constexpr std::ptrdiff_t m_fHltvReplayDelay = 0xCEC; // float32
                constexpr std::ptrdiff_t m_fHltvReplayEnd = 0xCF0; // float32
                constexpr std::ptrdiff_t m_iHltvReplayEntity = 0xCF4; // CEntityIndex
                constexpr std::ptrdiff_t m_sndOpvarLatchData = 0xCF8; // CUtlVector<sndopvarlatchdata_t>
            }
            // Parent: CBaseTrigger
            // Field count: 12
            //
            // Metadata:
            // NetworkVarNames: m_hPostSettings (HPostProcessingStrong)
            // NetworkVarNames: m_flFadeDuration (float)
            // NetworkVarNames: m_flMinLogExposure (float)
            // NetworkVarNames: m_flMaxLogExposure (float)
            // NetworkVarNames: m_flMinExposure (float)
            // NetworkVarNames: m_flMaxExposure (float)
            // NetworkVarNames: m_flExposureCompensation (float)
            // NetworkVarNames: m_flExposureFadeSpeedUp (float)
            // NetworkVarNames: m_flExposureFadeSpeedDown (float)
            // NetworkVarNames: m_flTonemapEVSmoothingRange (float)
            // NetworkVarNames: m_bMaster (bool)
            // NetworkVarNames: m_bExposureControl (bool)
            namespace CPostProcessingVolume {
                constexpr std::ptrdiff_t m_hPostSettings = 0x9A0; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
                constexpr std::ptrdiff_t m_flFadeDuration = 0x9A8; // float32
                constexpr std::ptrdiff_t m_flMinLogExposure = 0x9AC; // float32
                constexpr std::ptrdiff_t m_flMaxLogExposure = 0x9B0; // float32
                constexpr std::ptrdiff_t m_flMinExposure = 0x9B4; // float32
                constexpr std::ptrdiff_t m_flMaxExposure = 0x9B8; // float32
                constexpr std::ptrdiff_t m_flExposureCompensation = 0x9BC; // float32
                constexpr std::ptrdiff_t m_flExposureFadeSpeedUp = 0x9C0; // float32
                constexpr std::ptrdiff_t m_flExposureFadeSpeedDown = 0x9C4; // float32
                constexpr std::ptrdiff_t m_flTonemapEVSmoothingRange = 0x9C8; // float32
                constexpr std::ptrdiff_t m_bMaster = 0x9CC; // bool
                constexpr std::ptrdiff_t m_bExposureControl = 0x9CD; // bool
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_PhantomStrike {
            }
            // Parent: CBaseModelEntity
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_flLightScale (float32)
            // NetworkVarNames: m_Radius (float32)
            namespace CSpotlightEnd {
                constexpr std::ptrdiff_t m_flLightScale = 0x7C0; // float32
                constexpr std::ptrdiff_t m_Radius = 0x7C4; // float32
                constexpr std::ptrdiff_t m_vSpotlightDir = 0x7C8; // Vector
                constexpr std::ptrdiff_t m_vSpotlightOrg = 0x7D4; // Vector
            }
            // Parent: CBaseModelEntity
            // Field count: 1
            namespace CRuleEntity {
                constexpr std::ptrdiff_t m_iszMaster = 0x7C0; // CUtlSymbolLarge
            }
            // Parent: CCitadel_Ability_PrimaryWeapon
            // Field count: 0
            namespace CCitadel_Ability_Shotgun_Astro_Backwards {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_PoisonBullets {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_SelfVacuum {
            }
            // Parent: CCitadelModifier
            // Field count: 7
            namespace CCitadel_Modifier_ShieldTracker_Base {
                constexpr std::ptrdiff_t m_vecShield = 0xE8; // Vector
                constexpr std::ptrdiff_t m_flShieldDamageTime = 0xF4; // float32
                constexpr std::ptrdiff_t m_flShieldBreakTime = 0xF8; // float32
                constexpr std::ptrdiff_t m_flShieldBreakHealAmount = 0xFC; // float32
                constexpr std::ptrdiff_t m_flShieldBreakHealDone = 0x100; // float32
                constexpr std::ptrdiff_t m_bShieldHealingAfterBreak = 0x104; // bool
                constexpr std::ptrdiff_t m_bForceRegen = 0x105; // bool
            }
            // Parent: CItemGeneric
            // Field count: 0
            namespace CCitadelItemMetal {
            }
            // Parent: CCitadelProjectile
            // Field count: 2
            namespace CCitadel_Projectile_DustStorm {
                constexpr std::ptrdiff_t m_cTicksNoMovement = 0x870; // int32
                constexpr std::ptrdiff_t m_DustStormAbility = 0x874; // CHandle<CCitadel_Ability_Dust_Storm>
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 4
            namespace CCitadel_Modifier_VacuumAuraTarget {
                constexpr std::ptrdiff_t m_flMaxDist = 0x138; // float32
                constexpr std::ptrdiff_t m_vecOffsetDir = 0x13C; // Vector
                constexpr std::ptrdiff_t m_vecStartPosition = 0x148; // Vector
                constexpr std::ptrdiff_t m_flAOERadius = 0x154; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CModifier_CloakingDevice_Active_Ambush {
                constexpr std::ptrdiff_t m_nAmbushParticle = 0xC0; // ParticleIndex_t
            }
            // Parent: CitadelItemVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_ArmorUpgrade_AblativeCoatVData {
                constexpr std::ptrdiff_t m_RestoreEffectModifier = 0x15A8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_OnTakeDamageEffectModifier = 0x15B8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_OnBreakEffectModifier = 0x15C8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ResistBuffModifier = 0x15D8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flOnTakeDamageEffectDuration = 0x15E8; // float32
                constexpr std::ptrdiff_t m_flOnBreakEffectDuration = 0x15EC; // float32
                constexpr std::ptrdiff_t m_flOnRestoreEffectDuration = 0x15F0; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ActiveDisarm_SpiritSteal {
            }
            // Parent: CBaseTrigger
            // Field count: 1
            namespace CTriggerDetectExplosion {
                constexpr std::ptrdiff_t m_OnDetectedExplosion = 0x9B8; // CEntityIOOutput
            }
            // Parent: CLogicalEntity
            // Field count: 1
            namespace CSoundStackSave {
                constexpr std::ptrdiff_t m_iszStackName = 0x4E8; // CUtlSymbolLarge
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_FireBeetles_Buff {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_vecTeleportPosition (Vector)
            // NetworkVarNames: m_vecTeleportPositionNormal (Vector)
            // NetworkVarNames: m_eTelepunchState (ETelepunchState_t)
            // NetworkVarNames: m_flNextStateTime (GameTime_t)
            namespace CCitadel_Ability_Viscous_Telepunch {
                constexpr std::ptrdiff_t m_vecTeleportPosition = 0xCF8; // Vector
                constexpr std::ptrdiff_t m_vecTeleportPositionNormal = 0xD04; // Vector
                constexpr std::ptrdiff_t m_eTelepunchState = 0xD10; // ETelepunchState_t
                constexpr std::ptrdiff_t m_flNextStateTime = 0xD14; // GameTime_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_vecPuddleModifiers (CUtlVector<EHANDLE>)
            namespace CCitadel_Ability_GooGrenade {
                constexpr std::ptrdiff_t m_vecPuddleModifiers = 0xB00; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_LastDetonateTime = 0xD48; // GameTime_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ViscousWeapon_Alt_VData {
                constexpr std::ptrdiff_t m_strChargingParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ImpactParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FiringParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplosionSound = 0x1800; // CSoundEventName
                constexpr std::ptrdiff_t m_ChargeSound = 0x1810; // CSoundEventName
                constexpr std::ptrdiff_t m_ShootSound = 0x1820; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_bAirCast (bool)
            namespace CCitadel_Ability_Chrono_TimeWall {
                constexpr std::ptrdiff_t m_hWall = 0xB00; // CHandle<CCitadelBulletTimeWarp>
                constexpr std::ptrdiff_t vecDir = 0xB04; // Vector
                constexpr std::ptrdiff_t m_hChargingParticle = 0xB10; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vSpawnPos = 0xB14; // Vector
                constexpr std::ptrdiff_t m_qAngles = 0xB20; // QAngle
                constexpr std::ptrdiff_t m_bAirCast = 0xB2C; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ServerOnly {
            }
            // Parent: CGameRulesProxy
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_pGameRules (CCitadelGameRules*)
            namespace CCitadelGameRulesProxy {
                constexpr std::ptrdiff_t m_pGameRules = 0x4E8; // CCitadelGameRules*
            }
            // Parent: CCitadel_BreakablePropPickup
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_iGoldReward (int)
            namespace CCitadel_BreakablePropGoldPickup {
                constexpr std::ptrdiff_t m_iGoldReward = 0xA88; // int32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_flDashCastStartTime (GameTime_t)
            // NetworkVarNames: m_vDashCastDir (Vector)
            namespace CCitadelBaseDashCastAbility {
                constexpr std::ptrdiff_t m_hAbilityToTrigger = 0xB00; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_flDashCastStartTime = 0xB04; // GameTime_t
                constexpr std::ptrdiff_t m_vDashCastDir = 0xB08; // Vector
            }
            // Parent: CPhysConstraint
            // Field count: 18
            namespace CPhysHinge {
                constexpr std::ptrdiff_t m_soundInfo = 0x568; // ConstraintSoundInfo
                constexpr std::ptrdiff_t m_NotifyMinLimitReached = 0x5F0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_NotifyMaxLimitReached = 0x618; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bAtMinLimit = 0x640; // bool
                constexpr std::ptrdiff_t m_bAtMaxLimit = 0x641; // bool
                constexpr std::ptrdiff_t m_hinge = 0x644; // constraint_hingeparams_t
                constexpr std::ptrdiff_t m_hingeFriction = 0x684; // float32
                constexpr std::ptrdiff_t m_systemLoadScale = 0x688; // float32
                constexpr std::ptrdiff_t m_bIsAxisLocal = 0x68C; // bool
                constexpr std::ptrdiff_t m_flMinRotation = 0x690; // float32
                constexpr std::ptrdiff_t m_flMaxRotation = 0x694; // float32
                constexpr std::ptrdiff_t m_flInitialRotation = 0x698; // float32
                constexpr std::ptrdiff_t m_flMotorFrequency = 0x69C; // float32
                constexpr std::ptrdiff_t m_flMotorDampingRatio = 0x6A0; // float32
                constexpr std::ptrdiff_t m_flAngleSpeed = 0x6A4; // float32
                constexpr std::ptrdiff_t m_flAngleSpeedThreshold = 0x6A8; // float32
                constexpr std::ptrdiff_t m_OnStartMoving = 0x6B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnStopMoving = 0x6D8; // CEntityIOOutput
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_FireScarabs_HealthLoss {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ShivDashVData {
                constexpr std::ptrdiff_t m_DashParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DashEchoParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DashTrailParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CitadelAbilityVData
            // Field count: 10
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_BurrowVData {
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BurrowStartParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BurrowEndParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BurrowInGroundParticle = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BurrowModifier = 0x18E0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SpinModifier = 0x18F0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strBurrowEndSound = 0x1900; // CSoundEventName
                constexpr std::ptrdiff_t m_flChannelEndEnemyPopUpForce = 0x1910; // float32
                constexpr std::ptrdiff_t m_flChannelEndEnemyPopUpCylinderHeight = 0x1914; // float32
                constexpr std::ptrdiff_t m_cameraSpinStart = 0x1918; // CitadelCameraOperationsSequence_t
            }
            // Parent: CCitadel_Modifier_BaseBulletPreRollProc
            // Field count: 1
            namespace CCitadel_Modifier_CritShot {
                constexpr std::ptrdiff_t m_iShotID = 0x188; // ShotID_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Savior_VData {
                constexpr std::ptrdiff_t m_BuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TrailParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CAI_Component
            // Field count: 5
            namespace CAI_Scheduler {
                constexpr std::ptrdiff_t m_ScheduleState = 0x40; // AIScheduleState_t
                constexpr std::ptrdiff_t m_failSchedule = 0x68; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_translatedSchedule = 0x70; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_untranslatedSchedule = 0x78; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_sInterruptText = 0xA0; // CUtlString
            }
            // Parent: CGameRules
            // Field count: 1
            namespace CSingleplayRules {
                constexpr std::ptrdiff_t m_bSinglePlayerGameEnding = 0xC0; // bool
            }
            // Parent: CBaseFilter
            // Field count: 1
            namespace CFilterProximity {
                constexpr std::ptrdiff_t m_flRadius = 0x540; // float32
            }
            // Parent: CEconEntity
            // Field count: 0
            namespace CEconWearable {
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 0
            namespace CCitadel_RestorativeGooCube {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Cadence_AnthemAOE {
            }
            // Parent: CitadelAbilityVData
            // Field count: 16
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityWreckerTeleportVData {
                constexpr std::ptrdiff_t m_SpectatingProjectileParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ExplosionParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChannelParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastParticle = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ArrowOffsetX = 0x18E0; // float32
                constexpr std::ptrdiff_t m_ArrowCameraDistance = 0x18E4; // float32
                constexpr std::ptrdiff_t m_ArrowCameraHeightOffset = 0x18E8; // float32
                constexpr std::ptrdiff_t m_ArrowInitialPitch = 0x18EC; // float32
                constexpr std::ptrdiff_t m_GuidingModifier = 0x18F0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1900; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strExplodeSound = 0x1910; // CSoundEventName
                constexpr std::ptrdiff_t m_flTrackAmount = 0x1920; // float32
                constexpr std::ptrdiff_t m_flSpeedAccel = 0x1924; // float32
                constexpr std::ptrdiff_t m_flSpeedDeccel = 0x1928; // float32
                constexpr std::ptrdiff_t m_flBaseProjectileSpeed = 0x192C; // float32
                constexpr std::ptrdiff_t m_flMaxProjectileSpeed = 0x1930; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Savior {
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Objective_Regen {
                constexpr std::ptrdiff_t m_flLastAttackedTime = 0xC0; // GameTime_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BulletResistReductionStackVData {
                constexpr std::ptrdiff_t m_bSelfish = 0x608; // bool
            }
            // Parent: CPlayerPawnComponent
            // Field count: 0
            namespace CPlayer_ItemServices {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_ActiveBulletShield {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_vecLockonTargets (LockonTarget_t)
            // NetworkVarNames: m_LockOnStartTime (GameTime_t)
            namespace CCitadelBaseLockonAbility {
                constexpr std::ptrdiff_t m_vecLockonTargets = 0xC18; // CUtlVectorEmbeddedNetworkVar<LockonTarget_t>
                constexpr std::ptrdiff_t m_LockOnStartTime = 0xC80; // GameTime_t
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CAbility_Rutger_CheatDeath {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BoucePadVData {
                constexpr std::ptrdiff_t m_StompParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strImpactSound = 0x6E8; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityStompVData {
                constexpr std::ptrdiff_t m_StompParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strStompExplosionSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_strCastDelayLocalPlayerSound = 0x1650; // CSoundEventName
                constexpr std::ptrdiff_t m_DebuffModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BulletResistModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_PassiveBeefy {
                constexpr std::ptrdiff_t m_flLastHealTime = 0xB18; // GameTime_t
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityStormCloudVData {
                constexpr std::ptrdiff_t m_StormCloudModifier = 0x1560; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_Tech_Bleed {
                constexpr std::ptrdiff_t m_bNoDeath = 0xC0; // bool
                constexpr std::ptrdiff_t m_flDamage = 0xC4; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CCitadel_Modifier_HoldingGoldenIdol {
                constexpr std::ptrdiff_t m_iIdolParticle = 0x130; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nGoldValue = 0x134; // int32
            }
            // Parent: CTriggerModifier
            // Field count: 2
            namespace CCitadelInteriorTrigger {
                constexpr std::ptrdiff_t m_nInteriorType = 0x9A0; // int32
                constexpr std::ptrdiff_t m_tInteriorModifier = 0x9A4; // CUtlStringToken
            }
            // Parent: CLogicalEntity
            // Field count: 11
            namespace CMathCounter {
                constexpr std::ptrdiff_t m_flMin = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flMax = 0x4EC; // float32
                constexpr std::ptrdiff_t m_bHitMin = 0x4F0; // bool
                constexpr std::ptrdiff_t m_bHitMax = 0x4F1; // bool
                constexpr std::ptrdiff_t m_bDisabled = 0x4F2; // bool
                constexpr std::ptrdiff_t m_OutValue = 0x4F8; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnGetValue = 0x520; // CEntityOutputTemplate<float32>
                constexpr std::ptrdiff_t m_OnHitMin = 0x548; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnHitMax = 0x570; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnChangedFromMin = 0x598; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnChangedFromMax = 0x5C0; // CEntityIOOutput
            }
            // Parent: CBaseEntity
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_worldName (string_t)
            // NetworkVarNames: m_layerName (string_t)
            // NetworkVarNames: m_bWorldLayerVisible (bool)
            // NetworkVarNames: m_bEntitiesSpawned (bool)
            namespace CInfoWorldLayer {
                constexpr std::ptrdiff_t m_pOutputOnEntitiesSpawned = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_worldName = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_layerName = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bWorldLayerVisible = 0x520; // bool
                constexpr std::ptrdiff_t m_bEntitiesSpawned = 0x521; // bool
                constexpr std::ptrdiff_t m_bCreateAsChildSpawnGroup = 0x522; // bool
                constexpr std::ptrdiff_t m_hLayerSpawnGroup = 0x524; // uint32
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_ShivDaggerVData {
                constexpr std::ptrdiff_t m_DamageDebuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowDebuffModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DaggerStuckParticle = 0x1580; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerImpactParticle = 0x1660; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DaggerExplodeParticle = 0x1740; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDaggerHitSound = 0x1820; // CSoundEventName
                constexpr std::ptrdiff_t m_strDaggerExplodeSound = 0x1830; // CSoundEventName
            }
            // Parent: CCitadel_Modifier_Stunned
            // Field count: 2
            namespace CCitadel_Modifier_PsychicLift {
                constexpr std::ptrdiff_t m_vecFloatDest = 0x138; // Vector
                constexpr std::ptrdiff_t m_vecStartingPos = 0x144; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_NearDeathFX {
            }
            // Parent: CCitadelModifierVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_ZiplineSpeedVData {
                constexpr std::ptrdiff_t m_flPercentageMultiplierStart = 0x608; // float32
                constexpr std::ptrdiff_t m_flPercentageMultiplierEnd = 0x60C; // float32
                constexpr std::ptrdiff_t m_flRampUpTime = 0x610; // float32
            }
            // Parent: CAI_CitadelNPC
            // Field count: 0
            namespace CCitadelPlayerBotNPCBrain {
            }
            // Parent: CBarnLight
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_bShowLight (bool)
            namespace CRectLight {
                constexpr std::ptrdiff_t m_bShowLight = 0xAE0; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CGameModifier_FireUserEntityIOVData {
                constexpr std::ptrdiff_t m_FireOnAdded = 0x608; // FireUserEntityIO_t
                constexpr std::ptrdiff_t m_FireOnRemoved = 0x60C; // FireUserEntityIO_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierBossInvulnVData {
                constexpr std::ptrdiff_t m_ShieldParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_flShieldRadius = 0x6E8; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_GangActivity_Cancel {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Shakedown_TargetVData {
                constexpr std::ptrdiff_t m_RootModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PulseModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_WingBlastPush {
                constexpr std::ptrdiff_t m_vPush = 0xC0; // Vector
            }
            // Parent: CCitadelBaseAbility
            // Field count: 7
            //
            // Metadata:
            // NetworkVarNames: m_flVertOffset (float)
            // NetworkVarNames: m_flHorizGap (float)
            // NetworkVarNames: m_vStartPos (Vector)
            // NetworkVarNames: m_vTargetPos (Vector)
            // NetworkVarNames: m_angFacing (QAngle)
            // NetworkVarNames: m_nMantleTypeIndex (int)
            // NetworkVarNames: m_flStartTime (GameTime_t)
            namespace CCitadel_Ability_Mantle {
                constexpr std::ptrdiff_t m_flVertOffset = 0xB00; // float32
                constexpr std::ptrdiff_t m_flHorizGap = 0xB04; // float32
                constexpr std::ptrdiff_t m_vStartPos = 0xB08; // Vector
                constexpr std::ptrdiff_t m_vTargetPos = 0xB14; // Vector
                constexpr std::ptrdiff_t m_angFacing = 0xB20; // QAngle
                constexpr std::ptrdiff_t m_nMantleTypeIndex = 0xB2C; // int32
                constexpr std::ptrdiff_t m_flStartTime = 0xB30; // GameTime_t
            }
            // Parent: CCitadelModifierVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_NearDeathFXVData {
                constexpr std::ptrdiff_t m_EnemyNearDeathParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_FriendlyNearDeathParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_sSelfDestructStart = 0x7C8; // CSoundEventName
                constexpr std::ptrdiff_t m_sSelfDestructEnd = 0x7D8; // CSoundEventName
            }
            // Parent: CCitadelItemPickup
            // Field count: 0
            namespace CCitadelItemPickupIdol {
            }
            // Parent: CBaseDoor
            // Field count: 1
            namespace CRotDoor {
                constexpr std::ptrdiff_t m_bSolidBsp = 0xA48; // bool
            }
            // Parent: CLogicalEntity
            // Field count: 4
            namespace CLogicLineToEntity {
                constexpr std::ptrdiff_t m_Line = 0x4E8; // CEntityOutputTemplate<Vector>
                constexpr std::ptrdiff_t m_SourceName = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_StartEntity = 0x518; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_EndEntity = 0x51C; // CHandle<CBaseEntity>
            }
            // Parent: CAI_Navigator
            // Field count: 1
            namespace CAI_CitadelPlayerBotNavigator {
                constexpr std::ptrdiff_t m_bBlocked = 0x208; // bool
            }
            // Parent: CitadelAbilityVData
            // Field count: 6
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Magician_AnimalCurseVData {
                constexpr std::ptrdiff_t m_CurseModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AirDampingModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TargetWarningSound = 0x1580; // CSoundEventName
                constexpr std::ptrdiff_t m_ProjectileImpactParticle = 0x1590; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TargetWarningParticle = 0x1670; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ProjectileExplodeParticle = 0x1750; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_AirLiftExplodingAlly {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_angBeamAngles (QAngle)
            namespace CCitadel_Ability_Wrecker_Ultimate {
                constexpr std::ptrdiff_t m_angBeamAngles = 0xB20; // QAngle
            }
            // Parent: CCitadelModifierVData
            // Field count: 8
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadelModifierChronoPulseGrenadePulseAreaVData {
                constexpr std::ptrdiff_t m_DebuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_SlowModifier = 0x618; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_PreviewRingParticle = 0x628; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AreaEffect = 0x708; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strArmingSound = 0x7E8; // CSoundEventName
                constexpr std::ptrdiff_t m_strArmedSound = 0x7F8; // CSoundEventName
                constexpr std::ptrdiff_t m_strLoopingSound = 0x808; // CSoundEventName
                constexpr std::ptrdiff_t m_strHitSound = 0x818; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_bLeaping (bool)
            // NetworkVarNames: m_flLeapStartTime (GameTime_t)
            namespace CCitadel_Ability_HornetLeap {
                constexpr std::ptrdiff_t m_bLeaping = 0xB02; // bool
                constexpr std::ptrdiff_t m_flLeapStartTime = 0xB04; // GameTime_t
                constexpr std::ptrdiff_t m_nFXIndex = 0xB08; // ParticleIndex_t
                constexpr std::ptrdiff_t m_TrailFX = 0xD40; // ParticleIndex_t
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_ChainLightningEffect {
                constexpr std::ptrdiff_t m_nChainCount = 0xC0; // int32
                constexpr std::ptrdiff_t m_hHitEntities = 0xC8; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_hUnhitEnts = 0xE0; // CUtlVector<CHandle<CBaseEntity>>
                constexpr std::ptrdiff_t m_vLastSource = 0xF8; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_VexBarrier_Shield {
            }
            // Parent: None
            // Field count: 6
            //
            // Metadata:
            // NetworkVarNames: m_nTotalPausedTicks (int)
            // NetworkVarNames: m_nPauseStartTick (int)
            // NetworkVarNames: m_bGamePaused (bool)
            namespace CGameRules {
                constexpr std::ptrdiff_t __m_pChainEntity = 0x8; // CNetworkVarChainer
                constexpr std::ptrdiff_t m_szQuestName = 0x30; // char[128]
                constexpr std::ptrdiff_t m_nQuestPhase = 0xB0; // int32
                constexpr std::ptrdiff_t m_nTotalPausedTicks = 0xB4; // int32
                constexpr std::ptrdiff_t m_nPauseStartTick = 0xB8; // int32
                constexpr std::ptrdiff_t m_bGamePaused = 0xBC; // bool
            }
            // Parent: None
            // Field count: 4
            //
            // Metadata:
            // NetworkVarNames: m_pEntity (CEntityIdentity*)
            // NetworkVarNames: m_CScriptComponent (CScriptComponent::Storage_t)
            namespace CEntityInstance {
                constexpr std::ptrdiff_t m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_pEntity = 0x10; // CEntityIdentity*
                constexpr std::ptrdiff_t m_CScriptComponent = 0x30; // CScriptComponent*
                constexpr std::ptrdiff_t m_bVisibleinPVS = 0x38; // bool
            }
            // Parent: CCitadelAnimatingModelEntity
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_hAbility (CHandle<CCitadelBaseAbility>)
            namespace CCitadel_Nano_Predatory_Statue {
                constexpr std::ptrdiff_t m_hAbility = 0xBE0; // CHandle<CCitadelBaseAbility>
                constexpr std::ptrdiff_t m_flLifetime = 0xBE4; // float32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_Frenzy {
            }
            // Parent: CBasePlayerController
            // Field count: 32
            //
            // Metadata:
            // NetworkVarNames: m_ePlayState (EPlayerPlayState)
            // NetworkVarNames: m_iGuidedBotMatchLastHits (int)
            // NetworkVarNames: m_iGuidedBotMatchOrbsSecured (int)
            // NetworkVarNames: m_iGuidedBotMatchOrbsDenied (int)
            // NetworkVarNames: m_iGuidedBotMatchDamageToGuardians (int)
            // NetworkVarNames: m_iGuidedBotMatchDamageToPlayers (int)
            // NetworkVarNames: m_iGuidedBotMatchDamageTaken (int)
            // NetworkVarNames: m_iGuidedBotMatchNetWorth (int)
            // NetworkVarNames: m_iGuidedBotMatchModsPurchased (int)
            // NetworkVarNames: m_iGuidedBotMatchAbilityUpgrades (int)
            // NetworkVarNames: m_flGuideBotMatchLastTaskNagVO (float)
            // NetworkVarNames: m_flGuideBotLastTimeTaskCompleted (float)
            // NetworkVarNames: m_eGuidedBotMatchObjective (EGuidedBotMatchObjective)
            // NetworkVarNames: m_nCurrentRank (int)
            // NetworkVarNames: m_nAssignedLane (int8)
            // NetworkVarNames: m_nOriginalLaneAssignment (int8)
            // NetworkVarNames: m_bIsKingPanda (bool)
            // NetworkVarNames: m_bBotDisconnectTakeover (bool)
            // NetworkVarNames: m_bInTeamChat (bool)
            // NetworkVarNames: m_bInPartyChat (bool)
            // NetworkVarNames: m_unHeroBuildID (HeroBuildID_t)
            // NetworkVarNames: m_hHeroPawn (CHandle<CCitadelPlayerPawn>)
            // NetworkVarNames: m_PlayerDataGlobal (PlayerDataGlobal_t)
            // NetworkVarNames: m_nDeathReplayAvailable (int8)
            // NetworkVarNames: m_unLobbyPlayerSlot (CitadelLobbyPlayerSlot_t)
            namespace CCitadelPlayerController {
                constexpr std::ptrdiff_t m_ePlayState = 0x770; // EPlayerPlayState
                constexpr std::ptrdiff_t m_iGuidedBotMatchLastHits = 0x774; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchOrbsSecured = 0x778; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchOrbsDenied = 0x77C; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchDamageToGuardians = 0x780; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchDamageToPlayers = 0x784; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchDamageTaken = 0x788; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchNetWorth = 0x78C; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchModsPurchased = 0x790; // int32
                constexpr std::ptrdiff_t m_iGuidedBotMatchAbilityUpgrades = 0x794; // int32
                constexpr std::ptrdiff_t m_flGuideBotMatchLastTaskNagVO = 0x798; // float32
                constexpr std::ptrdiff_t m_flGuideBotLastTimeTaskCompleted = 0x79C; // float32
                constexpr std::ptrdiff_t m_eGuidedBotMatchObjective = 0x7A0; // EGuidedBotMatchObjective
                constexpr std::ptrdiff_t m_nCurrentRank = 0x7A4; // int32
                constexpr std::ptrdiff_t m_nAssignedLane = 0x7A8; // int8
                constexpr std::ptrdiff_t m_nOriginalLaneAssignment = 0x7A9; // int8
                constexpr std::ptrdiff_t m_bIsKingPanda = 0x7AA; // bool
                constexpr std::ptrdiff_t m_bBotDisconnectTakeover = 0x7AB; // bool
                constexpr std::ptrdiff_t m_bInTeamChat = 0x7AC; // bool
                constexpr std::ptrdiff_t m_bInPartyChat = 0x7AD; // bool
                constexpr std::ptrdiff_t m_unHeroBuildID = 0x7B0; // HeroBuildID_t
                constexpr std::ptrdiff_t m_hHeroPawn = 0x888; // CHandle<CCitadelPlayerPawn>
                constexpr std::ptrdiff_t m_PlayerDataGlobal = 0x8C0; // PlayerDataGlobal_t
                constexpr std::ptrdiff_t m_nDeathReplayAvailable = 0xAE0; // int8
                constexpr std::ptrdiff_t m_unLobbyPlayerSlot = 0xAE1; // CitadelLobbyPlayerSlot_t
                constexpr std::ptrdiff_t m_flLastCommsTime = 0xAE4; // GameTime_t
                constexpr std::ptrdiff_t m_flLastFailedCommsTime = 0xAE8; // GameTime_t
                constexpr std::ptrdiff_t m_bLastCommsWasDoublePing = 0xAEC; // bool
                constexpr std::ptrdiff_t m_nGuideBotNumTasksComplete = 0xAF0; // int32
                constexpr std::ptrdiff_t m_bHasBeenReportedAsCheater = 0xAF4; // bool
                constexpr std::ptrdiff_t m_bHasGCACKedCheaterReport = 0xAF5; // bool
                constexpr std::ptrdiff_t m_bHasBeenLoggedAsCheater = 0xAF6; // bool
            }
            // Parent: CBaseEntity
            // Field count: 18
            //
            // Metadata:
            // NetworkVarNames: m_Entity_hCubemapTexture (HRenderTextureStrong)
            // NetworkVarNames: m_Entity_bCustomCubemapTexture (bool)
            // NetworkVarNames: m_Entity_flInfluenceRadius (float)
            // NetworkVarNames: m_Entity_vBoxProjectMins (Vector)
            // NetworkVarNames: m_Entity_vBoxProjectMaxs (Vector)
            // NetworkVarNames: m_Entity_bMoveable (bool)
            // NetworkVarNames: m_Entity_nHandshake (int)
            // NetworkVarNames: m_Entity_nEnvCubeMapArrayIndex (int)
            // NetworkVarNames: m_Entity_nPriority (int)
            // NetworkVarNames: m_Entity_flEdgeFadeDist (float)
            // NetworkVarNames: m_Entity_vEdgeFadeDists (Vector)
            // NetworkVarNames: m_Entity_flDiffuseScale (float)
            // NetworkVarNames: m_Entity_bStartDisabled (bool)
            // NetworkVarNames: m_Entity_bDefaultEnvMap (bool)
            // NetworkVarNames: m_Entity_bDefaultSpecEnvMap (bool)
            // NetworkVarNames: m_Entity_bIndoorCubeMap (bool)
            // NetworkVarNames: m_Entity_bCopyDiffuseFromDefaultCubemap (bool)
            // NetworkVarNames: m_Entity_bEnabled (bool)
            namespace CEnvCubemap {
                constexpr std::ptrdiff_t m_Entity_hCubemapTexture = 0x568; // CStrongHandle<InfoForResourceTypeCTextureBase>
                constexpr std::ptrdiff_t m_Entity_bCustomCubemapTexture = 0x570; // bool
                constexpr std::ptrdiff_t m_Entity_flInfluenceRadius = 0x574; // float32
                constexpr std::ptrdiff_t m_Entity_vBoxProjectMins = 0x578; // Vector
                constexpr std::ptrdiff_t m_Entity_vBoxProjectMaxs = 0x584; // Vector
                constexpr std::ptrdiff_t m_Entity_bMoveable = 0x590; // bool
                constexpr std::ptrdiff_t m_Entity_nHandshake = 0x594; // int32
                constexpr std::ptrdiff_t m_Entity_nEnvCubeMapArrayIndex = 0x598; // int32
                constexpr std::ptrdiff_t m_Entity_nPriority = 0x59C; // int32
                constexpr std::ptrdiff_t m_Entity_flEdgeFadeDist = 0x5A0; // float32
                constexpr std::ptrdiff_t m_Entity_vEdgeFadeDists = 0x5A4; // Vector
                constexpr std::ptrdiff_t m_Entity_flDiffuseScale = 0x5B0; // float32
                constexpr std::ptrdiff_t m_Entity_bStartDisabled = 0x5B4; // bool
                constexpr std::ptrdiff_t m_Entity_bDefaultEnvMap = 0x5B5; // bool
                constexpr std::ptrdiff_t m_Entity_bDefaultSpecEnvMap = 0x5B6; // bool
                constexpr std::ptrdiff_t m_Entity_bIndoorCubeMap = 0x5B7; // bool
                constexpr std::ptrdiff_t m_Entity_bCopyDiffuseFromDefaultCubemap = 0x5B8; // bool
                constexpr std::ptrdiff_t m_Entity_bEnabled = 0x5C8; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 0
            namespace CCitadel_Ability_GenericPerson_2 {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            namespace CCitadel_Ability_Ghost_BloodShards {
                constexpr std::ptrdiff_t m_vecDamagedTargets = 0xC50; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Intrinsic_BaseVData {
            }
            // Parent: CBaseEntity
            // Field count: 17
            //
            // Metadata:
            // MNetworkIncludeByUserGroup
            // NetworkVarNames: m_flFadeInDuration (float32)
            // NetworkVarNames: m_flFadeOutDuration (float32)
            // NetworkVarNames: m_flMaxWeight (float32)
            // NetworkVarNames: m_bEnabled (bool)
            // NetworkVarNames: m_bMaster (bool)
            // NetworkVarNames: m_bClientSide (bool)
            // NetworkVarNames: m_bExclusive (bool)
            // NetworkVarNames: m_MinFalloff (float32)
            // NetworkVarNames: m_MaxFalloff (float32)
            // NetworkVarNames: m_flCurWeight (float32)
            // NetworkVarNames: m_netlookupFilename (char)
            namespace CColorCorrection {
                constexpr std::ptrdiff_t m_flFadeInDuration = 0x4E8; // float32
                constexpr std::ptrdiff_t m_flFadeOutDuration = 0x4EC; // float32
                constexpr std::ptrdiff_t m_flStartFadeInWeight = 0x4F0; // float32
                constexpr std::ptrdiff_t m_flStartFadeOutWeight = 0x4F4; // float32
                constexpr std::ptrdiff_t m_flTimeStartFadeIn = 0x4F8; // GameTime_t
                constexpr std::ptrdiff_t m_flTimeStartFadeOut = 0x4FC; // GameTime_t
                constexpr std::ptrdiff_t m_flMaxWeight = 0x500; // float32
                constexpr std::ptrdiff_t m_bStartDisabled = 0x504; // bool
                constexpr std::ptrdiff_t m_bEnabled = 0x505; // bool
                constexpr std::ptrdiff_t m_bMaster = 0x506; // bool
                constexpr std::ptrdiff_t m_bClientSide = 0x507; // bool
                constexpr std::ptrdiff_t m_bExclusive = 0x508; // bool
                constexpr std::ptrdiff_t m_MinFalloff = 0x50C; // float32
                constexpr std::ptrdiff_t m_MaxFalloff = 0x510; // float32
                constexpr std::ptrdiff_t m_flCurWeight = 0x514; // float32
                constexpr std::ptrdiff_t m_netlookupFilename = 0x518; // char[512]
                constexpr std::ptrdiff_t m_lookupFilename = 0x718; // CUtlSymbolLarge
            }
            // Parent: CAI_CitadelNPC
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_bShieldActive (bool)
            // NetworkVarNames: m_bPlayingIdle (bool)
            namespace CNPC_TrooperNeutral {
                constexpr std::ptrdiff_t m_bShieldActive = 0x1853; // bool
                constexpr std::ptrdiff_t m_bPlayingIdle = 0x1854; // bool
            }
            // Parent: CCitadelProjectile
            // Field count: 1
            namespace CCitadel_Projectile_Cyclone {
                constexpr std::ptrdiff_t m_CycloneAbility = 0x870; // CHandle<CCitadel_Ability_Thumper_4>
            }
            // Parent: CCitadelModifierAura
            // Field count: 1
            namespace CCitadelModifier_Viscous_Goo_Aura {
                constexpr std::ptrdiff_t m_AuraParticle = 0xE0; // ParticleIndex_t
            }
            // Parent: CSoundEventEntity
            // Field count: 0
            namespace CSoundEventEntityAlias_snd_event_point {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Intimidated {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_TargetPracticeEnemy {
            }
            // Parent: None
            // Field count: 0
            //
            // Metadata:
            // MPulseProvideFeatureTag
            // MPulseLibraryBindings
            namespace CBaseEntityAPI {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierPowerGeneratorVData {
                constexpr std::ptrdiff_t m_EffectToTitan = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifierVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_VoidSphereVData {
                constexpr std::ptrdiff_t m_TeleportStartParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportEndParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportTrailParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportModelParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffModifier = 0x988; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_flPreTeleportDuration = 0x998; // float32
                constexpr std::ptrdiff_t m_strAmbientLoopingLocalPlayerSound = 0x9A0; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 7
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Chrono_TimeWallVData {
                constexpr std::ptrdiff_t m_AuraModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TimeWallParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TimeWallChargeParticle = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TimeWallHitParticle = 0x1730; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TimeWallHitTimerParticle = 0x1810; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strWallCreated = 0x18F0; // CSoundEventName
                constexpr std::ptrdiff_t m_strChargeUpSound = 0x1900; // CSoundEventName
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_GhostBloodShardDebuffVData {
                constexpr std::ptrdiff_t m_BloodShardDebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CAI_Component
            // Field count: 0
            namespace CAI_LocalNavigatorBase {
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_DPSTracker {
                constexpr std::ptrdiff_t m_flInterval = 0xD8; // float32
                constexpr std::ptrdiff_t m_flProgress = 0xDC; // float32
                constexpr std::ptrdiff_t m_flDistToTarget = 0xE0; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Synth_Blitz {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Urn_Debuff {
            }
            // Parent: CitadelAbilityVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityChargedShotVData {
                constexpr std::ptrdiff_t m_ChannelParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ChannelStartParticle = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ShootParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Aerial_Assault {
            }
            // Parent: CServerOnlyPointEntity
            // Field count: 6
            namespace CPointPrefab {
                constexpr std::ptrdiff_t m_targetMapName = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_forceWorldGroupID = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_associatedRelayTargetName = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_fixupNames = 0x500; // bool
                constexpr std::ptrdiff_t m_bLoadDynamic = 0x501; // bool
                constexpr std::ptrdiff_t m_associatedRelayEntity = 0x504; // CHandle<CPointPrefab>
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Dust_Storm_Aura {
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_Item_CheatDeath {
            }
            // Parent: CBaseToggle
            // Field count: 28
            //
            // Metadata:
            // NetworkVarNames: m_bIsUsable (bool)
            namespace CBaseDoor {
                constexpr std::ptrdiff_t m_angMoveEntitySpace = 0x850; // QAngle
                constexpr std::ptrdiff_t m_vecMoveDirParentSpace = 0x85C; // Vector
                constexpr std::ptrdiff_t m_ls = 0x868; // locksound_t
                constexpr std::ptrdiff_t m_bForceClosed = 0x888; // bool
                constexpr std::ptrdiff_t m_bDoorGroup = 0x889; // bool
                constexpr std::ptrdiff_t m_bLocked = 0x88A; // bool
                constexpr std::ptrdiff_t m_bIgnoreDebris = 0x88B; // bool
                constexpr std::ptrdiff_t m_bNoNPCs = 0x88C; // bool
                constexpr std::ptrdiff_t m_eSpawnPosition = 0x890; // FuncDoorSpawnPos_t
                constexpr std::ptrdiff_t m_flBlockDamage = 0x894; // float32
                constexpr std::ptrdiff_t m_NoiseMoving = 0x898; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_NoiseArrived = 0x8A0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_NoiseMovingClosed = 0x8A8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_NoiseArrivedClosed = 0x8B0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_ChainTarget = 0x8B8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_OnBlockedClosing = 0x8C0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnBlockedOpening = 0x8E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUnblockedClosing = 0x910; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUnblockedOpening = 0x938; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFullyClosed = 0x960; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFullyOpen = 0x988; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnClose = 0x9B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnOpen = 0x9D8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnLockedUse = 0xA00; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bLoopMoveSound = 0xA28; // bool
                constexpr std::ptrdiff_t m_bCreateNavObstacle = 0xA40; // bool
                constexpr std::ptrdiff_t m_isChaining = 0xA41; // bool
                constexpr std::ptrdiff_t m_bIsUsable = 0xA42; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Fear {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_AirLift_Explode_Target {
            }
            // Parent: CitadelAbilityVData
            // Field count: 11
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHookVData {
                constexpr std::ptrdiff_t m_SelfModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_TargetModifier = 0x1570; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BulletAmpModifier = 0x1580; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ShieldModifier = 0x1590; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HookOutParticle = 0x15A0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strHookSuccessSound = 0x1680; // CSoundEventName
                constexpr std::ptrdiff_t m_strHookAllySound = 0x1690; // CSoundEventName
                constexpr std::ptrdiff_t m_strHookMissSound = 0x16A0; // CSoundEventName
                constexpr std::ptrdiff_t m_strHookImpactGeoSound = 0x16B0; // CSoundEventName
                constexpr std::ptrdiff_t m_SelfBuffCastSound = 0x16C0; // CSoundEventName
                constexpr std::ptrdiff_t m_flTrooperHitRadius = 0x16D0; // float32
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            //
            // Metadata:
            // NetworkVarNames: m_bIcePathing (bool)
            // NetworkVarNames: m_qLastAngles (QAngle)
            // NetworkVarNames: m_vLastVelocity (Vector)
            // NetworkVarNames: m_bFirstMovementTick (bool)
            namespace CCitadel_Ability_IcePath {
                constexpr std::ptrdiff_t m_vInitialPosition = 0xB70; // Vector
                constexpr std::ptrdiff_t m_bIcePathing = 0xB7C; // bool
                constexpr std::ptrdiff_t m_qLastAngles = 0xB80; // QAngle
                constexpr std::ptrdiff_t m_vLastVelocity = 0xB8C; // Vector
                constexpr std::ptrdiff_t m_bFirstMovementTick = 0xB98; // bool
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_LearningHeroAbility {
                constexpr std::ptrdiff_t m_sDescription = 0xC0; // CBufferString
            }
            // Parent: None
            // Field count: 33
            //
            // Metadata:
            // NetworkVarNames: m_hParent (CGameSceneNodeHandle)
            // NetworkVarNames: m_vecOrigin (CNetworkOriginCellCoordQuantizedVector)
            // NetworkVarNames: m_angRotation (QAngle)
            // NetworkVarNames: m_flScale (float)
            // NetworkVarNames: m_name (CUtlStringToken)
            // NetworkVarNames: m_hierarchyAttachName (CUtlStringToken)
            namespace CGameSceneNode {
                constexpr std::ptrdiff_t m_nodeToWorld = 0x10; // CTransform
                constexpr std::ptrdiff_t m_pOwner = 0x30; // CEntityInstance*
                constexpr std::ptrdiff_t m_pParent = 0x38; // CGameSceneNode*
                constexpr std::ptrdiff_t m_pChild = 0x40; // CGameSceneNode*
                constexpr std::ptrdiff_t m_pNextSibling = 0x48; // CGameSceneNode*
                constexpr std::ptrdiff_t m_hParent = 0x78; // CGameSceneNodeHandle
                constexpr std::ptrdiff_t m_vecOrigin = 0x88; // CNetworkOriginCellCoordQuantizedVector
                constexpr std::ptrdiff_t m_angRotation = 0xC0; // QAngle
                constexpr std::ptrdiff_t m_flScale = 0xCC; // float32
                constexpr std::ptrdiff_t m_vecAbsOrigin = 0xD0; // Vector
                constexpr std::ptrdiff_t m_angAbsRotation = 0xDC; // QAngle
                constexpr std::ptrdiff_t m_flAbsScale = 0xE8; // float32
                constexpr std::ptrdiff_t m_nParentAttachmentOrBone = 0xEC; // int16
                constexpr std::ptrdiff_t m_bDebugAbsOriginChanges = 0xEE; // bool
                constexpr std::ptrdiff_t m_bDormant = 0xEF; // bool
                constexpr std::ptrdiff_t m_bForceParentToBeNetworked = 0xF0; // bool
                constexpr std::ptrdiff_t m_bDirtyHierarchy = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_bNetworkedPositionChanged = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_bNetworkedAnglesChanged = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_bNetworkedScaleChanged = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_bBoneMergeFlex = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_nLatchAbsOrigin = 0x0; // bitfield:2
                constexpr std::ptrdiff_t m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
                constexpr std::ptrdiff_t m_nHierarchicalDepth = 0xF3; // uint8
                constexpr std::ptrdiff_t m_nHierarchyType = 0xF4; // uint8
                constexpr std::ptrdiff_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xF5; // uint8
                constexpr std::ptrdiff_t m_name = 0xF8; // CUtlStringToken
                constexpr std::ptrdiff_t m_hierarchyAttachName = 0x138; // CUtlStringToken
                constexpr std::ptrdiff_t m_flZOffset = 0x13C; // float32
                constexpr std::ptrdiff_t m_flClientLocalScale = 0x140; // float32
                constexpr std::ptrdiff_t m_vRenderOrigin = 0x144; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVData_SetModelScale {
                constexpr std::ptrdiff_t m_flScale = 0x608; // CRangeFloat
            }
            // Parent: CPointEntity
            // Field count: 7
            namespace CTankTrainAI {
                constexpr std::ptrdiff_t m_hTrain = 0x4E8; // CHandle<CFuncTrackTrain>
                constexpr std::ptrdiff_t m_hTargetEntity = 0x4EC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_soundPlaying = 0x4F0; // int32
                constexpr std::ptrdiff_t m_startSoundName = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_engineSoundName = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_movementSoundName = 0x518; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_targetEntityName = 0x520; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Field count: 4
            namespace CGameGibManager {
                constexpr std::ptrdiff_t m_bAllowNewGibs = 0x508; // bool
                constexpr std::ptrdiff_t m_iCurrentMaxPieces = 0x50C; // int32
                constexpr std::ptrdiff_t m_iMaxPieces = 0x510; // int32
                constexpr std::ptrdiff_t m_iLastFrame = 0x514; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 2
            namespace CModifier_Mirage_Tornado_Lift {
                constexpr std::ptrdiff_t m_vecFloatDest = 0x130; // Vector
                constexpr std::ptrdiff_t m_vecStartingPos = 0x13C; // Vector
            }
            // Parent: CCitadelBaseAbility
            // Field count: 5
            namespace CAbility_Rutger_ForceField {
                constexpr std::ptrdiff_t m_hChargingParticle = 0xB00; // ParticleIndex_t
                constexpr std::ptrdiff_t m_hExplodeParticle = 0xB04; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vSpawnPos = 0xB08; // Vector
                constexpr std::ptrdiff_t m_fTimeToDestroyForceField = 0xB14; // GameTime_t
                constexpr std::ptrdiff_t m_bFirstThink = 0xB18; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 15
            //
            // Metadata:
            // NetworkVarNames: m_flGroundDashSlideTime (CCitadelAutoScaledTime)
            // NetworkVarNames: m_flSlowGetupStartTime (GameTime_t)
            // NetworkVarNames: m_bShouldTriggerSlowGetup (bool)
            // NetworkVarNames: m_bWantsSlide (bool)
            // NetworkVarNames: m_bAirborneWhenDuckPressed (bool)
            // NetworkVarNames: m_bIsSliding (bool)
            // NetworkVarNames: m_flSpeedAdjust (float)
            // NetworkVarNames: m_flDuckPressedTime (GameTime_t)
            // NetworkVarNames: m_flSlideChangeTime (GameTime_t)
            // NetworkVarNames: m_flSlidingOnFlatStartTime (GameTime_t)
            // NetworkVarNames: m_nJumpsThisSlideSession (int)
            // NetworkVarNames: m_flOnGroundStartTime (GameTime_t)
            // NetworkVarNames: m_flDashSlideStartTime (GameTime_t)
            namespace CCitadel_Ability_Slide {
                constexpr std::ptrdiff_t m_flGroundDashSlideTime = 0xB58; // CCitadelAutoScaledTime
                constexpr std::ptrdiff_t m_flSlowGetupStartTime = 0xB70; // GameTime_t
                constexpr std::ptrdiff_t m_bShouldTriggerSlowGetup = 0xB74; // bool
                constexpr std::ptrdiff_t m_bWantsSlide = 0xB75; // bool
                constexpr std::ptrdiff_t m_bAirborneWhenDuckPressed = 0xB76; // bool
                constexpr std::ptrdiff_t m_bIsSliding = 0xB77; // bool
                constexpr std::ptrdiff_t m_flSpeedAdjust = 0xB78; // float32
                constexpr std::ptrdiff_t m_flDuckPressedTime = 0xB7C; // GameTime_t
                constexpr std::ptrdiff_t m_flSlideChangeTime = 0xB80; // GameTime_t
                constexpr std::ptrdiff_t m_flSlidingOnFlatStartTime = 0xB84; // GameTime_t
                constexpr std::ptrdiff_t m_nJumpsThisSlideSession = 0xB88; // int32
                constexpr std::ptrdiff_t m_flOnGroundStartTime = 0xB8C; // GameTime_t
                constexpr std::ptrdiff_t m_flDashSlideStartTime = 0xB90; // GameTime_t
                constexpr std::ptrdiff_t m_bStartedSlideViaProbeSlope = 0xB94; // bool
                constexpr std::ptrdiff_t m_nSlideEffectIndex = 0xB98; // ParticleIndex_t
            }
            // Parent: CRagdollProp
            // Field count: 0
            namespace CRagdollPropAlias_physics_prop_ragdoll {
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BreakablePropExtraGoldPickupVData {
                constexpr std::ptrdiff_t m_iBaseExtraGoldBounty = 0x608; // int32
                constexpr std::ptrdiff_t m_iPerMinuteExtraGoldBounty = 0x60C; // int32
            }
            // Parent: CBaseEntity
            // Field count: 0
            namespace CFuncPropRespawnZone {
            }
            // Parent: CCitadelModifier
            // Field count: 8
            namespace CCitadel_Modifier_MageWalk {
                constexpr std::ptrdiff_t m_bIsFakeout = 0xC0; // bool
                constexpr std::ptrdiff_t m_bTeleported = 0xC1; // bool
                constexpr std::ptrdiff_t m_particleStart = 0xC4; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleEnd = 0xC8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_particleTrail = 0xCC; // ParticleIndex_t
                constexpr std::ptrdiff_t m_vecEndLocation = 0xD0; // Vector
                constexpr std::ptrdiff_t m_vecStartPosition = 0xDC; // Vector
                constexpr std::ptrdiff_t m_vecEndLocationCaster = 0xE8; // Vector
            }
            // Parent: CitadelAbilityVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Astro_Shotgun_Toggle_VData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_SpellShield_Buff {
            }
            // Parent: CCitadel_Modifier_Intrinsic_BaseVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MagicStormWatcherVData {
                constexpr std::ptrdiff_t m_BuffModifier = 0x608; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 4
            namespace CCitadel_Modifier_TrooperDisabledInvulnerability {
                constexpr std::ptrdiff_t m_flBulletResistancePctMax = 0xC0; // float32
                constexpr std::ptrdiff_t m_bShieldUp = 0xC4; // bool
                constexpr std::ptrdiff_t m_flShieldUpTime = 0xC8; // GameTime_t
                constexpr std::ptrdiff_t m_trackInfo = 0xCC; // ModifierTrackedParticle_t
            }
            // Parent: CFuncPlat
            // Field count: 2
            namespace CFuncPlatRot {
                constexpr std::ptrdiff_t m_end = 0x870; // QAngle
                constexpr std::ptrdiff_t m_start = 0x87C; // QAngle
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_FlameDashGroundAura {
            }
            // Parent: CPointEntity
            // Field count: 5
            namespace CEnvSpark {
                constexpr std::ptrdiff_t m_flDelay = 0x4E8; // float32
                constexpr std::ptrdiff_t m_nMagnitude = 0x4EC; // int32
                constexpr std::ptrdiff_t m_nTrailLength = 0x4F0; // int32
                constexpr std::ptrdiff_t m_nType = 0x4F4; // int32
                constexpr std::ptrdiff_t m_OnSpark = 0x4F8; // CEntityIOOutput
            }
            // Parent: CCitadel_Ability_Melee_Base
            // Field count: 2
            namespace CCitadel_Ability_Uppercut {
                constexpr std::ptrdiff_t m_TypeIDStickyBombAttached = 0xB88; // CUtlStringToken
                constexpr std::ptrdiff_t m_bShouldUseResources = 0xDC0; // bool
            }
            // Parent: CCitadelBaseAbility
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_vecPulseTargets (EHANDLE)
            namespace CCitadel_Ability_PsychicPulse {
                constexpr std::ptrdiff_t m_vecPulseTargets = 0xB38; // CNetworkUtlVectorBase<CHandle<CBaseEntity>>
            }
            // Parent: CPlayerPawnComponent
            // Field count: 0
            namespace CPlayer_AutoaimServices {
            }
            // Parent: CBasePlatTrain
            // Field count: 6
            namespace CFuncTrain {
                constexpr std::ptrdiff_t m_hCurrentTarget = 0x868; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_activated = 0x86C; // bool
                constexpr std::ptrdiff_t m_hEnemy = 0x870; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flBlockDamage = 0x874; // float32
                constexpr std::ptrdiff_t m_flNextBlockTime = 0x878; // GameTime_t
                constexpr std::ptrdiff_t m_iszLastTarget = 0x880; // CUtlSymbolLarge
            }
            // Parent: CCitadelProjectile
            // Field count: 1
            namespace CCitadel_Projectile_SpiderProjectile {
                constexpr std::ptrdiff_t m_flNextRandomPositionTime = 0x870; // GameTime_t
            }
            // Parent: CCitadel_Modifier_StunnedVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_PillarVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffStartParticle = 0x7C8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_BuffEndParticle = 0x8A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_PostSleepModifier = 0x988; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadelModifier
            // Field count: 3
            namespace CCitadel_Modifier_WingBlastApply {
                constexpr std::ptrdiff_t m_vStart = 0x168; // Vector
                constexpr std::ptrdiff_t m_vEnd = 0x174; // Vector
                constexpr std::ptrdiff_t m_vPush = 0x180; // Vector
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_ImmobilizeTrap_Debuff {
            }
            // Parent: CCitadelModifierAura_Cone
            // Field count: 3
            namespace CCitadel_Modifier_Fathom_ScaldingSpray_Aura {
                constexpr std::ptrdiff_t m_playerAngles = 0xE0; // QAngle
                constexpr std::ptrdiff_t m_flLastStackTime = 0xEC; // GameTime_t
                constexpr std::ptrdiff_t m_ConeParticle = 0xF0; // ParticleIndex_t
            }
            // Parent: CCitadel_WeaponUpgrade_HeadshotBooster
            // Field count: 0
            namespace CCitadel_WeaponUpgrade_Headhunter {
            }
            // Parent: CBaseTrigger
            // Field count: 3
            namespace CNpcFootSweep {
                constexpr std::ptrdiff_t m_vecPushers = 0x990; // CUtlVector<FootSweepPusher_t>
                constexpr std::ptrdiff_t m_bUseCenterPusher = 0x9A8; // bool
                constexpr std::ptrdiff_t m_bUseForwardPusher = 0x9A9; // bool
            }
            // Parent: CPointEntity
            // Field count: 19
            namespace CNavLinkAreaEntity {
                constexpr std::ptrdiff_t m_flWidth = 0x4E8; // float32
                constexpr std::ptrdiff_t m_vLocatorOffset = 0x4EC; // Vector
                constexpr std::ptrdiff_t m_qLocatorAnglesOffset = 0x4F8; // QAngle
                constexpr std::ptrdiff_t m_strMovementForward = 0x508; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strMovementReverse = 0x510; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_nNavLinkIdForward = 0x518; // int32
                constexpr std::ptrdiff_t m_nNavLinkIdReverse = 0x51C; // int32
                constexpr std::ptrdiff_t m_bEnabled = 0x520; // bool
                constexpr std::ptrdiff_t m_strFilterName = 0x528; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hFilter = 0x530; // CHandle<CBaseFilter>
                constexpr std::ptrdiff_t m_vecNpcUsers = 0x538; // CUtlVectorFixedGrowable<CHandle<CAI_BaseNPC>,6>
                constexpr std::ptrdiff_t m_szListenForAnimTag = 0x568; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_bIsListeningForAnimTag = 0x570; // bool
                constexpr std::ptrdiff_t m_OnAnimTagFired = 0x580; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAnimTagStart = 0x5A8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnAnimTagEnd = 0x5D0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnNavLinkStart = 0x5F8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnNavLinkFinish = 0x620; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bIsTerminus = 0x648; // bool
            }
            // Parent: CBaseToggle
            // Field count: 12
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkIncludeByName
            // MNetworkOverride
            namespace CFuncMoveLinear {
                constexpr std::ptrdiff_t m_authoredPosition = 0x840; // MoveLinearAuthoredPos_t
                constexpr std::ptrdiff_t m_angMoveEntitySpace = 0x844; // QAngle
                constexpr std::ptrdiff_t m_vecMoveDirParentSpace = 0x850; // Vector
                constexpr std::ptrdiff_t m_soundStart = 0x860; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_soundStop = 0x868; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_currentSound = 0x870; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flBlockDamage = 0x878; // float32
                constexpr std::ptrdiff_t m_flStartPosition = 0x87C; // float32
                constexpr std::ptrdiff_t m_OnFullyOpen = 0x888; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnFullyClosed = 0x8B0; // CEntityIOOutput
                constexpr std::ptrdiff_t m_bCreateMovableNavMesh = 0x8D8; // bool
                constexpr std::ptrdiff_t m_bCreateNavObstacle = 0x8D9; // bool
            }
            // Parent: CBaseEntity
            // Field count: 3
            namespace CCommentaryAuto {
                constexpr std::ptrdiff_t m_OnCommentaryNewGame = 0x4E8; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnCommentaryMidGame = 0x510; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnCommentaryMultiplayerSpawn = 0x538; // CEntityIOOutput
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityBullChargeVData {
                constexpr std::ptrdiff_t m_cameraSequenceImpact = 0x1560; // CitadelCameraOperationsSequence_t
                constexpr std::ptrdiff_t m_ModifierTossAirControlLockout = 0x15E8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ModifierWeaponPowerIncrease = 0x15F8; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ModifierChargeDragEnemy = 0x1608; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_ModifierBullCharging = 0x1618; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_WallImpactParticle = 0x1628; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strWallSlamSound = 0x1708; // CSoundEventName
                constexpr std::ptrdiff_t m_flWallStunLookAheadDist = 0x1718; // float32
                constexpr std::ptrdiff_t m_flEndChargeVelocityScale = 0x171C; // float32
            }
            // Parent: CCitadelPlayerPawnBase
            // Field count: 0
            //
            // Metadata:
            // MNetworkIncludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkVarTypeOverride
            // MNetworkIncludeByName
            // MNetworkVarTypeOverride
            // MNetworkIncludeByName
            // MNetworkVarTypeOverride
            // MNetworkIncludeByName
            namespace CCitadelObserverPawn {
            }
            // Parent: CCitadelModifierAura
            // Field count: 0
            namespace CCitadel_Modifier_Tier2Boss_RocketDamage_Aura {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_Rutger_Pulse_VData {
                constexpr std::ptrdiff_t m_strSilenceTargetSound = 0x608; // CSoundEventName
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityShivDashVData {
                constexpr std::ptrdiff_t m_DashModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_DashImpactEffect = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DashSwingEffect = 0x1650; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_DashLineEffect = 0x1730; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strDashStartWithTargets = 0x1810; // CSoundEventName
                constexpr std::ptrdiff_t m_strDashStartEcho = 0x1820; // CSoundEventName
                constexpr std::ptrdiff_t m_strDashStartMiss = 0x1830; // CSoundEventName
                constexpr std::ptrdiff_t m_strDashHitEnemy = 0x1840; // CSoundEventName
                constexpr std::ptrdiff_t m_flEchoDelay = 0x1850; // float32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Nano_Pounce_Self {
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            namespace CCitadel_Ability_MobileResupply {
                constexpr std::ptrdiff_t m_vDeployPosition = 0xB00; // Vector
                constexpr std::ptrdiff_t m_angDeploy = 0xB0C; // QAngle
            }
            // Parent: CitadelAbilityVData
            // Field count: 14
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CAbilityHornetSnipeVData {
                constexpr std::ptrdiff_t m_AssassinateShotParticle = 0x1560; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_AssassinateShotParticleOwnerOnly = 0x1640; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LaserSightParticle = 0x1720; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_LaserSightParticleOwnerOnly = 0x1800; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_SnipeModifier = 0x18E0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_BuffOnKillModifier = 0x18F0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_GlowEnemyModifier = 0x1900; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_strSnipeImpactSound = 0x1910; // CSoundEventName
                constexpr std::ptrdiff_t m_strZoomIn = 0x1920; // CSoundEventName
                constexpr std::ptrdiff_t m_strZoomOut = 0x1930; // CSoundEventName
                constexpr std::ptrdiff_t m_flMinScopeTimeToShoot = 0x1940; // float32
                constexpr std::ptrdiff_t m_flFadeToBlackTime = 0x1944; // float32
                constexpr std::ptrdiff_t m_flFoVChangeTime = 0x1948; // float32
                constexpr std::ptrdiff_t m_ScopeFoV = 0x1950; // CUtlVector<float32>
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_AblativeCoatResistBuff {
            }
            // Parent: CCitadelModifierVData
            // Field count: 1
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifierVitalitySuppressorVData {
                constexpr std::ptrdiff_t m_DebuffParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CEntityInstance
            // Field count: 76
            //
            // Metadata:
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByUserGroup
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // MNetworkExcludeByName
            // NetworkVarNames: m_CBodyComponent (CBodyComponent::Storage_t)
            // NetworkVarNames: m_iHealth (int32)
            // NetworkVarNames: m_iMaxHealth (int32)
            // NetworkVarNames: m_lifeState (uint8)
            // NetworkVarNames: m_bTakesDamage (bool)
            // NetworkVarNames: m_nTakeDamageFlags (TakeDamageFlags_t)
            // NetworkVarNames: m_nPlatformType (EntityPlatformTypes_t)
            // NetworkVarNames: m_MoveCollide (MoveCollide_t)
            // NetworkVarNames: m_MoveType (MoveType_t)
            // NetworkVarNames: m_nSubclassID (EntitySubclassID_t)
            // NetworkVarNames: m_flAnimTime (float32)
            // NetworkVarNames: m_flSimulationTime (float32)
            // NetworkVarNames: m_flCreateTime (GameTime_t)
            // NetworkVarNames: m_bClientSideRagdoll (bool)
            // NetworkVarNames: m_ubInterpolationFrame (uint8)
            // NetworkVarNames: m_iTeamNum (uint8)
            // NetworkVarNames: m_flSpeed (float)
            // NetworkVarNames: m_spawnflags (uint32)
            // NetworkVarNames: m_nNextThinkTick (GameTick_t)
            // NetworkVarNames: m_fFlags (uint32)
            // NetworkVarNames: m_vecVelocity (CNetworkVelocityVector)
            // NetworkVarNames: m_pModifierProp (CModifierProperty*)
            // NetworkVarNames: m_hEffectEntity (CHandle<CBaseEntity>)
            // NetworkVarNames: m_hOwnerEntity (CHandle<CBaseEntity>)
            // NetworkVarNames: m_fEffects (uint32)
            // NetworkVarNames: m_hGroundEntity (CHandle<CBaseEntity>)
            // NetworkVarNames: m_nGroundBodyIndex (int)
            // NetworkVarNames: m_flFriction (float32)
            // NetworkVarNames: m_flElasticity (float32)
            // NetworkVarNames: m_flGravityScale (float32)
            // NetworkVarNames: m_flTimeScale (float32)
            // NetworkVarNames: m_flWaterLevel (float)
            // NetworkVarNames: m_bAnimatedEveryTick (bool)
            // NetworkVarNames: m_flNavIgnoreUntilTime (GameTime_t)
            namespace CBaseEntity {
                constexpr std::ptrdiff_t m_CBodyComponent = 0x40; // CBodyComponent*
                constexpr std::ptrdiff_t m_NetworkTransmitComponent = 0x48; // CNetworkTransmitComponent
                constexpr std::ptrdiff_t m_aThinkFunctions = 0x250; // CUtlVector<thinkfunc_t>
                constexpr std::ptrdiff_t m_iCurrentThinkContext = 0x268; // int32
                constexpr std::ptrdiff_t m_nLastThinkTick = 0x26C; // GameTick_t
                constexpr std::ptrdiff_t m_bDisabledContextThinks = 0x270; // bool
                constexpr std::ptrdiff_t m_isSteadyState = 0x280; // CTypedBitVec<64>
                constexpr std::ptrdiff_t m_lastNetworkChange = 0x288; // float32
                constexpr std::ptrdiff_t m_ResponseContexts = 0x298; // CUtlVector<ResponseContext_t>
                constexpr std::ptrdiff_t m_iszResponseContext = 0x2B0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iHealth = 0x2D8; // int32
                constexpr std::ptrdiff_t m_iMaxHealth = 0x2DC; // int32
                constexpr std::ptrdiff_t m_lifeState = 0x2E0; // uint8
                constexpr std::ptrdiff_t m_flDamageAccumulator = 0x2E4; // float32
                constexpr std::ptrdiff_t m_bTakesDamage = 0x2E8; // bool
                constexpr std::ptrdiff_t m_nTakeDamageFlags = 0x2F0; // TakeDamageFlags_t
                constexpr std::ptrdiff_t m_nPlatformType = 0x2F8; // EntityPlatformTypes_t
                constexpr std::ptrdiff_t m_MoveCollide = 0x2FA; // MoveCollide_t
                constexpr std::ptrdiff_t m_MoveType = 0x2FB; // MoveType_t
                constexpr std::ptrdiff_t m_nActualMoveType = 0x2FC; // MoveType_t
                constexpr std::ptrdiff_t m_nWaterTouch = 0x2FD; // uint8
                constexpr std::ptrdiff_t m_nSlimeTouch = 0x2FE; // uint8
                constexpr std::ptrdiff_t m_bRestoreInHierarchy = 0x2FF; // bool
                constexpr std::ptrdiff_t m_target = 0x300; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hDamageFilter = 0x308; // CHandle<CBaseFilter>
                constexpr std::ptrdiff_t m_iszDamageFilterName = 0x310; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_flMoveDoneTime = 0x318; // float32
                constexpr std::ptrdiff_t m_nSubclassID = 0x31C; // CUtlStringToken
                constexpr std::ptrdiff_t m_flAnimTime = 0x328; // float32
                constexpr std::ptrdiff_t m_flSimulationTime = 0x32C; // float32
                constexpr std::ptrdiff_t m_flCreateTime = 0x330; // GameTime_t
                constexpr std::ptrdiff_t m_bClientSideRagdoll = 0x334; // bool
                constexpr std::ptrdiff_t m_ubInterpolationFrame = 0x335; // uint8
                constexpr std::ptrdiff_t m_vPrevVPhysicsUpdatePos = 0x338; // Vector
                constexpr std::ptrdiff_t m_iTeamNum = 0x344; // uint8
                constexpr std::ptrdiff_t m_iGlobalname = 0x348; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_iSentToClients = 0x350; // int32
                constexpr std::ptrdiff_t m_flSpeed = 0x354; // float32
                constexpr std::ptrdiff_t m_sUniqueHammerID = 0x358; // CUtlString
                constexpr std::ptrdiff_t m_spawnflags = 0x360; // uint32
                constexpr std::ptrdiff_t m_nNextThinkTick = 0x364; // GameTick_t
                constexpr std::ptrdiff_t m_nSimulationTick = 0x368; // int32
                constexpr std::ptrdiff_t m_OnKilled = 0x370; // CEntityIOOutput
                constexpr std::ptrdiff_t m_fFlags = 0x398; // uint32
                constexpr std::ptrdiff_t m_vecAbsVelocity = 0x39C; // Vector
                constexpr std::ptrdiff_t m_vecVelocity = 0x3A8; // CNetworkVelocityVector
                constexpr std::ptrdiff_t m_nPushEnumCount = 0x3D8; // int32
                constexpr std::ptrdiff_t m_pCollision = 0x3E0; // CCollisionProperty*
                constexpr std::ptrdiff_t m_pModifierProp = 0x3E8; // CModifierProperty*
                constexpr std::ptrdiff_t m_hEffectEntity = 0x3F0; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hOwnerEntity = 0x3F4; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_fEffects = 0x3F8; // uint32
                constexpr std::ptrdiff_t m_hGroundEntity = 0x3FC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_nGroundBodyIndex = 0x400; // int32
                constexpr std::ptrdiff_t m_flFriction = 0x404; // float32
                constexpr std::ptrdiff_t m_flElasticity = 0x408; // float32
                constexpr std::ptrdiff_t m_flGravityScale = 0x40C; // float32
                constexpr std::ptrdiff_t m_flTimeScale = 0x410; // float32
                constexpr std::ptrdiff_t m_flWaterLevel = 0x414; // float32
                constexpr std::ptrdiff_t m_bAnimatedEveryTick = 0x418; // bool
                constexpr std::ptrdiff_t m_bDisableLowViolence = 0x419; // bool
                constexpr std::ptrdiff_t m_nWaterType = 0x41A; // uint8
                constexpr std::ptrdiff_t m_iEFlags = 0x41C; // int32
                constexpr std::ptrdiff_t m_OnUser1 = 0x420; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUser2 = 0x448; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUser3 = 0x470; // CEntityIOOutput
                constexpr std::ptrdiff_t m_OnUser4 = 0x498; // CEntityIOOutput
                constexpr std::ptrdiff_t m_iInitialTeamNum = 0x4C0; // int32
                constexpr std::ptrdiff_t m_flNavIgnoreUntilTime = 0x4C4; // GameTime_t
                constexpr std::ptrdiff_t m_vecAngVelocity = 0x4C8; // QAngle
                constexpr std::ptrdiff_t m_bNetworkQuantizeOriginAndAngles = 0x4D4; // bool
                constexpr std::ptrdiff_t m_bLagCompensate = 0x4D5; // bool
                constexpr std::ptrdiff_t m_flOverriddenFriction = 0x4D8; // float32
                constexpr std::ptrdiff_t m_pBlocker = 0x4DC; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flLocalTime = 0x4E0; // float32
                constexpr std::ptrdiff_t m_flVPhysicsUpdateLocalTime = 0x4E4; // float32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_WeaponUpgrade_BansheeSlugs {
            }
            // Parent: CitadelAbilityVData
            // Field count: 9
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CBaseDashCastAbilityVData {
                constexpr std::ptrdiff_t m_AbilityToTrigger = 0x1560; // CSubclassName<4>
                constexpr std::ptrdiff_t m_flDashCastTriggerRadius = 0x1570; // float32
                constexpr std::ptrdiff_t m_flDashSpeed = 0x1574; // float32
                constexpr std::ptrdiff_t m_bSnapToZeroSpeedOnEnd = 0x1578; // bool
                constexpr std::ptrdiff_t m_bUseCurveToDefineSpeed = 0x1579; // bool
                constexpr std::ptrdiff_t m_MovementSpeedCurve = 0x1580; // CPiecewiseCurve
                constexpr std::ptrdiff_t m_flMovementSpeedCurveAvgSpeed = 0x15C0; // float32
                constexpr std::ptrdiff_t m_strTargetHitSound = 0x15C8; // CSoundEventName
                constexpr std::ptrdiff_t m_strMissSound = 0x15D8; // CSoundEventName
            }
            // Parent: CLogicalEntity
            // Field count: 9
            namespace CLogicMeasureMovement {
                constexpr std::ptrdiff_t m_strMeasureTarget = 0x4E8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strMeasureReference = 0x4F0; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_strTargetReference = 0x4F8; // CUtlSymbolLarge
                constexpr std::ptrdiff_t m_hMeasureTarget = 0x500; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hMeasureReference = 0x504; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTarget = 0x508; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_hTargetReference = 0x50C; // CHandle<CBaseEntity>
                constexpr std::ptrdiff_t m_flScale = 0x510; // float32
                constexpr std::ptrdiff_t m_nMeasureType = 0x514; // int32
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CModifier_Mirage_Traveler_MovementSpeed {
            }
            // Parent: CCitadelModifierVData
            // Field count: 0
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CModifier_Synth_Barrage_Amp_VData {
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Gravity_Lasso_VData {
                constexpr std::ptrdiff_t m_GravityLassoSelf = 0x1560; // CEmbeddedSubclass<CBaseModifier>
                constexpr std::ptrdiff_t m_GravityLassoTarget = 0x1570; // CEmbeddedSubclass<CBaseModifier>
            }
            // Parent: CCitadel_Modifier_BaseEventProcVData
            // Field count: 4
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_MeleeCharge_VData {
                constexpr std::ptrdiff_t m_SwingParticle = 0x638; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HitParticle = 0x718; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_ReloadVisualModifier = 0x7F8; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_AmmoAddedVisualModifier = 0x808; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CitadelItemVData
            // Field count: 3
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Item_HealthRegenAuraVData {
                constexpr std::ptrdiff_t m_HealParticle = 0x15A8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_CastHealParticle = 0x1688; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_HealingPulseTrackerModifier = 0x1768; // CEmbeddedSubclass<CCitadelModifier>
            }
            // Parent: CCitadel_Modifier_RegeneratingTechShield
            // Field count: 0
            namespace CCitadel_Modifier_GalvanicStormTechShield {
            }
            // Parent: CCitadelModifier
            // Field count: 0
            namespace CCitadel_Modifier_Root {
            }
            // Parent: CBaseEntity
            // Field count: 1
            //
            // Metadata:
            // NetworkVarNames: m_CCitadelHeroComponent (CCitadelHeroComponent::Storage_t)
            namespace C_HeroPreview {
                constexpr std::ptrdiff_t m_CCitadelHeroComponent = 0x4E8; // CCitadelHeroComponent
            }
            // Parent: None
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: nType (FixAngleSet_t)
            // NetworkVarNames: qAngle (QAngle)
            // NetworkVarNames: nIndex (uint32)
            namespace ViewAngleServerChange_t {
                constexpr std::ptrdiff_t nType = 0x30; // FixAngleSet_t
                constexpr std::ptrdiff_t qAngle = 0x34; // QAngle
                constexpr std::ptrdiff_t nIndex = 0x40; // uint32
            }
            // Parent: CCitadel_Item
            // Field count: 0
            namespace CCitadel_ArmorUpgrade_Colossus {
            }
            // Parent: CCitadel_Ability_BaseHeldItemVData
            // Field count: 15
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_GoldenIdolVData {
                constexpr std::ptrdiff_t m_sIdolDropOffSound = 0x1640; // CSoundEventName
                constexpr std::ptrdiff_t m_DropoffTimerModifier = 0x1650; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_HoldingIdolModifier = 0x1660; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_RevealedHoldingIdolModifier = 0x1670; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_Bonus01 = 0x1680; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_Bonus02 = 0x1690; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_NoPickupModifier = 0x16A0; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_flInstantGoldPercentage = 0x16B0; // float32
                constexpr std::ptrdiff_t m_iComebackBounty = 0x16B4; // int32
                constexpr std::ptrdiff_t m_flCasterBonusPercent = 0x16B8; // float32
                constexpr std::ptrdiff_t m_flRevealTime = 0x16BC; // float32
                constexpr std::ptrdiff_t m_flDamageTickRate = 0x16C0; // float32
                constexpr std::ptrdiff_t m_flMaxHealthDamage = 0x16C4; // float32
                constexpr std::ptrdiff_t m_flTimeToDamage = 0x16C8; // float32
                constexpr std::ptrdiff_t m_flNoPickupTime = 0x16CC; // float32
            }
            // Parent: CitadelAbilityVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Ability_Magician_ShadowCloneVData {
                constexpr std::ptrdiff_t m_CloneModifier = 0x1560; // CEmbeddedSubclass<CCitadelModifier>
                constexpr std::ptrdiff_t m_ExplodeParticle = 0x1570; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            }
            // Parent: CCitadelModifier
            // Field count: 1
            namespace CCitadel_Modifier_Thumper_Ability_2 {
                constexpr std::ptrdiff_t m_vLastPosition = 0xC0; // Vector
            }
            // Parent: CCitadelModifierVData
            // Field count: 2
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_BulletFlurryVData {
                constexpr std::ptrdiff_t m_ImpactParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_strAttackerHitSound = 0x6E8; // CSoundEventName
            }
            // Parent: CCitadelBaseAbility
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_bCardIsFlying (bool)
            namespace CCitadel_Ability_CardToss {
                constexpr std::ptrdiff_t m_vecCards = 0xB00; // CUtlVector<CCitadel_Ability_CardToss::Card_t>
                constexpr std::ptrdiff_t m_bCardIsFlying = 0xD98; // bool
            }
            // Parent: CCitadelModifierVData
            // Field count: 5
            //
            // Metadata:
            // MGetKV3ClassDefaults
            namespace CCitadel_Modifier_TeleportToObjectiveVData {
                constexpr std::ptrdiff_t m_TeleportOriginParticle = 0x608; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportDestinationParticle = 0x6E8; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                constexpr std::ptrdiff_t m_TeleportStartSound = 0x7C8; // CSoundEventName
                constexpr std::ptrdiff_t m_TeleportCompleteSound = 0x7D8; // CSoundEventName
                constexpr std::ptrdiff_t m_TeleportArriveSound = 0x7E8; // CSoundEventName
            }
            // Parent: None
            // Field count: 3
            //
            // Metadata:
            // NetworkVarNames: m_SourceModifierID (EntitySubclassID_t)
            // NetworkVarNames: m_eValType (EModifierValue)
            // NetworkVarNames: m_flValue (float)
            namespace StatViewerModifierValues_t {
                constexpr std::ptrdiff_t m_SourceModifierID = 0x30; // CUtlStringToken
                constexpr std::ptrdiff_t m_eValType = 0x34; // EModifierValue
                constexpr std::ptrdiff_t m_flValue = 0x38; // float32
            }
            // Parent: None
            // Field count: 2
            //
            // Metadata:
            // NetworkVarNames: m_Transforms (CTransform)
            // NetworkVarNames: m_hOwner (EHANDLE)
            namespace PhysicsRagdollPose_t {
                constexpr std::ptrdiff_t m_Transforms = 0x8; // CNetworkUtlVectorBase<CTransform>
                constexpr std::ptrdiff_t m_hOwner = 0x20; // CHandle<CBaseEntity>
            }
        }
    }
}
